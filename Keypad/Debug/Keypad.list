
Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08009ca8  08009ca8  0000aca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0e0  0800a0e0  0000c1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0e0  0800a0e0  0000b0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0e8  0800a0e8  0000c1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0e8  0800a0e8  0000b0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0ec  0800a0ec  0000b0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800a0f0  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1f0  2**0
                  CONTENTS
 10 .bss          00000348  200001f0  200001f0  0000c1f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000538  20000538  0000c1f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010cf7  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a6  00000000  00000000  0001cf17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  0001f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d34  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a87  00000000  00000000  000210b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015865  00000000  00000000  00044b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbeda  00000000  00000000  0005a3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013627a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005cb8  00000000  00000000  001362c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003e  00000000  00000000  0013bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c8c 	.word	0x08009c8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08009c8c 	.word	0x08009c8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4C // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f023 030f 	bic.w	r3, r3, #15
 8000f48:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f043 030c 	orr.w	r3, r3, #12
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	f043 030c 	orr.w	r3, r3, #12
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f78:	f107 0208 	add.w	r2, r7, #8
 8000f7c:	2364      	movs	r3, #100	@ 0x64
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2304      	movs	r3, #4
 8000f82:	214c      	movs	r1, #76	@ 0x4c
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <lcd_send_cmd+0x5c>)
 8000f86:	f002 fbed 	bl	8003764 <HAL_I2C_Master_Transmit>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200002a4 	.word	0x200002a4

08000f98 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f023 030f 	bic.w	r3, r3, #15
 8000fa8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	f043 030d 	orr.w	r3, r3, #13
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	f043 0309 	orr.w	r3, r3, #9
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000fc4:	7bbb      	ldrb	r3, [r7, #14]
 8000fc6:	f043 030d 	orr.w	r3, r3, #13
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	f043 0309 	orr.w	r3, r3, #9
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fd8:	f107 0208 	add.w	r2, r7, #8
 8000fdc:	2364      	movs	r3, #100	@ 0x64
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	214c      	movs	r1, #76	@ 0x4c
 8000fe4:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <lcd_send_data+0x5c>)
 8000fe6:	f002 fbbd 	bl	8003764 <HAL_I2C_Master_Transmit>
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200002a4 	.word	0x200002a4

08000ff8 <lcd_clear>:
//	lcd_put_cur(row,col);
//	lcd_send_string(string);
//}

void lcd_clear (void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000ffe:	2080      	movs	r0, #128	@ 0x80
 8001000:	f7ff ff9a 	bl	8000f38 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	e005      	b.n	8001016 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800100a:	2020      	movs	r0, #32
 800100c:	f7ff ffc4 	bl	8000f98 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3301      	adds	r3, #1
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b45      	cmp	r3, #69	@ 0x45
 800101a:	ddf6      	ble.n	800100a <lcd_clear+0x12>
	}
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
    switch (row)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <lcd_put_cur+0x18>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d005      	beq.n	8001048 <lcd_put_cur+0x22>
 800103c:	e009      	b.n	8001052 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001044:	603b      	str	r3, [r7, #0]
            break;
 8001046:	e004      	b.n	8001052 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800104e:	603b      	str	r3, [r7, #0]
            break;
 8001050:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff6e 	bl	8000f38 <lcd_send_cmd>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <lcd_init>:


void lcd_init (void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001068:	2032      	movs	r0, #50	@ 0x32
 800106a:	f001 fb93 	bl	8002794 <HAL_Delay>
	lcd_send_cmd (0x30);
 800106e:	2030      	movs	r0, #48	@ 0x30
 8001070:	f7ff ff62 	bl	8000f38 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001074:	2005      	movs	r0, #5
 8001076:	f001 fb8d 	bl	8002794 <HAL_Delay>
	lcd_send_cmd (0x30);
 800107a:	2030      	movs	r0, #48	@ 0x30
 800107c:	f7ff ff5c 	bl	8000f38 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001080:	2001      	movs	r0, #1
 8001082:	f001 fb87 	bl	8002794 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001086:	2030      	movs	r0, #48	@ 0x30
 8001088:	f7ff ff56 	bl	8000f38 <lcd_send_cmd>
	HAL_Delay(10);
 800108c:	200a      	movs	r0, #10
 800108e:	f001 fb81 	bl	8002794 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001092:	2020      	movs	r0, #32
 8001094:	f7ff ff50 	bl	8000f38 <lcd_send_cmd>
	HAL_Delay(10);
 8001098:	200a      	movs	r0, #10
 800109a:	f001 fb7b 	bl	8002794 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800109e:	2028      	movs	r0, #40	@ 0x28
 80010a0:	f7ff ff4a 	bl	8000f38 <lcd_send_cmd>
	HAL_Delay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f001 fb75 	bl	8002794 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80010aa:	2008      	movs	r0, #8
 80010ac:	f7ff ff44 	bl	8000f38 <lcd_send_cmd>
	HAL_Delay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f001 fb6f 	bl	8002794 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff ff3e 	bl	8000f38 <lcd_send_cmd>
	HAL_Delay(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f001 fb69 	bl	8002794 <HAL_Delay>
	HAL_Delay(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f001 fb66 	bl	8002794 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80010c8:	2006      	movs	r0, #6
 80010ca:	f7ff ff35 	bl	8000f38 <lcd_send_cmd>
	HAL_Delay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f001 fb60 	bl	8002794 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80010d4:	200c      	movs	r0, #12
 80010d6:	f7ff ff2f 	bl	8000f38 <lcd_send_cmd>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}

080010de <lcd_send_string>:

void lcd_send_string (char *str)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80010e6:	e006      	b.n	80010f6 <lcd_send_string+0x18>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff51 	bl	8000f98 <lcd_send_data>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f4      	bne.n	80010e8 <lcd_send_string+0xa>
}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <Keypad_Get_Char>:
                         {'4','5','6','B'},
                         {'7','8','9','C'},
                         {'*','0','#','D'}};

char Keypad_Get_Char(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	val_key = 0;
 800110c:	4bc6      	ldr	r3, [pc, #792]	@ (8001428 <Keypad_Get_Char+0x320>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001118:	48c4      	ldr	r0, [pc, #784]	@ (800142c <Keypad_Get_Char+0x324>)
 800111a:	f002 f9c5 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001124:	48c1      	ldr	r0, [pc, #772]	@ (800142c <Keypad_Get_Char+0x324>)
 8001126:	f002 f9bf 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	2180      	movs	r1, #128	@ 0x80
 800112e:	48bf      	ldr	r0, [pc, #764]	@ (800142c <Keypad_Get_Char+0x324>)
 8001130:	f002 f9ba 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2140      	movs	r1, #64	@ 0x40
 8001138:	48bc      	ldr	r0, [pc, #752]	@ (800142c <Keypad_Get_Char+0x324>)
 800113a:	f002 f9b5 	bl	80034a8 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 800113e:	2120      	movs	r1, #32
 8001140:	48ba      	ldr	r0, [pc, #744]	@ (800142c <Keypad_Get_Char+0x324>)
 8001142:	f002 f999 	bl	8003478 <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d110      	bne.n	800116e <Keypad_Get_Char+0x66>
		HAL_Delay(4);
 800114c:	2004      	movs	r0, #4
 800114e:	f001 fb21 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));
 8001152:	bf00      	nop
 8001154:	2120      	movs	r1, #32
 8001156:	48b5      	ldr	r0, [pc, #724]	@ (800142c <Keypad_Get_Char+0x324>)
 8001158:	f002 f98e 	bl	8003478 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f8      	beq.n	8001154 <Keypad_Get_Char+0x4c>
		HAL_Delay(4);
 8001162:	2004      	movs	r0, #4
 8001164:	f001 fb16 	bl	8002794 <HAL_Delay>
		val_key = keys[0][0];
 8001168:	2231      	movs	r2, #49	@ 0x31
 800116a:	4baf      	ldr	r3, [pc, #700]	@ (8001428 <Keypad_Get_Char+0x320>)
 800116c:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 800116e:	2110      	movs	r1, #16
 8001170:	48ae      	ldr	r0, [pc, #696]	@ (800142c <Keypad_Get_Char+0x324>)
 8001172:	f002 f981 	bl	8003478 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d110      	bne.n	800119e <Keypad_Get_Char+0x96>
		HAL_Delay(4);
 800117c:	2004      	movs	r0, #4
 800117e:	f001 fb09 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8001182:	bf00      	nop
 8001184:	2110      	movs	r1, #16
 8001186:	48a9      	ldr	r0, [pc, #676]	@ (800142c <Keypad_Get_Char+0x324>)
 8001188:	f002 f976 	bl	8003478 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f8      	beq.n	8001184 <Keypad_Get_Char+0x7c>
		HAL_Delay(4);
 8001192:	2004      	movs	r0, #4
 8001194:	f001 fafe 	bl	8002794 <HAL_Delay>
		val_key = keys[0][1];
 8001198:	2232      	movs	r2, #50	@ 0x32
 800119a:	4ba3      	ldr	r3, [pc, #652]	@ (8001428 <Keypad_Get_Char+0x320>)
 800119c:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 800119e:	2102      	movs	r1, #2
 80011a0:	48a2      	ldr	r0, [pc, #648]	@ (800142c <Keypad_Get_Char+0x324>)
 80011a2:	f002 f969 	bl	8003478 <HAL_GPIO_ReadPin>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d110      	bne.n	80011ce <Keypad_Get_Char+0xc6>
		HAL_Delay(4);
 80011ac:	2004      	movs	r0, #4
 80011ae:	f001 faf1 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 80011b2:	bf00      	nop
 80011b4:	2102      	movs	r1, #2
 80011b6:	489d      	ldr	r0, [pc, #628]	@ (800142c <Keypad_Get_Char+0x324>)
 80011b8:	f002 f95e 	bl	8003478 <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f8      	beq.n	80011b4 <Keypad_Get_Char+0xac>
		HAL_Delay(4);
 80011c2:	2004      	movs	r0, #4
 80011c4:	f001 fae6 	bl	8002794 <HAL_Delay>
		val_key = keys[0][2];
 80011c8:	2233      	movs	r2, #51	@ 0x33
 80011ca:	4b97      	ldr	r3, [pc, #604]	@ (8001428 <Keypad_Get_Char+0x320>)
 80011cc:	701a      	strb	r2, [r3, #0]
	}
	if (!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 80011ce:	2101      	movs	r1, #1
 80011d0:	4896      	ldr	r0, [pc, #600]	@ (800142c <Keypad_Get_Char+0x324>)
 80011d2:	f002 f951 	bl	8003478 <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d110      	bne.n	80011fe <Keypad_Get_Char+0xf6>
		HAL_Delay(4);
 80011dc:	2004      	movs	r0, #4
 80011de:	f001 fad9 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80011e2:	bf00      	nop
 80011e4:	2101      	movs	r1, #1
 80011e6:	4891      	ldr	r0, [pc, #580]	@ (800142c <Keypad_Get_Char+0x324>)
 80011e8:	f002 f946 	bl	8003478 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f8      	beq.n	80011e4 <Keypad_Get_Char+0xdc>
		HAL_Delay(4);
 80011f2:	2004      	movs	r0, #4
 80011f4:	f001 face 	bl	8002794 <HAL_Delay>
		val_key = keys[0][3];
 80011f8:	2241      	movs	r2, #65	@ 0x41
 80011fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001428 <Keypad_Get_Char+0x320>)
 80011fc:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001204:	4889      	ldr	r0, [pc, #548]	@ (800142c <Keypad_Get_Char+0x324>)
 8001206:	f002 f94f 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001210:	4886      	ldr	r0, [pc, #536]	@ (800142c <Keypad_Get_Char+0x324>)
 8001212:	f002 f949 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	4884      	ldr	r0, [pc, #528]	@ (800142c <Keypad_Get_Char+0x324>)
 800121c:	f002 f944 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	2140      	movs	r1, #64	@ 0x40
 8001224:	4881      	ldr	r0, [pc, #516]	@ (800142c <Keypad_Get_Char+0x324>)
 8001226:	f002 f93f 	bl	80034a8 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 800122a:	2120      	movs	r1, #32
 800122c:	487f      	ldr	r0, [pc, #508]	@ (800142c <Keypad_Get_Char+0x324>)
 800122e:	f002 f923 	bl	8003478 <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d110      	bne.n	800125a <Keypad_Get_Char+0x152>
		HAL_Delay(4);
 8001238:	2004      	movs	r0, #4
 800123a:	f001 faab 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 800123e:	bf00      	nop
 8001240:	2120      	movs	r1, #32
 8001242:	487a      	ldr	r0, [pc, #488]	@ (800142c <Keypad_Get_Char+0x324>)
 8001244:	f002 f918 	bl	8003478 <HAL_GPIO_ReadPin>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f8      	beq.n	8001240 <Keypad_Get_Char+0x138>
		HAL_Delay(4);
 800124e:	2004      	movs	r0, #4
 8001250:	f001 faa0 	bl	8002794 <HAL_Delay>
		val_key = keys[1][0];
 8001254:	2234      	movs	r2, #52	@ 0x34
 8001256:	4b74      	ldr	r3, [pc, #464]	@ (8001428 <Keypad_Get_Char+0x320>)
 8001258:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 800125a:	2110      	movs	r1, #16
 800125c:	4873      	ldr	r0, [pc, #460]	@ (800142c <Keypad_Get_Char+0x324>)
 800125e:	f002 f90b 	bl	8003478 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d110      	bne.n	800128a <Keypad_Get_Char+0x182>
		HAL_Delay(4);
 8001268:	2004      	movs	r0, #4
 800126a:	f001 fa93 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 800126e:	bf00      	nop
 8001270:	2110      	movs	r1, #16
 8001272:	486e      	ldr	r0, [pc, #440]	@ (800142c <Keypad_Get_Char+0x324>)
 8001274:	f002 f900 	bl	8003478 <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f8      	beq.n	8001270 <Keypad_Get_Char+0x168>
		HAL_Delay(4);
 800127e:	2004      	movs	r0, #4
 8001280:	f001 fa88 	bl	8002794 <HAL_Delay>
		val_key = keys[1][1];
 8001284:	2235      	movs	r2, #53	@ 0x35
 8001286:	4b68      	ldr	r3, [pc, #416]	@ (8001428 <Keypad_Get_Char+0x320>)
 8001288:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 800128a:	2102      	movs	r1, #2
 800128c:	4867      	ldr	r0, [pc, #412]	@ (800142c <Keypad_Get_Char+0x324>)
 800128e:	f002 f8f3 	bl	8003478 <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d110      	bne.n	80012ba <Keypad_Get_Char+0x1b2>
		HAL_Delay(4);
 8001298:	2004      	movs	r0, #4
 800129a:	f001 fa7b 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 800129e:	bf00      	nop
 80012a0:	2102      	movs	r1, #2
 80012a2:	4862      	ldr	r0, [pc, #392]	@ (800142c <Keypad_Get_Char+0x324>)
 80012a4:	f002 f8e8 	bl	8003478 <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f8      	beq.n	80012a0 <Keypad_Get_Char+0x198>
		HAL_Delay(4);
 80012ae:	2004      	movs	r0, #4
 80012b0:	f001 fa70 	bl	8002794 <HAL_Delay>
		val_key = keys[1][2];
 80012b4:	2236      	movs	r2, #54	@ 0x36
 80012b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001428 <Keypad_Get_Char+0x320>)
 80012b8:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 80012ba:	2101      	movs	r1, #1
 80012bc:	485b      	ldr	r0, [pc, #364]	@ (800142c <Keypad_Get_Char+0x324>)
 80012be:	f002 f8db 	bl	8003478 <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d110      	bne.n	80012ea <Keypad_Get_Char+0x1e2>
		HAL_Delay(4);
 80012c8:	2004      	movs	r0, #4
 80012ca:	f001 fa63 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80012ce:	bf00      	nop
 80012d0:	2101      	movs	r1, #1
 80012d2:	4856      	ldr	r0, [pc, #344]	@ (800142c <Keypad_Get_Char+0x324>)
 80012d4:	f002 f8d0 	bl	8003478 <HAL_GPIO_ReadPin>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f8      	beq.n	80012d0 <Keypad_Get_Char+0x1c8>
		HAL_Delay(4);
 80012de:	2004      	movs	r0, #4
 80012e0:	f001 fa58 	bl	8002794 <HAL_Delay>
		val_key = keys[1][3];
 80012e4:	2242      	movs	r2, #66	@ 0x42
 80012e6:	4b50      	ldr	r3, [pc, #320]	@ (8001428 <Keypad_Get_Char+0x320>)
 80012e8:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012f0:	484e      	ldr	r0, [pc, #312]	@ (800142c <Keypad_Get_Char+0x324>)
 80012f2:	f002 f8d9 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012fc:	484b      	ldr	r0, [pc, #300]	@ (800142c <Keypad_Get_Char+0x324>)
 80012fe:	f002 f8d3 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2180      	movs	r1, #128	@ 0x80
 8001306:	4849      	ldr	r0, [pc, #292]	@ (800142c <Keypad_Get_Char+0x324>)
 8001308:	f002 f8ce 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	2140      	movs	r1, #64	@ 0x40
 8001310:	4846      	ldr	r0, [pc, #280]	@ (800142c <Keypad_Get_Char+0x324>)
 8001312:	f002 f8c9 	bl	80034a8 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8001316:	2120      	movs	r1, #32
 8001318:	4844      	ldr	r0, [pc, #272]	@ (800142c <Keypad_Get_Char+0x324>)
 800131a:	f002 f8ad 	bl	8003478 <HAL_GPIO_ReadPin>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d110      	bne.n	8001346 <Keypad_Get_Char+0x23e>
		HAL_Delay(4);
 8001324:	2004      	movs	r0, #4
 8001326:	f001 fa35 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 800132a:	bf00      	nop
 800132c:	2120      	movs	r1, #32
 800132e:	483f      	ldr	r0, [pc, #252]	@ (800142c <Keypad_Get_Char+0x324>)
 8001330:	f002 f8a2 	bl	8003478 <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f8      	beq.n	800132c <Keypad_Get_Char+0x224>
		HAL_Delay(4);
 800133a:	2004      	movs	r0, #4
 800133c:	f001 fa2a 	bl	8002794 <HAL_Delay>
		val_key = keys[2][0];
 8001340:	2237      	movs	r2, #55	@ 0x37
 8001342:	4b39      	ldr	r3, [pc, #228]	@ (8001428 <Keypad_Get_Char+0x320>)
 8001344:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 8001346:	2110      	movs	r1, #16
 8001348:	4838      	ldr	r0, [pc, #224]	@ (800142c <Keypad_Get_Char+0x324>)
 800134a:	f002 f895 	bl	8003478 <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d110      	bne.n	8001376 <Keypad_Get_Char+0x26e>
		HAL_Delay(4);
 8001354:	2004      	movs	r0, #4
 8001356:	f001 fa1d 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 800135a:	bf00      	nop
 800135c:	2110      	movs	r1, #16
 800135e:	4833      	ldr	r0, [pc, #204]	@ (800142c <Keypad_Get_Char+0x324>)
 8001360:	f002 f88a 	bl	8003478 <HAL_GPIO_ReadPin>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f8      	beq.n	800135c <Keypad_Get_Char+0x254>
		HAL_Delay(4);
 800136a:	2004      	movs	r0, #4
 800136c:	f001 fa12 	bl	8002794 <HAL_Delay>
		val_key = keys[2][1];
 8001370:	2238      	movs	r2, #56	@ 0x38
 8001372:	4b2d      	ldr	r3, [pc, #180]	@ (8001428 <Keypad_Get_Char+0x320>)
 8001374:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 8001376:	2102      	movs	r1, #2
 8001378:	482c      	ldr	r0, [pc, #176]	@ (800142c <Keypad_Get_Char+0x324>)
 800137a:	f002 f87d 	bl	8003478 <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d110      	bne.n	80013a6 <Keypad_Get_Char+0x29e>
		HAL_Delay(4);
 8001384:	2004      	movs	r0, #4
 8001386:	f001 fa05 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 800138a:	bf00      	nop
 800138c:	2102      	movs	r1, #2
 800138e:	4827      	ldr	r0, [pc, #156]	@ (800142c <Keypad_Get_Char+0x324>)
 8001390:	f002 f872 	bl	8003478 <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f8      	beq.n	800138c <Keypad_Get_Char+0x284>
		HAL_Delay(4);
 800139a:	2004      	movs	r0, #4
 800139c:	f001 f9fa 	bl	8002794 <HAL_Delay>
		val_key = keys[2][2];
 80013a0:	2239      	movs	r2, #57	@ 0x39
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <Keypad_Get_Char+0x320>)
 80013a4:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin))){
 80013a6:	2101      	movs	r1, #1
 80013a8:	4820      	ldr	r0, [pc, #128]	@ (800142c <Keypad_Get_Char+0x324>)
 80013aa:	f002 f865 	bl	8003478 <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d110      	bne.n	80013d6 <Keypad_Get_Char+0x2ce>
		HAL_Delay(4);
 80013b4:	2004      	movs	r0, #4
 80013b6:	f001 f9ed 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80013ba:	bf00      	nop
 80013bc:	2101      	movs	r1, #1
 80013be:	481b      	ldr	r0, [pc, #108]	@ (800142c <Keypad_Get_Char+0x324>)
 80013c0:	f002 f85a 	bl	8003478 <HAL_GPIO_ReadPin>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f8      	beq.n	80013bc <Keypad_Get_Char+0x2b4>
		HAL_Delay(4);
 80013ca:	2004      	movs	r0, #4
 80013cc:	f001 f9e2 	bl	8002794 <HAL_Delay>
		val_key = keys[2][3];
 80013d0:	2243      	movs	r2, #67	@ 0x43
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <Keypad_Get_Char+0x320>)
 80013d4:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013dc:	4813      	ldr	r0, [pc, #76]	@ (800142c <Keypad_Get_Char+0x324>)
 80013de:	f002 f863 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013e8:	4810      	ldr	r0, [pc, #64]	@ (800142c <Keypad_Get_Char+0x324>)
 80013ea:	f002 f85d 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2180      	movs	r1, #128	@ 0x80
 80013f2:	480e      	ldr	r0, [pc, #56]	@ (800142c <Keypad_Get_Char+0x324>)
 80013f4:	f002 f858 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2140      	movs	r1, #64	@ 0x40
 80013fc:	480b      	ldr	r0, [pc, #44]	@ (800142c <Keypad_Get_Char+0x324>)
 80013fe:	f002 f853 	bl	80034a8 <HAL_GPIO_WritePin>

	if(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin))){
 8001402:	2120      	movs	r1, #32
 8001404:	4809      	ldr	r0, [pc, #36]	@ (800142c <Keypad_Get_Char+0x324>)
 8001406:	f002 f837 	bl	8003478 <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d115      	bne.n	800143c <Keypad_Get_Char+0x334>
		HAL_Delay(4);
 8001410:	2004      	movs	r0, #4
 8001412:	f001 f9bf 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)));
 8001416:	bf00      	nop
 8001418:	2120      	movs	r1, #32
 800141a:	4804      	ldr	r0, [pc, #16]	@ (800142c <Keypad_Get_Char+0x324>)
 800141c:	f002 f82c 	bl	8003478 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f8      	beq.n	8001418 <Keypad_Get_Char+0x310>
 8001426:	e003      	b.n	8001430 <Keypad_Get_Char+0x328>
 8001428:	2000020c 	.word	0x2000020c
 800142c:	40020000 	.word	0x40020000
		HAL_Delay(4);
 8001430:	2004      	movs	r0, #4
 8001432:	f001 f9af 	bl	8002794 <HAL_Delay>
		val_key = keys[3][0];
 8001436:	222a      	movs	r2, #42	@ 0x2a
 8001438:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <Keypad_Get_Char+0x3cc>)
 800143a:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin))){
 800143c:	2110      	movs	r1, #16
 800143e:	4826      	ldr	r0, [pc, #152]	@ (80014d8 <Keypad_Get_Char+0x3d0>)
 8001440:	f002 f81a 	bl	8003478 <HAL_GPIO_ReadPin>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d110      	bne.n	800146c <Keypad_Get_Char+0x364>
		HAL_Delay(4);
 800144a:	2004      	movs	r0, #4
 800144c:	f001 f9a2 	bl	8002794 <HAL_Delay>
		while (!(HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)));
 8001450:	bf00      	nop
 8001452:	2110      	movs	r1, #16
 8001454:	4820      	ldr	r0, [pc, #128]	@ (80014d8 <Keypad_Get_Char+0x3d0>)
 8001456:	f002 f80f 	bl	8003478 <HAL_GPIO_ReadPin>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f8      	beq.n	8001452 <Keypad_Get_Char+0x34a>
		HAL_Delay(4);
 8001460:	2004      	movs	r0, #4
 8001462:	f001 f997 	bl	8002794 <HAL_Delay>
		val_key = keys[3][1];
 8001466:	2230      	movs	r2, #48	@ 0x30
 8001468:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <Keypad_Get_Char+0x3cc>)
 800146a:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin))){
 800146c:	2102      	movs	r1, #2
 800146e:	481a      	ldr	r0, [pc, #104]	@ (80014d8 <Keypad_Get_Char+0x3d0>)
 8001470:	f002 f802 	bl	8003478 <HAL_GPIO_ReadPin>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d110      	bne.n	800149c <Keypad_Get_Char+0x394>
		HAL_Delay(4);
 800147a:	2004      	movs	r0, #4
 800147c:	f001 f98a 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)));
 8001480:	bf00      	nop
 8001482:	2102      	movs	r1, #2
 8001484:	4814      	ldr	r0, [pc, #80]	@ (80014d8 <Keypad_Get_Char+0x3d0>)
 8001486:	f001 fff7 	bl	8003478 <HAL_GPIO_ReadPin>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f8      	beq.n	8001482 <Keypad_Get_Char+0x37a>
		HAL_Delay(4);
 8001490:	2004      	movs	r0, #4
 8001492:	f001 f97f 	bl	8002794 <HAL_Delay>
		val_key = keys[3][2];
 8001496:	2223      	movs	r2, #35	@ 0x23
 8001498:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <Keypad_Get_Char+0x3cc>)
 800149a:	701a      	strb	r2, [r3, #0]
	}
	if(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin))){
 800149c:	2101      	movs	r1, #1
 800149e:	480e      	ldr	r0, [pc, #56]	@ (80014d8 <Keypad_Get_Char+0x3d0>)
 80014a0:	f001 ffea 	bl	8003478 <HAL_GPIO_ReadPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d110      	bne.n	80014cc <Keypad_Get_Char+0x3c4>
		HAL_Delay(4);
 80014aa:	2004      	movs	r0, #4
 80014ac:	f001 f972 	bl	8002794 <HAL_Delay>
		while(!(HAL_GPIO_ReadPin(C4_GPIO_Port, C4_Pin)));
 80014b0:	bf00      	nop
 80014b2:	2101      	movs	r1, #1
 80014b4:	4808      	ldr	r0, [pc, #32]	@ (80014d8 <Keypad_Get_Char+0x3d0>)
 80014b6:	f001 ffdf 	bl	8003478 <HAL_GPIO_ReadPin>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f8      	beq.n	80014b2 <Keypad_Get_Char+0x3aa>
		HAL_Delay(4);
 80014c0:	2004      	movs	r0, #4
 80014c2:	f001 f967 	bl	8002794 <HAL_Delay>
		val_key = keys[3][3];
 80014c6:	2244      	movs	r2, #68	@ 0x44
 80014c8:	4b02      	ldr	r3, [pc, #8]	@ (80014d4 <Keypad_Get_Char+0x3cc>)
 80014ca:	701a      	strb	r2, [r3, #0]
	}
	return val_key;
 80014cc:	4b01      	ldr	r3, [pc, #4]	@ (80014d4 <Keypad_Get_Char+0x3cc>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000020c 	.word	0x2000020c
 80014d8:	40020000 	.word	0x40020000

080014dc <LCD_I2C_Write_CMD>:
static void MX_ADC1_Init(void);
static void MX_I2C2_Init(void);
static void MX_UART5_Init(void);
static void MX_ADC2_Init(void);
/* USER CODE BEGIN PFP */
void LCD_I2C_Write_CMD(uint8_t data) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[4] = {
	    (data & 0xF0) | 0x04 | LCD_BACKLIGHT,
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	f023 030f 	bic.w	r3, r3, #15
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	f043 030c 	orr.w	r3, r3, #12
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
	uint8_t buf[4] = {
 80014f8:	733b      	strb	r3, [r7, #12]
	    (data & 0xF0) | 0x00 | LCD_BACKLIGHT,
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	f023 030f 	bic.w	r3, r3, #15
 8001502:	b25b      	sxtb	r3, r3
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	b25b      	sxtb	r3, r3
 800150a:	b2db      	uxtb	r3, r3
	uint8_t buf[4] = {
 800150c:	737b      	strb	r3, [r7, #13]
	    (data << 4) & 0xF0 | 0x04 | LCD_BACKLIGHT,
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	b25b      	sxtb	r3, r3
 8001514:	f043 030c 	orr.w	r3, r3, #12
 8001518:	b25b      	sxtb	r3, r3
 800151a:	b2db      	uxtb	r3, r3
	uint8_t buf[4] = {
 800151c:	73bb      	strb	r3, [r7, #14]
	    (data << 4) & 0xF0 | 0x00 | LCD_BACKLIGHT
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	b25b      	sxtb	r3, r3
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	b25b      	sxtb	r3, r3
 800152a:	b2db      	uxtb	r3, r3
	uint8_t buf[4] = {
 800152c:	73fb      	strb	r3, [r7, #15]
	  };
    HAL_I2C_Master_Transmit(&hi2c2, addr_pcf8574, buf, 4, 100);
 800152e:	f107 020c 	add.w	r2, r7, #12
 8001532:	2364      	movs	r3, #100	@ 0x64
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2304      	movs	r3, #4
 8001538:	214e      	movs	r1, #78	@ 0x4e
 800153a:	4803      	ldr	r0, [pc, #12]	@ (8001548 <LCD_I2C_Write_CMD+0x6c>)
 800153c:	f002 f912 	bl	8003764 <HAL_I2C_Master_Transmit>
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200002f8 	.word	0x200002f8

0800154c <LCD_I2C_Write_DATA>:

void LCD_I2C_Write_DATA(uint8_t data) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af02      	add	r7, sp, #8
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[4] = {
	    (data & 0xF0) | 0x05 | LCD_BACKLIGHT,
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	f023 030f 	bic.w	r3, r3, #15
 800155e:	b25b      	sxtb	r3, r3
 8001560:	f043 030d 	orr.w	r3, r3, #13
 8001564:	b25b      	sxtb	r3, r3
 8001566:	b2db      	uxtb	r3, r3
	uint8_t buf[4] = {
 8001568:	733b      	strb	r3, [r7, #12]
	    (data & 0xF0) | 0x01 | LCD_BACKLIGHT,
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	f023 030f 	bic.w	r3, r3, #15
 8001572:	b25b      	sxtb	r3, r3
 8001574:	f043 0309 	orr.w	r3, r3, #9
 8001578:	b25b      	sxtb	r3, r3
 800157a:	b2db      	uxtb	r3, r3
	uint8_t buf[4] = {
 800157c:	737b      	strb	r3, [r7, #13]
	    (data << 4) & 0xF0 | 0x05 | LCD_BACKLIGHT,
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	b25b      	sxtb	r3, r3
 8001584:	f043 030d 	orr.w	r3, r3, #13
 8001588:	b25b      	sxtb	r3, r3
 800158a:	b2db      	uxtb	r3, r3
	uint8_t buf[4] = {
 800158c:	73bb      	strb	r3, [r7, #14]
	    (data << 4) & 0xF0 | 0x01 | LCD_BACKLIGHT
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	b25b      	sxtb	r3, r3
 8001594:	f043 0309 	orr.w	r3, r3, #9
 8001598:	b25b      	sxtb	r3, r3
 800159a:	b2db      	uxtb	r3, r3
	uint8_t buf[4] = {
 800159c:	73fb      	strb	r3, [r7, #15]
	  };
    HAL_I2C_Master_Transmit(&hi2c2, addr_pcf8574, buf, 4, 100);
 800159e:	f107 020c 	add.w	r2, r7, #12
 80015a2:	2364      	movs	r3, #100	@ 0x64
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2304      	movs	r3, #4
 80015a8:	214e      	movs	r1, #78	@ 0x4e
 80015aa:	4803      	ldr	r0, [pc, #12]	@ (80015b8 <LCD_I2C_Write_DATA+0x6c>)
 80015ac:	f002 f8da 	bl	8003764 <HAL_I2C_Master_Transmit>
}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200002f8 	.word	0x200002f8

080015bc <LCD_I2C_Init>:


void LCD_I2C_Init(){
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	LCD_I2C_Write_CMD(0x33);
 80015c0:	2033      	movs	r0, #51	@ 0x33
 80015c2:	f7ff ff8b 	bl	80014dc <LCD_I2C_Write_CMD>
	LCD_I2C_Write_CMD(0x32);
 80015c6:	2032      	movs	r0, #50	@ 0x32
 80015c8:	f7ff ff88 	bl	80014dc <LCD_I2C_Write_CMD>
	LCD_I2C_Write_CMD(0x28);
 80015cc:	2028      	movs	r0, #40	@ 0x28
 80015ce:	f7ff ff85 	bl	80014dc <LCD_I2C_Write_CMD>
	LCD_I2C_Write_CMD(0x0C);
 80015d2:	200c      	movs	r0, #12
 80015d4:	f7ff ff82 	bl	80014dc <LCD_I2C_Write_CMD>
	LCD_I2C_Write_CMD(0x06);
 80015d8:	2006      	movs	r0, #6
 80015da:	f7ff ff7f 	bl	80014dc <LCD_I2C_Write_CMD>
	LCD_I2C_Write_CMD(0x01);
 80015de:	2001      	movs	r0, #1
 80015e0:	f7ff ff7c 	bl	80014dc <LCD_I2C_Write_CMD>
	HAL_Delay(2);
 80015e4:	2002      	movs	r0, #2
 80015e6:	f001 f8d5 	bl	8002794 <HAL_Delay>
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}

080015ee <LCD_I2C_Clean>:

void LCD_I2C_Clean(){
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
	LCD_I2C_Write_CMD(0x01);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff ff72 	bl	80014dc <LCD_I2C_Write_CMD>
	HAL_Delay(2);
 80015f8:	2002      	movs	r0, #2
 80015fa:	f001 f8cb 	bl	8002794 <HAL_Delay>
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}

08001602 <LCD_I2C_Location>:

void LCD_I2C_Location(uint8_t x, uint8_t y){
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	460a      	mov	r2, r1
 800160c:	71fb      	strb	r3, [r7, #7]
 800160e:	4613      	mov	r3, r2
 8001610:	71bb      	strb	r3, [r7, #6]
	if (x==0){
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d106      	bne.n	8001626 <LCD_I2C_Location+0x24>
		LCD_I2C_Write_CMD(0x80+y);
 8001618:	79bb      	ldrb	r3, [r7, #6]
 800161a:	3b80      	subs	r3, #128	@ 0x80
 800161c:	b2db      	uxtb	r3, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff5c 	bl	80014dc <LCD_I2C_Write_CMD>
	} else if (x==1){
		LCD_I2C_Write_CMD(0xC0+y);
	}
}
 8001624:	e008      	b.n	8001638 <LCD_I2C_Location+0x36>
	} else if (x==1){
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <LCD_I2C_Location+0x36>
		LCD_I2C_Write_CMD(0xC0+y);
 800162c:	79bb      	ldrb	r3, [r7, #6]
 800162e:	3b40      	subs	r3, #64	@ 0x40
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff52 	bl	80014dc <LCD_I2C_Write_CMD>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <LCD_I2C_Write_String>:

void LCD_I2C_Write_String (char* string){
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i<strlen(string); i++){
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	e009      	b.n	8001662 <LCD_I2C_Write_String+0x22>
		LCD_I2C_Write_DATA(string[i]);
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff78 	bl	800154c <LCD_I2C_Write_DATA>
	for (uint8_t i=0; i<strlen(string); i++){
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	3301      	adds	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	7bfc      	ldrb	r4, [r7, #15]
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7fe fe03 	bl	8000270 <strlen>
 800166a:	4603      	mov	r3, r0
 800166c:	429c      	cmp	r4, r3
 800166e:	d3ee      	bcc.n	800164e <LCD_I2C_Write_String+0xe>
	}
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bd90      	pop	{r4, r7, pc}
 800167a:	0000      	movs	r0, r0
 800167c:	0000      	movs	r0, r0
	...

08001680 <calculate_ppm>:
void LCD_I2C_Write_Number (int number){
	char buffer[8];
	sprintf(buffer, "%d", number);
	LCD_I2C_Write_String(buffer);
}
float calculate_ppm(float Rs) {
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	ed87 0a01 	vstr	s0, [r7, #4]
    float m = -0.45;
 800168a:	4b31      	ldr	r3, [pc, #196]	@ (8001750 <calculate_ppm+0xd0>)
 800168c:	61fb      	str	r3, [r7, #28]
    float b = 1.27;
 800168e:	4b31      	ldr	r3, [pc, #196]	@ (8001754 <calculate_ppm+0xd4>)
 8001690:	61bb      	str	r3, [r7, #24]

    float ratio = Rs / Ro;
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe ff58 	bl	8000548 <__aeabi_f2d>
 8001698:	a329      	add	r3, pc, #164	@ (adr r3, 8001740 <calculate_ppm+0xc0>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7ff f8d5 	bl	800084c <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff fa7d 	bl	8000ba8 <__aeabi_d2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	617b      	str	r3, [r7, #20]
    float ppm_log = (log10(ratio) - b) / m;
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7fe ff48 	bl	8000548 <__aeabi_f2d>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	ec43 2b10 	vmov	d0, r2, r3
 80016c0:	f007 f8fa 	bl	80088b8 <log10>
 80016c4:	ec55 4b10 	vmov	r4, r5, d0
 80016c8:	69b8      	ldr	r0, [r7, #24]
 80016ca:	f7fe ff3d 	bl	8000548 <__aeabi_f2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4620      	mov	r0, r4
 80016d4:	4629      	mov	r1, r5
 80016d6:	f7fe fdd7 	bl	8000288 <__aeabi_dsub>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4614      	mov	r4, r2
 80016e0:	461d      	mov	r5, r3
 80016e2:	69f8      	ldr	r0, [r7, #28]
 80016e4:	f7fe ff30 	bl	8000548 <__aeabi_f2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4620      	mov	r0, r4
 80016ee:	4629      	mov	r1, r5
 80016f0:	f7ff f8ac 	bl	800084c <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff fa54 	bl	8000ba8 <__aeabi_d2f>
 8001700:	4603      	mov	r3, r0
 8001702:	613b      	str	r3, [r7, #16]
    float ppm = pow(10, ppm_log);
 8001704:	6938      	ldr	r0, [r7, #16]
 8001706:	f7fe ff1f 	bl	8000548 <__aeabi_f2d>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	ec43 2b11 	vmov	d1, r2, r3
 8001712:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 8001748 <calculate_ppm+0xc8>
 8001716:	f007 f90d 	bl	8008934 <pow>
 800171a:	ec53 2b10 	vmov	r2, r3, d0
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff fa41 	bl	8000ba8 <__aeabi_d2f>
 8001726:	4603      	mov	r3, r0
 8001728:	60fb      	str	r3, [r7, #12]

    return ppm;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	ee07 3a90 	vmov	s15, r3
}
 8001730:	eeb0 0a67 	vmov.f32	s0, s15
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bdb0      	pop	{r4, r5, r7, pc}
 800173a:	bf00      	nop
 800173c:	f3af 8000 	nop.w
 8001740:	66666666 	.word	0x66666666
 8001744:	40026666 	.word	0x40026666
 8001748:	00000000 	.word	0x00000000
 800174c:	40240000 	.word	0x40240000
 8001750:	bee66666 	.word	0xbee66666
 8001754:	3fa28f5c 	.word	0x3fa28f5c

08001758 <calculate_rs>:

float calculate_rs(uint32_t adc_value) {
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    float Vout = (adc_value / 4096.0) * Vc;
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7fe fecf 	bl	8000504 <__aeabi_ui2d>
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <calculate_rs+0x88>)
 800176c:	f7ff f86e 	bl	800084c <__aeabi_ddiv>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <calculate_rs+0x8c>)
 800177e:	f7fe ff3b 	bl	80005f8 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff fa0d 	bl	8000ba8 <__aeabi_d2f>
 800178e:	4603      	mov	r3, r0
 8001790:	60fb      	str	r3, [r7, #12]
    float Rs = ((Vc - Vout) / Vout) * RL;
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f7fe fed8 	bl	8000548 <__aeabi_f2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	f04f 0000 	mov.w	r0, #0
 80017a0:	4910      	ldr	r1, [pc, #64]	@ (80017e4 <calculate_rs+0x8c>)
 80017a2:	f7fe fd71 	bl	8000288 <__aeabi_dsub>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4614      	mov	r4, r2
 80017ac:	461d      	mov	r5, r3
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7fe feca 	bl	8000548 <__aeabi_f2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4620      	mov	r0, r4
 80017ba:	4629      	mov	r1, r5
 80017bc:	f7ff f846 	bl	800084c <__aeabi_ddiv>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	f7ff f9ee 	bl	8000ba8 <__aeabi_d2f>
 80017cc:	4603      	mov	r3, r0
 80017ce:	60bb      	str	r3, [r7, #8]
    return Rs;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	ee07 3a90 	vmov	s15, r3
}
 80017d6:	eeb0 0a67 	vmov.f32	s0, s15
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bdb0      	pop	{r4, r5, r7, pc}
 80017e0:	40b00000 	.word	0x40b00000
 80017e4:	40140000 	.word	0x40140000

080017e8 <checkPassword>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char password[6] = "56B89C";
	char inputPassword[6];

	int checkPassword(){
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
		int i;
		for (int i = 0; i < 6; i++){
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	e00e      	b.n	8001812 <checkPassword+0x2a>
			if(inputPassword[i]!=password[i]){
 80017f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001828 <checkPassword+0x40>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	490b      	ldr	r1, [pc, #44]	@ (800182c <checkPassword+0x44>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	440b      	add	r3, r1
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <checkPassword+0x24>
				return 0;
 8001808:	2300      	movs	r3, #0
 800180a:	e006      	b.n	800181a <checkPassword+0x32>
		for (int i = 0; i < 6; i++){
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3301      	adds	r3, #1
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b05      	cmp	r3, #5
 8001816:	dded      	ble.n	80017f4 <checkPassword+0xc>
			}
		}
		return 1;
 8001818:	2301      	movs	r3, #1
	}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200003dc 	.word	0x200003dc
 800182c:	20000004 	.word	0x20000004

08001830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b0b2      	sub	sp, #200	@ 0xc8
 8001834:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001836:	f000 ff3b 	bl	80026b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800183a:	f000 f9a5 	bl	8001b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183e:	f000 fbab 	bl	8001f98 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001842:	f000 faad 	bl	8001da0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001846:	f000 fb07 	bl	8001e58 <MX_TIM2_Init>
  MX_ADC1_Init();
 800184a:	f000 fa05 	bl	8001c58 <MX_ADC1_Init>
  MX_I2C2_Init();
 800184e:	f000 fad5 	bl	8001dfc <MX_I2C2_Init>
  MX_UART5_Init();
 8001852:	f000 fb77 	bl	8001f44 <MX_UART5_Init>
  MX_ADC2_Init();
 8001856:	f000 fa51 	bl	8001cfc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800185a:	f7ff fc03 	bl	8001064 <lcd_init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800185e:	2100      	movs	r1, #0
 8001860:	48b1      	ldr	r0, [pc, #708]	@ (8001b28 <main+0x2f8>)
 8001862:	f002 ffd9 	bl	8004818 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */
  LCD_I2C_Init();
 8001866:	f7ff fea9 	bl	80015bc <LCD_I2C_Init>
  lastSensorReadTime = HAL_GetTick();
 800186a:	f000 ff87 	bl	800277c <HAL_GetTick>
 800186e:	4603      	mov	r3, r0
 8001870:	4aae      	ldr	r2, [pc, #696]	@ (8001b2c <main+0x2fc>)
 8001872:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
          {
              lcd_put_cur(0, 0);
 8001874:	2100      	movs	r1, #0
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff fbd5 	bl	8001026 <lcd_put_cur>
              lcd_send_string("Enter Password");
 800187c:	48ac      	ldr	r0, [pc, #688]	@ (8001b30 <main+0x300>)
 800187e:	f7ff fc2e 	bl	80010de <lcd_send_string>

              char key = Keypad_Get_Char();
 8001882:	f7ff fc41 	bl	8001108 <Keypad_Get_Char>
 8001886:	4603      	mov	r3, r0
 8001888:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
              if (key != 0) {
 800188c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001890:	2b00      	cmp	r3, #0
 8001892:	d06f      	beq.n	8001974 <main+0x144>
                  lcd_put_cur(1, 0);
 8001894:	2100      	movs	r1, #0
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff fbc5 	bl	8001026 <lcd_put_cur>
                  lcd_send_string("Key: ");
 800189c:	48a5      	ldr	r0, [pc, #660]	@ (8001b34 <main+0x304>)
 800189e:	f7ff fc1e 	bl	80010de <lcd_send_string>
                  lcd_put_cur(1, 5);
 80018a2:	2105      	movs	r1, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	f7ff fbbe 	bl	8001026 <lcd_put_cur>
                  lcd_send_string(&key);
 80018aa:	f107 039b 	add.w	r3, r7, #155	@ 0x9b
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fc15 	bl	80010de <lcd_send_string>

                  if (key == '#') {
 80018b4:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80018b8:	2b23      	cmp	r3, #35	@ 0x23
 80018ba:	d149      	bne.n	8001950 <main+0x120>
                      if (checkPassword()) {
 80018bc:	f7ff ff94 	bl	80017e8 <checkPassword>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d028      	beq.n	8001918 <main+0xe8>
                      	HAL_UART_Transmit(&huart5, (uint8_t*)"CORRECT\n", 8, HAL_MAX_DELAY);
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	2208      	movs	r2, #8
 80018cc:	499a      	ldr	r1, [pc, #616]	@ (8001b38 <main+0x308>)
 80018ce:	489b      	ldr	r0, [pc, #620]	@ (8001b3c <main+0x30c>)
 80018d0:	f003 fddc 	bl	800548c <HAL_UART_Transmit>
                          lcd_clear();
 80018d4:	f7ff fb90 	bl	8000ff8 <lcd_clear>
                          lcd_put_cur(0, 0);
 80018d8:	2100      	movs	r1, #0
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff fba3 	bl	8001026 <lcd_put_cur>
                          lcd_send_string("Correct");
 80018e0:	4897      	ldr	r0, [pc, #604]	@ (8001b40 <main+0x310>)
 80018e2:	f7ff fbfc 	bl	80010de <lcd_send_string>
                          htim2.Instance->CCR1 = 15;
 80018e6:	4b90      	ldr	r3, [pc, #576]	@ (8001b28 <main+0x2f8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	220f      	movs	r2, #15
 80018ec:	635a      	str	r2, [r3, #52]	@ 0x34
                          HAL_Delay(1500);
 80018ee:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80018f2:	f000 ff4f 	bl	8002794 <HAL_Delay>
                          htim2.Instance->CCR1 = 70;
 80018f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001b28 <main+0x2f8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2246      	movs	r2, #70	@ 0x46
 80018fc:	635a      	str	r2, [r3, #52]	@ 0x34
                          HAL_Delay(1500);
 80018fe:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001902:	f000 ff47 	bl	8002794 <HAL_Delay>
                          htim2.Instance->CCR1 = 130;
 8001906:	4b88      	ldr	r3, [pc, #544]	@ (8001b28 <main+0x2f8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2282      	movs	r2, #130	@ 0x82
 800190c:	635a      	str	r2, [r3, #52]	@ 0x34
                          HAL_Delay(1500);
 800190e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001912:	f000 ff3f 	bl	8002794 <HAL_Delay>
 8001916:	e00f      	b.n	8001938 <main+0x108>
                      } else {
                      	HAL_UART_Transmit(&huart5, (uint8_t*)"INCORRECT\n", 10, HAL_MAX_DELAY);
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	220a      	movs	r2, #10
 800191e:	4989      	ldr	r1, [pc, #548]	@ (8001b44 <main+0x314>)
 8001920:	4886      	ldr	r0, [pc, #536]	@ (8001b3c <main+0x30c>)
 8001922:	f003 fdb3 	bl	800548c <HAL_UART_Transmit>
                          lcd_clear();
 8001926:	f7ff fb67 	bl	8000ff8 <lcd_clear>
                          lcd_put_cur(0, 0);
 800192a:	2100      	movs	r1, #0
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff fb7a 	bl	8001026 <lcd_put_cur>
                          lcd_send_string("Incorrect");
 8001932:	4885      	ldr	r0, [pc, #532]	@ (8001b48 <main+0x318>)
 8001934:	f7ff fbd3 	bl	80010de <lcd_send_string>
                      }
                      HAL_Delay(1000);
 8001938:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800193c:	f000 ff2a 	bl	8002794 <HAL_Delay>
                      lcd_clear();
 8001940:	f7ff fb5a 	bl	8000ff8 <lcd_clear>
                      memset(inputPassword, 0, 6);
 8001944:	2206      	movs	r2, #6
 8001946:	2100      	movs	r1, #0
 8001948:	4880      	ldr	r0, [pc, #512]	@ (8001b4c <main+0x31c>)
 800194a:	f004 feec 	bl	8006726 <memset>
 800194e:	e011      	b.n	8001974 <main+0x144>
                  } else {
                      int len = strlen(inputPassword);
 8001950:	487e      	ldr	r0, [pc, #504]	@ (8001b4c <main+0x31c>)
 8001952:	f7fe fc8d 	bl	8000270 <strlen>
 8001956:	4603      	mov	r3, r0
 8001958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
                      if (len < 6) {
 800195c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001960:	2b05      	cmp	r3, #5
 8001962:	dc07      	bgt.n	8001974 <main+0x144>
                          inputPassword[len] = key;
 8001964:	f897 109b 	ldrb.w	r1, [r7, #155]	@ 0x9b
 8001968:	4a78      	ldr	r2, [pc, #480]	@ (8001b4c <main+0x31c>)
 800196a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800196e:	4413      	add	r3, r2
 8001970:	460a      	mov	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]
                      }
                  }
              }

              uint32_t currentTime = HAL_GetTick();
 8001974:	f000 ff02 	bl	800277c <HAL_GetTick>
 8001978:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
              if (currentTime - lastSensorReadTime >= sensorReadInterval) {
 800197c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b2c <main+0x2fc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001984:	1ad2      	subs	r2, r2, r3
 8001986:	4b72      	ldr	r3, [pc, #456]	@ (8001b50 <main+0x320>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	f0c0 80c8 	bcc.w	8001b20 <main+0x2f0>
                  lastSensorReadTime = currentTime;
 8001990:	4a66      	ldr	r2, [pc, #408]	@ (8001b2c <main+0x2fc>)
 8001992:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001996:	6013      	str	r3, [r2, #0]

                  HAL_ADC_Start(&hadc1);
 8001998:	486e      	ldr	r0, [pc, #440]	@ (8001b54 <main+0x324>)
 800199a:	f000 ff63 	bl	8002864 <HAL_ADC_Start>
                  HAL_ADC_PollForConversion(&hadc1, 1000);
 800199e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019a2:	486c      	ldr	r0, [pc, #432]	@ (8001b54 <main+0x324>)
 80019a4:	f001 f830 	bl	8002a08 <HAL_ADC_PollForConversion>
                  uint32_t gasValue = HAL_ADC_GetValue(&hadc1);
 80019a8:	486a      	ldr	r0, [pc, #424]	@ (8001b54 <main+0x324>)
 80019aa:	f001 f8b8 	bl	8002b1e <HAL_ADC_GetValue>
 80019ae:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                  float Rs = calculate_rs(gasValue);
 80019b2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80019b6:	f7ff fecf 	bl	8001758 <calculate_rs>
 80019ba:	ed87 0a2a 	vstr	s0, [r7, #168]	@ 0xa8
                  float ppm = calculate_ppm(Rs);
 80019be:	ed97 0a2a 	vldr	s0, [r7, #168]	@ 0xa8
 80019c2:	f7ff fe5d 	bl	8001680 <calculate_ppm>
 80019c6:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4

                  HAL_ADC_Start(&hadc2);
 80019ca:	4863      	ldr	r0, [pc, #396]	@ (8001b58 <main+0x328>)
 80019cc:	f000 ff4a 	bl	8002864 <HAL_ADC_Start>
                  HAL_ADC_PollForConversion(&hadc2, 1000);
 80019d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019d4:	4860      	ldr	r0, [pc, #384]	@ (8001b58 <main+0x328>)
 80019d6:	f001 f817 	bl	8002a08 <HAL_ADC_PollForConversion>
                  value = HAL_ADC_GetValue(&hadc2);
 80019da:	485f      	ldr	r0, [pc, #380]	@ (8001b58 <main+0x328>)
 80019dc:	f001 f89f 	bl	8002b1e <HAL_ADC_GetValue>
 80019e0:	ee07 0a90 	vmov	s15, r0
 80019e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e8:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
                  t = (value / 4096.0) * 3.0 * 100.0;
 80019ec:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80019f0:	f7fe fdaa 	bl	8000548 <__aeabi_f2d>
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	4b58      	ldr	r3, [pc, #352]	@ (8001b5c <main+0x32c>)
 80019fa:	f7fe ff27 	bl	800084c <__aeabi_ddiv>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b55      	ldr	r3, [pc, #340]	@ (8001b60 <main+0x330>)
 8001a0c:	f7fe fdf4 	bl	80005f8 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	4b51      	ldr	r3, [pc, #324]	@ (8001b64 <main+0x334>)
 8001a1e:	f7fe fdeb 	bl	80005f8 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f7ff f8bd 	bl	8000ba8 <__aeabi_d2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                  t = t - 7.0;
 8001a34:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001a38:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8001a3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a40:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
                  char gasString[50];
                  snprintf(gasString, sizeof(gasString), "%.2f", ppm);
 8001a44:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001a48:	f7fe fd7e 	bl	8000548 <__aeabi_f2d>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4638      	mov	r0, r7
 8001a52:	e9cd 2300 	strd	r2, r3, [sp]
 8001a56:	4a44      	ldr	r2, [pc, #272]	@ (8001b68 <main+0x338>)
 8001a58:	2132      	movs	r1, #50	@ 0x32
 8001a5a:	f004 fded 	bl	8006638 <sniprintf>
                  LCD_I2C_Clean();
 8001a5e:	f7ff fdc6 	bl	80015ee <LCD_I2C_Clean>
                  LCD_I2C_Location(0, 0);
 8001a62:	2100      	movs	r1, #0
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff fdcc 	bl	8001602 <LCD_I2C_Location>
                  LCD_I2C_Write_String("gas:");
 8001a6a:	4840      	ldr	r0, [pc, #256]	@ (8001b6c <main+0x33c>)
 8001a6c:	f7ff fde8 	bl	8001640 <LCD_I2C_Write_String>
                  LCD_I2C_Write_String(gasString);
 8001a70:	463b      	mov	r3, r7
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fde4 	bl	8001640 <LCD_I2C_Write_String>
                  LCD_I2C_Write_String("ppm");
 8001a78:	483d      	ldr	r0, [pc, #244]	@ (8001b70 <main+0x340>)
 8001a7a:	f7ff fde1 	bl	8001640 <LCD_I2C_Write_String>

                  char tString[50];
                  snprintf(tString, sizeof(tString), "%.2f", t);
 8001a7e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001a82:	f7fe fd61 	bl	8000548 <__aeabi_f2d>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001a8e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a92:	4a35      	ldr	r2, [pc, #212]	@ (8001b68 <main+0x338>)
 8001a94:	2132      	movs	r1, #50	@ 0x32
 8001a96:	f004 fdcf 	bl	8006638 <sniprintf>
                  LCD_I2C_Location(1, 0);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7ff fdb0 	bl	8001602 <LCD_I2C_Location>
                  LCD_I2C_Write_String("nhiet do:");
 8001aa2:	4834      	ldr	r0, [pc, #208]	@ (8001b74 <main+0x344>)
 8001aa4:	f7ff fdcc 	bl	8001640 <LCD_I2C_Write_String>
                  LCD_I2C_Write_String(tString);
 8001aa8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fdc7 	bl	8001640 <LCD_I2C_Write_String>
                  LCD_I2C_Write_String("oC");
 8001ab2:	4831      	ldr	r0, [pc, #196]	@ (8001b78 <main+0x348>)
 8001ab4:	f7ff fdc4 	bl	8001640 <LCD_I2C_Write_String>

                  if (ppm > 100) {
 8001ab8:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001abc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001b7c <main+0x34c>
 8001ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac8:	dd06      	ble.n	8001ad8 <main+0x2a8>
                      LCD_I2C_Location(0, 12);
 8001aca:	210c      	movs	r1, #12
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fd98 	bl	8001602 <LCD_I2C_Location>
                      LCD_I2C_Write_String(" !!!");
 8001ad2:	482b      	ldr	r0, [pc, #172]	@ (8001b80 <main+0x350>)
 8001ad4:	f7ff fdb4 	bl	8001640 <LCD_I2C_Write_String>
                  }


                  char uartBuffer[50];
                  snprintf(uartBuffer, sizeof(uartBuffer), "%.2f;%.2f\n", ppm, t);
 8001ad8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001adc:	f7fe fd34 	bl	8000548 <__aeabi_f2d>
 8001ae0:	4604      	mov	r4, r0
 8001ae2:	460d      	mov	r5, r1
 8001ae4:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001ae8:	f7fe fd2e 	bl	8000548 <__aeabi_f2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001af4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001af8:	e9cd 4500 	strd	r4, r5, [sp]
 8001afc:	4a21      	ldr	r2, [pc, #132]	@ (8001b84 <main+0x354>)
 8001afe:	2132      	movs	r1, #50	@ 0x32
 8001b00:	f004 fd9a 	bl	8006638 <sniprintf>
                  HAL_UART_Transmit(&huart5, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001b04:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fbb1 	bl	8000270 <strlen>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	4808      	ldr	r0, [pc, #32]	@ (8001b3c <main+0x30c>)
 8001b1c:	f003 fcb6 	bl	800548c <HAL_UART_Transmit>
              }

              HAL_Delay(10);
 8001b20:	200a      	movs	r0, #10
 8001b22:	f000 fe37 	bl	8002794 <HAL_Delay>
          {
 8001b26:	e6a5      	b.n	8001874 <main+0x44>
 8001b28:	2000034c 	.word	0x2000034c
 8001b2c:	20000210 	.word	0x20000210
 8001b30:	08009cac 	.word	0x08009cac
 8001b34:	08009cbc 	.word	0x08009cbc
 8001b38:	08009cc4 	.word	0x08009cc4
 8001b3c:	20000394 	.word	0x20000394
 8001b40:	08009cd0 	.word	0x08009cd0
 8001b44:	08009cd8 	.word	0x08009cd8
 8001b48:	08009ce4 	.word	0x08009ce4
 8001b4c:	200003dc 	.word	0x200003dc
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000214 	.word	0x20000214
 8001b58:	2000025c 	.word	0x2000025c
 8001b5c:	40b00000 	.word	0x40b00000
 8001b60:	40080000 	.word	0x40080000
 8001b64:	40590000 	.word	0x40590000
 8001b68:	08009cf0 	.word	0x08009cf0
 8001b6c:	08009cf8 	.word	0x08009cf8
 8001b70:	08009d00 	.word	0x08009d00
 8001b74:	08009d04 	.word	0x08009d04
 8001b78:	08009d10 	.word	0x08009d10
 8001b7c:	42c80000 	.word	0x42c80000
 8001b80:	08009d14 	.word	0x08009d14
 8001b84:	08009d1c 	.word	0x08009d1c

08001b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b094      	sub	sp, #80	@ 0x50
 8001b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8e:	f107 0320 	add.w	r3, r7, #32
 8001b92:	2230      	movs	r2, #48	@ 0x30
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f004 fdc5 	bl	8006726 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	4b27      	ldr	r3, [pc, #156]	@ (8001c50 <SystemClock_Config+0xc8>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	4a26      	ldr	r2, [pc, #152]	@ (8001c50 <SystemClock_Config+0xc8>)
 8001bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bbc:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <SystemClock_Config+0xc8>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <SystemClock_Config+0xcc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a20      	ldr	r2, [pc, #128]	@ (8001c54 <SystemClock_Config+0xcc>)
 8001bd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <SystemClock_Config+0xcc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be4:	2302      	movs	r3, #2
 8001be6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be8:	2301      	movs	r3, #1
 8001bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bec:	2310      	movs	r3, #16
 8001bee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001bfc:	2348      	movs	r3, #72	@ 0x48
 8001bfe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c00:	2302      	movs	r3, #2
 8001c02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c04:	2304      	movs	r3, #4
 8001c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c08:	f107 0320 	add.w	r3, r7, #32
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 f903 	bl	8003e18 <HAL_RCC_OscConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c18:	f000 fa38 	bl	800208c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1c:	230f      	movs	r3, #15
 8001c1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c20:	2302      	movs	r3, #2
 8001c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	2102      	movs	r1, #2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 fb65 	bl	8004308 <HAL_RCC_ClockConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c44:	f000 fa22 	bl	800208c <Error_Handler>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3750      	adds	r7, #80	@ 0x50
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000

08001c58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5e:	463b      	mov	r3, r7
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c6a:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001c6c:	4a21      	ldr	r2, [pc, #132]	@ (8001cf4 <MX_ADC1_Init+0x9c>)
 8001c6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c76:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c82:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c88:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c90:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c96:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001c98:	4a17      	ldr	r2, [pc, #92]	@ (8001cf8 <MX_ADC1_Init+0xa0>)
 8001c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c9c:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ca2:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cb6:	480e      	ldr	r0, [pc, #56]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001cb8:	f000 fd90 	bl	80027dc <HAL_ADC_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001cc2:	f000 f9e3 	bl	800208c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001cce:	2306      	movs	r3, #6
 8001cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4806      	ldr	r0, [pc, #24]	@ (8001cf0 <MX_ADC1_Init+0x98>)
 8001cd8:	f000 ff2e 	bl	8002b38 <HAL_ADC_ConfigChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ce2:	f000 f9d3 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000214 	.word	0x20000214
 8001cf4:	40012000 	.word	0x40012000
 8001cf8:	0f000001 	.word	0x0f000001

08001cfc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d02:	463b      	mov	r3, r7
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001d0e:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d10:	4a21      	ldr	r2, [pc, #132]	@ (8001d98 <MX_ADC2_Init+0x9c>)
 8001d12:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001d20:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d26:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d34:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d3a:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d3c:	4a17      	ldr	r2, [pc, #92]	@ (8001d9c <MX_ADC2_Init+0xa0>)
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d40:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001d46:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d5a:	480e      	ldr	r0, [pc, #56]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d5c:	f000 fd3e 	bl	80027dc <HAL_ADC_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001d66:	f000 f991 	bl	800208c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001d6a:	2309      	movs	r3, #9
 8001d6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001d72:	2306      	movs	r3, #6
 8001d74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d76:	463b      	mov	r3, r7
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4806      	ldr	r0, [pc, #24]	@ (8001d94 <MX_ADC2_Init+0x98>)
 8001d7c:	f000 fedc 	bl	8002b38 <HAL_ADC_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001d86:	f000 f981 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000025c 	.word	0x2000025c
 8001d98:	40012100 	.word	0x40012100
 8001d9c:	0f000001 	.word	0x0f000001

08001da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001da6:	4a13      	ldr	r2, [pc, #76]	@ (8001df4 <MX_I2C1_Init+0x54>)
 8001da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001daa:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dac:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <MX_I2C1_Init+0x58>)
 8001dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dca:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dd0:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ddc:	4804      	ldr	r0, [pc, #16]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dde:	f001 fb7d 	bl	80034dc <HAL_I2C_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001de8:	f000 f950 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200002a4 	.word	0x200002a4
 8001df4:	40005400 	.word	0x40005400
 8001df8:	000186a0 	.word	0x000186a0

08001dfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e00:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <MX_I2C2_Init+0x50>)
 8001e02:	4a13      	ldr	r2, [pc, #76]	@ (8001e50 <MX_I2C2_Init+0x54>)
 8001e04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e06:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <MX_I2C2_Init+0x50>)
 8001e08:	4a12      	ldr	r2, [pc, #72]	@ (8001e54 <MX_I2C2_Init+0x58>)
 8001e0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <MX_I2C2_Init+0x50>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <MX_I2C2_Init+0x50>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <MX_I2C2_Init+0x50>)
 8001e1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <MX_I2C2_Init+0x50>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <MX_I2C2_Init+0x50>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <MX_I2C2_Init+0x50>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <MX_I2C2_Init+0x50>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	@ (8001e4c <MX_I2C2_Init+0x50>)
 8001e3a:	f001 fb4f 	bl	80034dc <HAL_I2C_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e44:	f000 f922 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200002f8 	.word	0x200002f8
 8001e50:	40005800 	.word	0x40005800
 8001e54:	000186a0 	.word	0x000186a0

08001e58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08e      	sub	sp, #56	@ 0x38
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6c:	f107 0320 	add.w	r3, r7, #32
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
 8001e84:	615a      	str	r2, [r3, #20]
 8001e86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e88:	4b2d      	ldr	r3, [pc, #180]	@ (8001f40 <MX_TIM2_Init+0xe8>)
 8001e8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000-1;
 8001e90:	4b2b      	ldr	r3, [pc, #172]	@ (8001f40 <MX_TIM2_Init+0xe8>)
 8001e92:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b29      	ldr	r3, [pc, #164]	@ (8001f40 <MX_TIM2_Init+0xe8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001e9e:	4b28      	ldr	r3, [pc, #160]	@ (8001f40 <MX_TIM2_Init+0xe8>)
 8001ea0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <MX_TIM2_Init+0xe8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <MX_TIM2_Init+0xe8>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eb2:	4823      	ldr	r0, [pc, #140]	@ (8001f40 <MX_TIM2_Init+0xe8>)
 8001eb4:	f002 fc08 	bl	80046c8 <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ebe:	f000 f8e5 	bl	800208c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ec8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	481c      	ldr	r0, [pc, #112]	@ (8001f40 <MX_TIM2_Init+0xe8>)
 8001ed0:	f002 fe2c 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001eda:	f000 f8d7 	bl	800208c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ede:	4818      	ldr	r0, [pc, #96]	@ (8001f40 <MX_TIM2_Init+0xe8>)
 8001ee0:	f002 fc41 	bl	8004766 <HAL_TIM_PWM_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001eea:	f000 f8cf 	bl	800208c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	4619      	mov	r1, r3
 8001efc:	4810      	ldr	r0, [pc, #64]	@ (8001f40 <MX_TIM2_Init+0xe8>)
 8001efe:	f003 f9f9 	bl	80052f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001f08:	f000 f8c0 	bl	800208c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0c:	2360      	movs	r3, #96	@ 0x60
 8001f0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4619      	mov	r1, r3
 8001f22:	4807      	ldr	r0, [pc, #28]	@ (8001f40 <MX_TIM2_Init+0xe8>)
 8001f24:	f002 fd40 	bl	80049a8 <HAL_TIM_PWM_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001f2e:	f000 f8ad 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f32:	4803      	ldr	r0, [pc, #12]	@ (8001f40 <MX_TIM2_Init+0xe8>)
 8001f34:	f000 f9ea 	bl	800230c <HAL_TIM_MspPostInit>

}
 8001f38:	bf00      	nop
 8001f3a:	3738      	adds	r7, #56	@ 0x38
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2000034c 	.word	0x2000034c

08001f44 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f48:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <MX_UART5_Init+0x4c>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	@ (8001f94 <MX_UART5_Init+0x50>)
 8001f4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001f4e:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <MX_UART5_Init+0x4c>)
 8001f50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <MX_UART5_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <MX_UART5_Init+0x4c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f62:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <MX_UART5_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <MX_UART5_Init+0x4c>)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6e:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <MX_UART5_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f74:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <MX_UART5_Init+0x4c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f7a:	4805      	ldr	r0, [pc, #20]	@ (8001f90 <MX_UART5_Init+0x4c>)
 8001f7c:	f003 fa36 	bl	80053ec <HAL_UART_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001f86:	f000 f881 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000394 	.word	0x20000394
 8001f94:	40005000 	.word	0x40005000

08001f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	@ 0x28
 8001f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b34      	ldr	r3, [pc, #208]	@ (8002084 <MX_GPIO_Init+0xec>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	4a33      	ldr	r2, [pc, #204]	@ (8002084 <MX_GPIO_Init+0xec>)
 8001fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbe:	4b31      	ldr	r3, [pc, #196]	@ (8002084 <MX_GPIO_Init+0xec>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <MX_GPIO_Init+0xec>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8002084 <MX_GPIO_Init+0xec>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <MX_GPIO_Init+0xec>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	4b26      	ldr	r3, [pc, #152]	@ (8002084 <MX_GPIO_Init+0xec>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a25      	ldr	r2, [pc, #148]	@ (8002084 <MX_GPIO_Init+0xec>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b23      	ldr	r3, [pc, #140]	@ (8002084 <MX_GPIO_Init+0xec>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	4b1f      	ldr	r3, [pc, #124]	@ (8002084 <MX_GPIO_Init+0xec>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a1e      	ldr	r2, [pc, #120]	@ (8002084 <MX_GPIO_Init+0xec>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b1c      	ldr	r3, [pc, #112]	@ (8002084 <MX_GPIO_Init+0xec>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	4b18      	ldr	r3, [pc, #96]	@ (8002084 <MX_GPIO_Init+0xec>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a17      	ldr	r2, [pc, #92]	@ (8002084 <MX_GPIO_Init+0xec>)
 8002028:	f043 0308 	orr.w	r3, r3, #8
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <MX_GPIO_Init+0xec>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R3_Pin|R2_Pin|R1_Pin, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8002040:	4811      	ldr	r0, [pc, #68]	@ (8002088 <MX_GPIO_Init+0xf0>)
 8002042:	f001 fa31 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C2_Pin|C1_Pin;
 8002046:	2333      	movs	r3, #51	@ 0x33
 8002048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800204e:	2301      	movs	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	480b      	ldr	r0, [pc, #44]	@ (8002088 <MX_GPIO_Init+0xf0>)
 800205a:	f001 f871 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin R3_Pin R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|R2_Pin|R1_Pin;
 800205e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4619      	mov	r1, r3
 8002076:	4804      	ldr	r0, [pc, #16]	@ (8002088 <MX_GPIO_Init+0xf0>)
 8002078:	f001 f862 	bl	8003140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800207c:	bf00      	nop
 800207e:	3728      	adds	r7, #40	@ 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	40020000 	.word	0x40020000

0800208c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002090:	b672      	cpsid	i
}
 8002092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <Error_Handler+0x8>

08002098 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	4a0f      	ldr	r2, [pc, #60]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ae:	4b0d      	ldr	r3, [pc, #52]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	4a08      	ldr	r2, [pc, #32]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800

080020e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08c      	sub	sp, #48	@ 0x30
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2e      	ldr	r2, [pc, #184]	@ (80021c0 <HAL_ADC_MspInit+0xd8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d128      	bne.n	800215c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	4b2d      	ldr	r3, [pc, #180]	@ (80021c4 <HAL_ADC_MspInit+0xdc>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	4a2c      	ldr	r2, [pc, #176]	@ (80021c4 <HAL_ADC_MspInit+0xdc>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002118:	6453      	str	r3, [r2, #68]	@ 0x44
 800211a:	4b2a      	ldr	r3, [pc, #168]	@ (80021c4 <HAL_ADC_MspInit+0xdc>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	4b26      	ldr	r3, [pc, #152]	@ (80021c4 <HAL_ADC_MspInit+0xdc>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a25      	ldr	r2, [pc, #148]	@ (80021c4 <HAL_ADC_MspInit+0xdc>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b23      	ldr	r3, [pc, #140]	@ (80021c4 <HAL_ADC_MspInit+0xdc>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002142:	2308      	movs	r3, #8
 8002144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002146:	2303      	movs	r3, #3
 8002148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	4619      	mov	r1, r3
 8002154:	481c      	ldr	r0, [pc, #112]	@ (80021c8 <HAL_ADC_MspInit+0xe0>)
 8002156:	f000 fff3 	bl	8003140 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800215a:	e02c      	b.n	80021b6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1a      	ldr	r2, [pc, #104]	@ (80021cc <HAL_ADC_MspInit+0xe4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d127      	bne.n	80021b6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <HAL_ADC_MspInit+0xdc>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	4a15      	ldr	r2, [pc, #84]	@ (80021c4 <HAL_ADC_MspInit+0xdc>)
 8002170:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002174:	6453      	str	r3, [r2, #68]	@ 0x44
 8002176:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <HAL_ADC_MspInit+0xdc>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <HAL_ADC_MspInit+0xdc>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a0e      	ldr	r2, [pc, #56]	@ (80021c4 <HAL_ADC_MspInit+0xdc>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <HAL_ADC_MspInit+0xdc>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800219e:	2302      	movs	r3, #2
 80021a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a2:	2303      	movs	r3, #3
 80021a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021aa:	f107 031c 	add.w	r3, r7, #28
 80021ae:	4619      	mov	r1, r3
 80021b0:	4807      	ldr	r0, [pc, #28]	@ (80021d0 <HAL_ADC_MspInit+0xe8>)
 80021b2:	f000 ffc5 	bl	8003140 <HAL_GPIO_Init>
}
 80021b6:	bf00      	nop
 80021b8:	3730      	adds	r7, #48	@ 0x30
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40012000 	.word	0x40012000
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40012100 	.word	0x40012100
 80021d0:	40020400 	.word	0x40020400

080021d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08c      	sub	sp, #48	@ 0x30
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a32      	ldr	r2, [pc, #200]	@ (80022bc <HAL_I2C_MspInit+0xe8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d12c      	bne.n	8002250 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	4b31      	ldr	r3, [pc, #196]	@ (80022c0 <HAL_I2C_MspInit+0xec>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a30      	ldr	r2, [pc, #192]	@ (80022c0 <HAL_I2C_MspInit+0xec>)
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b2e      	ldr	r3, [pc, #184]	@ (80022c0 <HAL_I2C_MspInit+0xec>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002212:	23c0      	movs	r3, #192	@ 0xc0
 8002214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002216:	2312      	movs	r3, #18
 8002218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002222:	2304      	movs	r3, #4
 8002224:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002226:	f107 031c 	add.w	r3, r7, #28
 800222a:	4619      	mov	r1, r3
 800222c:	4825      	ldr	r0, [pc, #148]	@ (80022c4 <HAL_I2C_MspInit+0xf0>)
 800222e:	f000 ff87 	bl	8003140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	4b22      	ldr	r3, [pc, #136]	@ (80022c0 <HAL_I2C_MspInit+0xec>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	4a21      	ldr	r2, [pc, #132]	@ (80022c0 <HAL_I2C_MspInit+0xec>)
 800223c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002240:	6413      	str	r3, [r2, #64]	@ 0x40
 8002242:	4b1f      	ldr	r3, [pc, #124]	@ (80022c0 <HAL_I2C_MspInit+0xec>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800224e:	e031      	b.n	80022b4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1c      	ldr	r2, [pc, #112]	@ (80022c8 <HAL_I2C_MspInit+0xf4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d12c      	bne.n	80022b4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b18      	ldr	r3, [pc, #96]	@ (80022c0 <HAL_I2C_MspInit+0xec>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a17      	ldr	r2, [pc, #92]	@ (80022c0 <HAL_I2C_MspInit+0xec>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <HAL_I2C_MspInit+0xec>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002276:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800227a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800227c:	2312      	movs	r3, #18
 800227e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002288:	2304      	movs	r3, #4
 800228a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	4619      	mov	r1, r3
 8002292:	480c      	ldr	r0, [pc, #48]	@ (80022c4 <HAL_I2C_MspInit+0xf0>)
 8002294:	f000 ff54 	bl	8003140 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <HAL_I2C_MspInit+0xec>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a0:	4a07      	ldr	r2, [pc, #28]	@ (80022c0 <HAL_I2C_MspInit+0xec>)
 80022a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <HAL_I2C_MspInit+0xec>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3730      	adds	r7, #48	@ 0x30
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40005400 	.word	0x40005400
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40005800 	.word	0x40005800

080022cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022dc:	d10d      	bne.n	80022fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <HAL_TIM_Base_MspInit+0x3c>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	4a08      	ldr	r2, [pc, #32]	@ (8002308 <HAL_TIM_Base_MspInit+0x3c>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_TIM_Base_MspInit+0x3c>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800232c:	d11e      	bne.n	800236c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <HAL_TIM_MspPostInit+0x68>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	4a0f      	ldr	r2, [pc, #60]	@ (8002374 <HAL_TIM_MspPostInit+0x68>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6313      	str	r3, [r2, #48]	@ 0x30
 800233e:	4b0d      	ldr	r3, [pc, #52]	@ (8002374 <HAL_TIM_MspPostInit+0x68>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800234a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800234e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800235c:	2301      	movs	r3, #1
 800235e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	4619      	mov	r1, r3
 8002366:	4804      	ldr	r0, [pc, #16]	@ (8002378 <HAL_TIM_MspPostInit+0x6c>)
 8002368:	f000 feea 	bl	8003140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800236c:	bf00      	nop
 800236e:	3720      	adds	r7, #32
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800
 8002378:	40020000 	.word	0x40020000

0800237c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	@ 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a28      	ldr	r2, [pc, #160]	@ (800243c <HAL_UART_MspInit+0xc0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d14a      	bne.n	8002434 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	4b27      	ldr	r3, [pc, #156]	@ (8002440 <HAL_UART_MspInit+0xc4>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	4a26      	ldr	r2, [pc, #152]	@ (8002440 <HAL_UART_MspInit+0xc4>)
 80023a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ae:	4b24      	ldr	r3, [pc, #144]	@ (8002440 <HAL_UART_MspInit+0xc4>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <HAL_UART_MspInit+0xc4>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002440 <HAL_UART_MspInit+0xc4>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002440 <HAL_UART_MspInit+0xc4>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <HAL_UART_MspInit+0xc4>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	4a18      	ldr	r2, [pc, #96]	@ (8002440 <HAL_UART_MspInit+0xc4>)
 80023e0:	f043 0308 	orr.w	r3, r3, #8
 80023e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e6:	4b16      	ldr	r3, [pc, #88]	@ (8002440 <HAL_UART_MspInit+0xc4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002400:	2303      	movs	r3, #3
 8002402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002404:	2308      	movs	r3, #8
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	4619      	mov	r1, r3
 800240e:	480d      	ldr	r0, [pc, #52]	@ (8002444 <HAL_UART_MspInit+0xc8>)
 8002410:	f000 fe96 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002414:	2304      	movs	r3, #4
 8002416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002424:	2308      	movs	r3, #8
 8002426:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	4806      	ldr	r0, [pc, #24]	@ (8002448 <HAL_UART_MspInit+0xcc>)
 8002430:	f000 fe86 	bl	8003140 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002434:	bf00      	nop
 8002436:	3728      	adds	r7, #40	@ 0x28
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40005000 	.word	0x40005000
 8002440:	40023800 	.word	0x40023800
 8002444:	40020800 	.word	0x40020800
 8002448:	40020c00 	.word	0x40020c00

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <NMI_Handler+0x4>

08002454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <MemManage_Handler+0x4>

08002464 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <BusFault_Handler+0x4>

0800246c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <UsageFault_Handler+0x4>

08002474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a2:	f000 f957 	bl	8002754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  return 1;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_kill>:

int _kill(int pid, int sig)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024c4:	f004 f982 	bl	80067cc <__errno>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2216      	movs	r2, #22
 80024cc:	601a      	str	r2, [r3, #0]
  return -1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_exit>:

void _exit (int status)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024e2:	f04f 31ff 	mov.w	r1, #4294967295
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffe7 	bl	80024ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <_exit+0x12>

080024f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e00a      	b.n	8002518 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002502:	f3af 8000 	nop.w
 8002506:	4601      	mov	r1, r0
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	60ba      	str	r2, [r7, #8]
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	dbf0      	blt.n	8002502 <_read+0x12>
  }

  return len;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	e009      	b.n	8002550 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60ba      	str	r2, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	dbf1      	blt.n	800253c <_write+0x12>
  }
  return len;
 8002558:	687b      	ldr	r3, [r7, #4]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_close>:

int _close(int file)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800258a:	605a      	str	r2, [r3, #4]
  return 0;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_isatty>:

int _isatty(int file)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d4:	4a14      	ldr	r2, [pc, #80]	@ (8002628 <_sbrk+0x5c>)
 80025d6:	4b15      	ldr	r3, [pc, #84]	@ (800262c <_sbrk+0x60>)
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e0:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <_sbrk+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e8:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <_sbrk+0x64>)
 80025ea:	4a12      	ldr	r2, [pc, #72]	@ (8002634 <_sbrk+0x68>)
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d207      	bcs.n	800260c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025fc:	f004 f8e6 	bl	80067cc <__errno>
 8002600:	4603      	mov	r3, r0
 8002602:	220c      	movs	r2, #12
 8002604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	e009      	b.n	8002620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800260c:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <_sbrk+0x64>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002612:	4b07      	ldr	r3, [pc, #28]	@ (8002630 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	4a05      	ldr	r2, [pc, #20]	@ (8002630 <_sbrk+0x64>)
 800261c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20020000 	.word	0x20020000
 800262c:	00000400 	.word	0x00000400
 8002630:	200003e4 	.word	0x200003e4
 8002634:	20000538 	.word	0x20000538

08002638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800263c:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <SystemInit+0x20>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002642:	4a05      	ldr	r2, [pc, #20]	@ (8002658 <SystemInit+0x20>)
 8002644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800265c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002694 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002660:	f7ff ffea 	bl	8002638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002664:	480c      	ldr	r0, [pc, #48]	@ (8002698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002666:	490d      	ldr	r1, [pc, #52]	@ (800269c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002668:	4a0d      	ldr	r2, [pc, #52]	@ (80026a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800266c:	e002      	b.n	8002674 <LoopCopyDataInit>

0800266e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800266e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002672:	3304      	adds	r3, #4

08002674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002678:	d3f9      	bcc.n	800266e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267a:	4a0a      	ldr	r2, [pc, #40]	@ (80026a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800267c:	4c0a      	ldr	r4, [pc, #40]	@ (80026a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002680:	e001      	b.n	8002686 <LoopFillZerobss>

08002682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002684:	3204      	adds	r2, #4

08002686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002688:	d3fb      	bcc.n	8002682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800268a:	f004 f8a5 	bl	80067d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800268e:	f7ff f8cf 	bl	8001830 <main>
  bx  lr    
 8002692:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800269c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80026a0:	0800a0f0 	.word	0x0800a0f0
  ldr r2, =_sbss
 80026a4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80026a8:	20000538 	.word	0x20000538

080026ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026ac:	e7fe      	b.n	80026ac <ADC_IRQHandler>
	...

080026b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026b4:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <HAL_Init+0x40>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <HAL_Init+0x40>)
 80026ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_Init+0x40>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <HAL_Init+0x40>)
 80026c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026cc:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <HAL_Init+0x40>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a07      	ldr	r2, [pc, #28]	@ (80026f0 <HAL_Init+0x40>)
 80026d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d8:	2003      	movs	r0, #3
 80026da:	f000 fcfd 	bl	80030d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026de:	200f      	movs	r0, #15
 80026e0:	f000 f808 	bl	80026f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e4:	f7ff fcd8 	bl	8002098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023c00 	.word	0x40023c00

080026f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026fc:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <HAL_InitTick+0x54>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b12      	ldr	r3, [pc, #72]	@ (800274c <HAL_InitTick+0x58>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800270a:	fbb3 f3f1 	udiv	r3, r3, r1
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fd07 	bl	8003126 <HAL_SYSTICK_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e00e      	b.n	8002740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b0f      	cmp	r3, #15
 8002726:	d80a      	bhi.n	800273e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002728:	2200      	movs	r2, #0
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	f000 fcdd 	bl	80030ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002734:	4a06      	ldr	r2, [pc, #24]	@ (8002750 <HAL_InitTick+0x5c>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	2000000c 	.word	0x2000000c
 800274c:	20000014 	.word	0x20000014
 8002750:	20000010 	.word	0x20000010

08002754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <HAL_IncTick+0x20>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <HAL_IncTick+0x24>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4413      	add	r3, r2
 8002764:	4a04      	ldr	r2, [pc, #16]	@ (8002778 <HAL_IncTick+0x24>)
 8002766:	6013      	str	r3, [r2, #0]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20000014 	.word	0x20000014
 8002778:	200003e8 	.word	0x200003e8

0800277c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return uwTick;
 8002780:	4b03      	ldr	r3, [pc, #12]	@ (8002790 <HAL_GetTick+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	200003e8 	.word	0x200003e8

08002794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800279c:	f7ff ffee 	bl	800277c <HAL_GetTick>
 80027a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d005      	beq.n	80027ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ae:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <HAL_Delay+0x44>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ba:	bf00      	nop
 80027bc:	f7ff ffde 	bl	800277c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d8f7      	bhi.n	80027bc <HAL_Delay+0x28>
  {
  }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000014 	.word	0x20000014

080027dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e033      	b.n	800285a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff fc74 	bl	80020e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b00      	cmp	r3, #0
 8002818:	d118      	bne.n	800284c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002822:	f023 0302 	bic.w	r3, r3, #2
 8002826:	f043 0202 	orr.w	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 faa4 	bl	8002d7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	641a      	str	r2, [r3, #64]	@ 0x40
 800284a:	e001      	b.n	8002850 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_ADC_Start+0x1a>
 800287a:	2302      	movs	r3, #2
 800287c:	e0b2      	b.n	80029e4 <HAL_ADC_Start+0x180>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d018      	beq.n	80028c6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028a4:	4b52      	ldr	r3, [pc, #328]	@ (80029f0 <HAL_ADC_Start+0x18c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a52      	ldr	r2, [pc, #328]	@ (80029f4 <HAL_ADC_Start+0x190>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0c9a      	lsrs	r2, r3, #18
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80028b8:	e002      	b.n	80028c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	3b01      	subs	r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f9      	bne.n	80028ba <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d17a      	bne.n	80029ca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800290e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002912:	d106      	bne.n	8002922 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002918:	f023 0206 	bic.w	r2, r3, #6
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002920:	e002      	b.n	8002928 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002930:	4b31      	ldr	r3, [pc, #196]	@ (80029f8 <HAL_ADC_Start+0x194>)
 8002932:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800293c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	2b00      	cmp	r3, #0
 8002948:	d12a      	bne.n	80029a0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2b      	ldr	r2, [pc, #172]	@ (80029fc <HAL_ADC_Start+0x198>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d015      	beq.n	8002980 <HAL_ADC_Start+0x11c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a29      	ldr	r2, [pc, #164]	@ (8002a00 <HAL_ADC_Start+0x19c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d105      	bne.n	800296a <HAL_ADC_Start+0x106>
 800295e:	4b26      	ldr	r3, [pc, #152]	@ (80029f8 <HAL_ADC_Start+0x194>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a25      	ldr	r2, [pc, #148]	@ (8002a04 <HAL_ADC_Start+0x1a0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d136      	bne.n	80029e2 <HAL_ADC_Start+0x17e>
 8002974:	4b20      	ldr	r3, [pc, #128]	@ (80029f8 <HAL_ADC_Start+0x194>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b00      	cmp	r3, #0
 800297e:	d130      	bne.n	80029e2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d129      	bne.n	80029e2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	e020      	b.n	80029e2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a15      	ldr	r2, [pc, #84]	@ (80029fc <HAL_ADC_Start+0x198>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d11b      	bne.n	80029e2 <HAL_ADC_Start+0x17e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d114      	bne.n	80029e2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	e00b      	b.n	80029e2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f043 0210 	orr.w	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	2000000c 	.word	0x2000000c
 80029f4:	431bde83 	.word	0x431bde83
 80029f8:	40012300 	.word	0x40012300
 80029fc:	40012000 	.word	0x40012000
 8002a00:	40012100 	.word	0x40012100
 8002a04:	40012200 	.word	0x40012200

08002a08 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a24:	d113      	bne.n	8002a4e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a34:	d10b      	bne.n	8002a4e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	f043 0220 	orr.w	r2, r3, #32
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e063      	b.n	8002b16 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a4e:	f7ff fe95 	bl	800277c <HAL_GetTick>
 8002a52:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a54:	e021      	b.n	8002a9a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d01d      	beq.n	8002a9a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <HAL_ADC_PollForConversion+0x6c>
 8002a64:	f7ff fe8a 	bl	800277c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d212      	bcs.n	8002a9a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d00b      	beq.n	8002a9a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	f043 0204 	orr.w	r2, r3, #4
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e03d      	b.n	8002b16 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d1d6      	bne.n	8002a56 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0212 	mvn.w	r2, #18
 8002ab0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d123      	bne.n	8002b14 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d11f      	bne.n	8002b14 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d111      	bne.n	8002b14 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x1c>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e105      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x228>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b09      	cmp	r3, #9
 8002b62:	d925      	bls.n	8002bb0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68d9      	ldr	r1, [r3, #12]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	3b1e      	subs	r3, #30
 8002b7a:	2207      	movs	r2, #7
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43da      	mvns	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	400a      	ands	r2, r1
 8002b88:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68d9      	ldr	r1, [r3, #12]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4403      	add	r3, r0
 8002ba2:	3b1e      	subs	r3, #30
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	e022      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6919      	ldr	r1, [r3, #16]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6919      	ldr	r1, [r3, #16]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	4618      	mov	r0, r3
 8002be6:	4603      	mov	r3, r0
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	4403      	add	r3, r0
 8002bec:	409a      	lsls	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d824      	bhi.n	8002c48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3b05      	subs	r3, #5
 8002c10:	221f      	movs	r2, #31
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	3b05      	subs	r3, #5
 8002c3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c46:	e04c      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	d824      	bhi.n	8002c9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	3b23      	subs	r3, #35	@ 0x23
 8002c62:	221f      	movs	r2, #31
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43da      	mvns	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	400a      	ands	r2, r1
 8002c70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	4618      	mov	r0, r3
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	3b23      	subs	r3, #35	@ 0x23
 8002c8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c98:	e023      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	3b41      	subs	r3, #65	@ 0x41
 8002cac:	221f      	movs	r2, #31
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	400a      	ands	r2, r1
 8002cba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	4618      	mov	r0, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3b41      	subs	r3, #65	@ 0x41
 8002cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ce2:	4b22      	ldr	r3, [pc, #136]	@ (8002d6c <HAL_ADC_ConfigChannel+0x234>)
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a21      	ldr	r2, [pc, #132]	@ (8002d70 <HAL_ADC_ConfigChannel+0x238>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d109      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x1cc>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b12      	cmp	r3, #18
 8002cf6:	d105      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a19      	ldr	r2, [pc, #100]	@ (8002d70 <HAL_ADC_ConfigChannel+0x238>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d123      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x21e>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d003      	beq.n	8002d1e <HAL_ADC_ConfigChannel+0x1e6>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b11      	cmp	r3, #17
 8002d1c:	d11b      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d111      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d32:	4b10      	ldr	r3, [pc, #64]	@ (8002d74 <HAL_ADC_ConfigChannel+0x23c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a10      	ldr	r2, [pc, #64]	@ (8002d78 <HAL_ADC_ConfigChannel+0x240>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	0c9a      	lsrs	r2, r3, #18
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d48:	e002      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f9      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	40012300 	.word	0x40012300
 8002d70:	40012000 	.word	0x40012000
 8002d74:	2000000c 	.word	0x2000000c
 8002d78:	431bde83 	.word	0x431bde83

08002d7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d84:	4b79      	ldr	r3, [pc, #484]	@ (8002f6c <ADC_Init+0x1f0>)
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002db0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	021a      	lsls	r2, r3, #8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002dd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6899      	ldr	r1, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0e:	4a58      	ldr	r2, [pc, #352]	@ (8002f70 <ADC_Init+0x1f4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d022      	beq.n	8002e5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6899      	ldr	r1, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6899      	ldr	r1, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	e00f      	b.n	8002e7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e78:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0202 	bic.w	r2, r2, #2
 8002e88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6899      	ldr	r1, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	7e1b      	ldrb	r3, [r3, #24]
 8002e94:	005a      	lsls	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01b      	beq.n	8002ee0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eb6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ec6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6859      	ldr	r1, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	035a      	lsls	r2, r3, #13
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	e007      	b.n	8002ef0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	051a      	lsls	r2, r3, #20
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6899      	ldr	r1, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f32:	025a      	lsls	r2, r3, #9
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6899      	ldr	r1, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	029a      	lsls	r2, r3, #10
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40012300 	.word	0x40012300
 8002f70:	0f000001 	.word	0x0f000001

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6039      	str	r1, [r7, #0]
 8002fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	db0a      	blt.n	8003002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	490c      	ldr	r1, [pc, #48]	@ (8003024 <__NVIC_SetPriority+0x4c>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	0112      	lsls	r2, r2, #4
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003000:	e00a      	b.n	8003018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4908      	ldr	r1, [pc, #32]	@ (8003028 <__NVIC_SetPriority+0x50>)
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	3b04      	subs	r3, #4
 8003010:	0112      	lsls	r2, r2, #4
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	440b      	add	r3, r1
 8003016:	761a      	strb	r2, [r3, #24]
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000e100 	.word	0xe000e100
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	@ 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f1c3 0307 	rsb	r3, r3, #7
 8003046:	2b04      	cmp	r3, #4
 8003048:	bf28      	it	cs
 800304a:	2304      	movcs	r3, #4
 800304c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3304      	adds	r3, #4
 8003052:	2b06      	cmp	r3, #6
 8003054:	d902      	bls.n	800305c <NVIC_EncodePriority+0x30>
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3b03      	subs	r3, #3
 800305a:	e000      	b.n	800305e <NVIC_EncodePriority+0x32>
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003060:	f04f 32ff 	mov.w	r2, #4294967295
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	401a      	ands	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003074:	f04f 31ff 	mov.w	r1, #4294967295
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	43d9      	mvns	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	4313      	orrs	r3, r2
         );
}
 8003086:	4618      	mov	r0, r3
 8003088:	3724      	adds	r7, #36	@ 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030a4:	d301      	bcc.n	80030aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00f      	b.n	80030ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030aa:	4a0a      	ldr	r2, [pc, #40]	@ (80030d4 <SysTick_Config+0x40>)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030b2:	210f      	movs	r1, #15
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	f7ff ff8e 	bl	8002fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030bc:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <SysTick_Config+0x40>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030c2:	4b04      	ldr	r3, [pc, #16]	@ (80030d4 <SysTick_Config+0x40>)
 80030c4:	2207      	movs	r2, #7
 80030c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	e000e010 	.word	0xe000e010

080030d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ff47 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003100:	f7ff ff5c 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 8003104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	6978      	ldr	r0, [r7, #20]
 800310c:	f7ff ff8e 	bl	800302c <NVIC_EncodePriority>
 8003110:	4602      	mov	r2, r0
 8003112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff5d 	bl	8002fd8 <__NVIC_SetPriority>
}
 800311e:	bf00      	nop
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ffb0 	bl	8003094 <SysTick_Config>
 8003134:	4603      	mov	r3, r0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	@ 0x24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	e16b      	b.n	8003434 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800315c:	2201      	movs	r2, #1
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	429a      	cmp	r2, r3
 8003176:	f040 815a 	bne.w	800342e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d005      	beq.n	8003192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800318e:	2b02      	cmp	r3, #2
 8003190:	d130      	bne.n	80031f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c8:	2201      	movs	r2, #1
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 0201 	and.w	r2, r3, #1
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d017      	beq.n	8003230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d123      	bne.n	8003284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	08da      	lsrs	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3208      	adds	r2, #8
 8003244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	220f      	movs	r2, #15
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	08da      	lsrs	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3208      	adds	r2, #8
 800327e:	69b9      	ldr	r1, [r7, #24]
 8003280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	2203      	movs	r2, #3
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 0203 	and.w	r2, r3, #3
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80b4 	beq.w	800342e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	4b60      	ldr	r3, [pc, #384]	@ (800344c <HAL_GPIO_Init+0x30c>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	4a5f      	ldr	r2, [pc, #380]	@ (800344c <HAL_GPIO_Init+0x30c>)
 80032d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032d6:	4b5d      	ldr	r3, [pc, #372]	@ (800344c <HAL_GPIO_Init+0x30c>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003450 <HAL_GPIO_Init+0x310>)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	3302      	adds	r3, #2
 80032ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	220f      	movs	r2, #15
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a52      	ldr	r2, [pc, #328]	@ (8003454 <HAL_GPIO_Init+0x314>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d02b      	beq.n	8003366 <HAL_GPIO_Init+0x226>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a51      	ldr	r2, [pc, #324]	@ (8003458 <HAL_GPIO_Init+0x318>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d025      	beq.n	8003362 <HAL_GPIO_Init+0x222>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a50      	ldr	r2, [pc, #320]	@ (800345c <HAL_GPIO_Init+0x31c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01f      	beq.n	800335e <HAL_GPIO_Init+0x21e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a4f      	ldr	r2, [pc, #316]	@ (8003460 <HAL_GPIO_Init+0x320>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d019      	beq.n	800335a <HAL_GPIO_Init+0x21a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a4e      	ldr	r2, [pc, #312]	@ (8003464 <HAL_GPIO_Init+0x324>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_GPIO_Init+0x216>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a4d      	ldr	r2, [pc, #308]	@ (8003468 <HAL_GPIO_Init+0x328>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00d      	beq.n	8003352 <HAL_GPIO_Init+0x212>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4c      	ldr	r2, [pc, #304]	@ (800346c <HAL_GPIO_Init+0x32c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <HAL_GPIO_Init+0x20e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4b      	ldr	r2, [pc, #300]	@ (8003470 <HAL_GPIO_Init+0x330>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d101      	bne.n	800334a <HAL_GPIO_Init+0x20a>
 8003346:	2307      	movs	r3, #7
 8003348:	e00e      	b.n	8003368 <HAL_GPIO_Init+0x228>
 800334a:	2308      	movs	r3, #8
 800334c:	e00c      	b.n	8003368 <HAL_GPIO_Init+0x228>
 800334e:	2306      	movs	r3, #6
 8003350:	e00a      	b.n	8003368 <HAL_GPIO_Init+0x228>
 8003352:	2305      	movs	r3, #5
 8003354:	e008      	b.n	8003368 <HAL_GPIO_Init+0x228>
 8003356:	2304      	movs	r3, #4
 8003358:	e006      	b.n	8003368 <HAL_GPIO_Init+0x228>
 800335a:	2303      	movs	r3, #3
 800335c:	e004      	b.n	8003368 <HAL_GPIO_Init+0x228>
 800335e:	2302      	movs	r3, #2
 8003360:	e002      	b.n	8003368 <HAL_GPIO_Init+0x228>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_GPIO_Init+0x228>
 8003366:	2300      	movs	r3, #0
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	f002 0203 	and.w	r2, r2, #3
 800336e:	0092      	lsls	r2, r2, #2
 8003370:	4093      	lsls	r3, r2
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003378:	4935      	ldr	r1, [pc, #212]	@ (8003450 <HAL_GPIO_Init+0x310>)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	3302      	adds	r3, #2
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003386:	4b3b      	ldr	r3, [pc, #236]	@ (8003474 <HAL_GPIO_Init+0x334>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	43db      	mvns	r3, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4013      	ands	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033aa:	4a32      	ldr	r2, [pc, #200]	@ (8003474 <HAL_GPIO_Init+0x334>)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033b0:	4b30      	ldr	r3, [pc, #192]	@ (8003474 <HAL_GPIO_Init+0x334>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033d4:	4a27      	ldr	r2, [pc, #156]	@ (8003474 <HAL_GPIO_Init+0x334>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033da:	4b26      	ldr	r3, [pc, #152]	@ (8003474 <HAL_GPIO_Init+0x334>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003474 <HAL_GPIO_Init+0x334>)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003404:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <HAL_GPIO_Init+0x334>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003428:	4a12      	ldr	r2, [pc, #72]	@ (8003474 <HAL_GPIO_Init+0x334>)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3301      	adds	r3, #1
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b0f      	cmp	r3, #15
 8003438:	f67f ae90 	bls.w	800315c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	3724      	adds	r7, #36	@ 0x24
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800
 8003450:	40013800 	.word	0x40013800
 8003454:	40020000 	.word	0x40020000
 8003458:	40020400 	.word	0x40020400
 800345c:	40020800 	.word	0x40020800
 8003460:	40020c00 	.word	0x40020c00
 8003464:	40021000 	.word	0x40021000
 8003468:	40021400 	.word	0x40021400
 800346c:	40021800 	.word	0x40021800
 8003470:	40021c00 	.word	0x40021c00
 8003474:	40013c00 	.word	0x40013c00

08003478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	887b      	ldrh	r3, [r7, #2]
 800348a:	4013      	ands	r3, r2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	e001      	b.n	800349a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
 80034b4:	4613      	mov	r3, r2
 80034b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034b8:	787b      	ldrb	r3, [r7, #1]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034be:	887a      	ldrh	r2, [r7, #2]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034c4:	e003      	b.n	80034ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034c6:	887b      	ldrh	r3, [r7, #2]
 80034c8:	041a      	lsls	r2, r3, #16
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	619a      	str	r2, [r3, #24]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e12b      	b.n	8003746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fe fe66 	bl	80021d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	@ 0x24
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800352e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800353e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003540:	f001 f89a 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 8003544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4a81      	ldr	r2, [pc, #516]	@ (8003750 <HAL_I2C_Init+0x274>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d807      	bhi.n	8003560 <HAL_I2C_Init+0x84>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4a80      	ldr	r2, [pc, #512]	@ (8003754 <HAL_I2C_Init+0x278>)
 8003554:	4293      	cmp	r3, r2
 8003556:	bf94      	ite	ls
 8003558:	2301      	movls	r3, #1
 800355a:	2300      	movhi	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	e006      	b.n	800356e <HAL_I2C_Init+0x92>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a7d      	ldr	r2, [pc, #500]	@ (8003758 <HAL_I2C_Init+0x27c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	bf94      	ite	ls
 8003568:	2301      	movls	r3, #1
 800356a:	2300      	movhi	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0e7      	b.n	8003746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4a78      	ldr	r2, [pc, #480]	@ (800375c <HAL_I2C_Init+0x280>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	0c9b      	lsrs	r3, r3, #18
 8003580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003750 <HAL_I2C_Init+0x274>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d802      	bhi.n	80035b0 <HAL_I2C_Init+0xd4>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	3301      	adds	r3, #1
 80035ae:	e009      	b.n	80035c4 <HAL_I2C_Init+0xe8>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	4a69      	ldr	r2, [pc, #420]	@ (8003760 <HAL_I2C_Init+0x284>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	3301      	adds	r3, #1
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	495c      	ldr	r1, [pc, #368]	@ (8003750 <HAL_I2C_Init+0x274>)
 80035e0:	428b      	cmp	r3, r1
 80035e2:	d819      	bhi.n	8003618 <HAL_I2C_Init+0x13c>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1e59      	subs	r1, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80035f2:	1c59      	adds	r1, r3, #1
 80035f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035f8:	400b      	ands	r3, r1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_I2C_Init+0x138>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1e59      	subs	r1, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fbb1 f3f3 	udiv	r3, r1, r3
 800360c:	3301      	adds	r3, #1
 800360e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003612:	e051      	b.n	80036b8 <HAL_I2C_Init+0x1dc>
 8003614:	2304      	movs	r3, #4
 8003616:	e04f      	b.n	80036b8 <HAL_I2C_Init+0x1dc>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d111      	bne.n	8003644 <HAL_I2C_Init+0x168>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e58      	subs	r0, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	440b      	add	r3, r1
 800362e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003632:	3301      	adds	r3, #1
 8003634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e012      	b.n	800366a <HAL_I2C_Init+0x18e>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1e58      	subs	r0, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	0099      	lsls	r1, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	fbb0 f3f3 	udiv	r3, r0, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_Init+0x196>
 800366e:	2301      	movs	r3, #1
 8003670:	e022      	b.n	80036b8 <HAL_I2C_Init+0x1dc>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10e      	bne.n	8003698 <HAL_I2C_Init+0x1bc>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1e58      	subs	r0, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6859      	ldr	r1, [r3, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	440b      	add	r3, r1
 8003688:	fbb0 f3f3 	udiv	r3, r0, r3
 800368c:	3301      	adds	r3, #1
 800368e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003696:	e00f      	b.n	80036b8 <HAL_I2C_Init+0x1dc>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1e58      	subs	r0, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	0099      	lsls	r1, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ae:	3301      	adds	r3, #1
 80036b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	6809      	ldr	r1, [r1, #0]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69da      	ldr	r2, [r3, #28]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6911      	ldr	r1, [r2, #16]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68d2      	ldr	r2, [r2, #12]
 80036f2:	4311      	orrs	r1, r2
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	430b      	orrs	r3, r1
 80036fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	000186a0 	.word	0x000186a0
 8003754:	001e847f 	.word	0x001e847f
 8003758:	003d08ff 	.word	0x003d08ff
 800375c:	431bde83 	.word	0x431bde83
 8003760:	10624dd3 	.word	0x10624dd3

08003764 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	461a      	mov	r2, r3
 8003770:	460b      	mov	r3, r1
 8003772:	817b      	strh	r3, [r7, #10]
 8003774:	4613      	mov	r3, r2
 8003776:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003778:	f7ff f800 	bl	800277c <HAL_GetTick>
 800377c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b20      	cmp	r3, #32
 8003788:	f040 80e0 	bne.w	800394c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	2319      	movs	r3, #25
 8003792:	2201      	movs	r2, #1
 8003794:	4970      	ldr	r1, [pc, #448]	@ (8003958 <HAL_I2C_Master_Transmit+0x1f4>)
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f964 	bl	8003a64 <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
 80037a4:	e0d3      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_I2C_Master_Transmit+0x50>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e0cc      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ea>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d007      	beq.n	80037da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0201 	orr.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2221      	movs	r2, #33	@ 0x21
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2210      	movs	r2, #16
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	893a      	ldrh	r2, [r7, #8]
 800380a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4a50      	ldr	r2, [pc, #320]	@ (800395c <HAL_I2C_Master_Transmit+0x1f8>)
 800381a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800381c:	8979      	ldrh	r1, [r7, #10]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	6a3a      	ldr	r2, [r7, #32]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f89c 	bl	8003960 <I2C_MasterRequestWrite>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e08d      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003848:	e066      	b.n	8003918 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	6a39      	ldr	r1, [r7, #32]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 fa22 	bl	8003c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00d      	beq.n	8003876 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	2b04      	cmp	r3, #4
 8003860:	d107      	bne.n	8003872 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003870:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e06b      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	781a      	ldrb	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d11b      	bne.n	80038ec <HAL_I2C_Master_Transmit+0x188>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d017      	beq.n	80038ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	6a39      	ldr	r1, [r7, #32]
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fa19 	bl	8003d28 <I2C_WaitOnBTFFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00d      	beq.n	8003918 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	2b04      	cmp	r3, #4
 8003902:	d107      	bne.n	8003914 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003912:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e01a      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391c:	2b00      	cmp	r3, #0
 800391e:	d194      	bne.n	800384a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800392e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	e000      	b.n	800394e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	00100002 	.word	0x00100002
 800395c:	ffff0000 	.word	0xffff0000

08003960 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	460b      	mov	r3, r1
 800396e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d006      	beq.n	800398a <I2C_MasterRequestWrite+0x2a>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d003      	beq.n	800398a <I2C_MasterRequestWrite+0x2a>
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003988:	d108      	bne.n	800399c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e00b      	b.n	80039b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a0:	2b12      	cmp	r3, #18
 80039a2:	d107      	bne.n	80039b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f84f 	bl	8003a64 <I2C_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00d      	beq.n	80039e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039da:	d103      	bne.n	80039e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e035      	b.n	8003a54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039f0:	d108      	bne.n	8003a04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039f2:	897b      	ldrh	r3, [r7, #10]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a00:	611a      	str	r2, [r3, #16]
 8003a02:	e01b      	b.n	8003a3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a04:	897b      	ldrh	r3, [r7, #10]
 8003a06:	11db      	asrs	r3, r3, #7
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	f003 0306 	and.w	r3, r3, #6
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f063 030f 	orn	r3, r3, #15
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	490e      	ldr	r1, [pc, #56]	@ (8003a5c <I2C_MasterRequestWrite+0xfc>)
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f898 	bl	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e010      	b.n	8003a54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a32:	897b      	ldrh	r3, [r7, #10]
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4907      	ldr	r1, [pc, #28]	@ (8003a60 <I2C_MasterRequestWrite+0x100>)
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f888 	bl	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	00010008 	.word	0x00010008
 8003a60:	00010002 	.word	0x00010002

08003a64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a74:	e048      	b.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d044      	beq.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7e:	f7fe fe7d 	bl	800277c <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d302      	bcc.n	8003a94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d139      	bne.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	0c1b      	lsrs	r3, r3, #16
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d10d      	bne.n	8003aba <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	43da      	mvns	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	e00c      	b.n	8003ad4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	43da      	mvns	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d116      	bne.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e023      	b.n	8003b50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d10d      	bne.n	8003b2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	43da      	mvns	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	e00c      	b.n	8003b48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	43da      	mvns	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d093      	beq.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b66:	e071      	b.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b76:	d123      	bne.n	8003bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	f043 0204 	orr.w	r2, r3, #4
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e067      	b.n	8003c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d041      	beq.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc8:	f7fe fdd8 	bl	800277c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d302      	bcc.n	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d136      	bne.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d10c      	bne.n	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bf14      	ite	ne
 8003bfa:	2301      	movne	r3, #1
 8003bfc:	2300      	moveq	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	e00b      	b.n	8003c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	43da      	mvns	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c38:	f043 0220 	orr.w	r2, r3, #32
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e021      	b.n	8003c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	0c1b      	lsrs	r3, r3, #16
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d10c      	bne.n	8003c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	43da      	mvns	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4013      	ands	r3, r2
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e00b      	b.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	43da      	mvns	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bf14      	ite	ne
 8003c82:	2301      	movne	r3, #1
 8003c84:	2300      	moveq	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f47f af6d 	bne.w	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca4:	e034      	b.n	8003d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f886 	bl	8003db8 <I2C_IsAcknowledgeFailed>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e034      	b.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d028      	beq.n	8003d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cbe:	f7fe fd5d 	bl	800277c <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d302      	bcc.n	8003cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d11d      	bne.n	8003d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cde:	2b80      	cmp	r3, #128	@ 0x80
 8003ce0:	d016      	beq.n	8003d10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e007      	b.n	8003d20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1a:	2b80      	cmp	r3, #128	@ 0x80
 8003d1c:	d1c3      	bne.n	8003ca6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d34:	e034      	b.n	8003da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f83e 	bl	8003db8 <I2C_IsAcknowledgeFailed>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e034      	b.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d028      	beq.n	8003da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fe fd15 	bl	800277c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d11d      	bne.n	8003da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d016      	beq.n	8003da0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e007      	b.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d1c3      	bne.n	8003d36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dce:	d11b      	bne.n	8003e08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	f043 0204 	orr.w	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e267      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d075      	beq.n	8003f22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e36:	4b88      	ldr	r3, [pc, #544]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d00c      	beq.n	8003e5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e42:	4b85      	ldr	r3, [pc, #532]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d112      	bne.n	8003e74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e4e:	4b82      	ldr	r3, [pc, #520]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e5a:	d10b      	bne.n	8003e74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d05b      	beq.n	8003f20 <HAL_RCC_OscConfig+0x108>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d157      	bne.n	8003f20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e242      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e7c:	d106      	bne.n	8003e8c <HAL_RCC_OscConfig+0x74>
 8003e7e:	4b76      	ldr	r3, [pc, #472]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a75      	ldr	r2, [pc, #468]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e01d      	b.n	8003ec8 <HAL_RCC_OscConfig+0xb0>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x98>
 8003e96:	4b70      	ldr	r3, [pc, #448]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a6f      	ldr	r2, [pc, #444]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	4b6d      	ldr	r3, [pc, #436]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a6c      	ldr	r2, [pc, #432]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	e00b      	b.n	8003ec8 <HAL_RCC_OscConfig+0xb0>
 8003eb0:	4b69      	ldr	r3, [pc, #420]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a68      	ldr	r2, [pc, #416]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b66      	ldr	r3, [pc, #408]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a65      	ldr	r2, [pc, #404]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003ec2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d013      	beq.n	8003ef8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fe fc54 	bl	800277c <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed8:	f7fe fc50 	bl	800277c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	@ 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e207      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	4b5b      	ldr	r3, [pc, #364]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0xc0>
 8003ef6:	e014      	b.n	8003f22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fc40 	bl	800277c <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fe fc3c 	bl	800277c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	@ 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e1f3      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f12:	4b51      	ldr	r3, [pc, #324]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0xe8>
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d063      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f3a:	4b47      	ldr	r3, [pc, #284]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d11c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f46:	4b44      	ldr	r3, [pc, #272]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d116      	bne.n	8003f80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f52:	4b41      	ldr	r3, [pc, #260]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_RCC_OscConfig+0x152>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e1c7      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4937      	ldr	r1, [pc, #220]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7e:	e03a      	b.n	8003ff6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d020      	beq.n	8003fca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f88:	4b34      	ldr	r3, [pc, #208]	@ (800405c <HAL_RCC_OscConfig+0x244>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7fe fbf5 	bl	800277c <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f96:	f7fe fbf1 	bl	800277c <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e1a8      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb4:	4b28      	ldr	r3, [pc, #160]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4925      	ldr	r1, [pc, #148]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
 8003fc8:	e015      	b.n	8003ff6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fca:	4b24      	ldr	r3, [pc, #144]	@ (800405c <HAL_RCC_OscConfig+0x244>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fe fbd4 	bl	800277c <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fd8:	f7fe fbd0 	bl	800277c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e187      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fea:	4b1b      	ldr	r3, [pc, #108]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d036      	beq.n	8004070 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400a:	4b15      	ldr	r3, [pc, #84]	@ (8004060 <HAL_RCC_OscConfig+0x248>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004010:	f7fe fbb4 	bl	800277c <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004018:	f7fe fbb0 	bl	800277c <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e167      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402a:	4b0b      	ldr	r3, [pc, #44]	@ (8004058 <HAL_RCC_OscConfig+0x240>)
 800402c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x200>
 8004036:	e01b      	b.n	8004070 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004038:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <HAL_RCC_OscConfig+0x248>)
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800403e:	f7fe fb9d 	bl	800277c <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004044:	e00e      	b.n	8004064 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004046:	f7fe fb99 	bl	800277c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d907      	bls.n	8004064 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e150      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
 8004058:	40023800 	.word	0x40023800
 800405c:	42470000 	.word	0x42470000
 8004060:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004064:	4b88      	ldr	r3, [pc, #544]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1ea      	bne.n	8004046 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8097 	beq.w	80041ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800407e:	2300      	movs	r3, #0
 8004080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004082:	4b81      	ldr	r3, [pc, #516]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10f      	bne.n	80040ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	4b7d      	ldr	r3, [pc, #500]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	4a7c      	ldr	r2, [pc, #496]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800409c:	6413      	str	r3, [r2, #64]	@ 0x40
 800409e:	4b7a      	ldr	r3, [pc, #488]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040aa:	2301      	movs	r3, #1
 80040ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b77      	ldr	r3, [pc, #476]	@ (800428c <HAL_RCC_OscConfig+0x474>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d118      	bne.n	80040ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ba:	4b74      	ldr	r3, [pc, #464]	@ (800428c <HAL_RCC_OscConfig+0x474>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a73      	ldr	r2, [pc, #460]	@ (800428c <HAL_RCC_OscConfig+0x474>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c6:	f7fe fb59 	bl	800277c <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ce:	f7fe fb55 	bl	800277c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e10c      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	4b6a      	ldr	r3, [pc, #424]	@ (800428c <HAL_RCC_OscConfig+0x474>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d106      	bne.n	8004102 <HAL_RCC_OscConfig+0x2ea>
 80040f4:	4b64      	ldr	r3, [pc, #400]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f8:	4a63      	ldr	r2, [pc, #396]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004100:	e01c      	b.n	800413c <HAL_RCC_OscConfig+0x324>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b05      	cmp	r3, #5
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0x30c>
 800410a:	4b5f      	ldr	r3, [pc, #380]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410e:	4a5e      	ldr	r2, [pc, #376]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004110:	f043 0304 	orr.w	r3, r3, #4
 8004114:	6713      	str	r3, [r2, #112]	@ 0x70
 8004116:	4b5c      	ldr	r3, [pc, #368]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411a:	4a5b      	ldr	r2, [pc, #364]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	6713      	str	r3, [r2, #112]	@ 0x70
 8004122:	e00b      	b.n	800413c <HAL_RCC_OscConfig+0x324>
 8004124:	4b58      	ldr	r3, [pc, #352]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004128:	4a57      	ldr	r2, [pc, #348]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004130:	4b55      	ldr	r3, [pc, #340]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004134:	4a54      	ldr	r2, [pc, #336]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004136:	f023 0304 	bic.w	r3, r3, #4
 800413a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d015      	beq.n	8004170 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fe fb1a 	bl	800277c <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414a:	e00a      	b.n	8004162 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800414c:	f7fe fb16 	bl	800277c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e0cb      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004162:	4b49      	ldr	r3, [pc, #292]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0ee      	beq.n	800414c <HAL_RCC_OscConfig+0x334>
 800416e:	e014      	b.n	800419a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004170:	f7fe fb04 	bl	800277c <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004176:	e00a      	b.n	800418e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004178:	f7fe fb00 	bl	800277c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e0b5      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418e:	4b3e      	ldr	r3, [pc, #248]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ee      	bne.n	8004178 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d105      	bne.n	80041ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a0:	4b39      	ldr	r3, [pc, #228]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	4a38      	ldr	r2, [pc, #224]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80041a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80a1 	beq.w	80042f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041b6:	4b34      	ldr	r3, [pc, #208]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d05c      	beq.n	800427c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d141      	bne.n	800424e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ca:	4b31      	ldr	r3, [pc, #196]	@ (8004290 <HAL_RCC_OscConfig+0x478>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7fe fad4 	bl	800277c <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fe fad0 	bl	800277c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e087      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ea:	4b27      	ldr	r3, [pc, #156]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	019b      	lsls	r3, r3, #6
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	3b01      	subs	r3, #1
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	061b      	lsls	r3, r3, #24
 800421a:	491b      	ldr	r1, [pc, #108]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004220:	4b1b      	ldr	r3, [pc, #108]	@ (8004290 <HAL_RCC_OscConfig+0x478>)
 8004222:	2201      	movs	r2, #1
 8004224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004226:	f7fe faa9 	bl	800277c <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422e:	f7fe faa5 	bl	800277c <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e05c      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004240:	4b11      	ldr	r3, [pc, #68]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x416>
 800424c:	e054      	b.n	80042f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424e:	4b10      	ldr	r3, [pc, #64]	@ (8004290 <HAL_RCC_OscConfig+0x478>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fe fa92 	bl	800277c <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800425c:	f7fe fa8e 	bl	800277c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e045      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426e:	4b06      	ldr	r3, [pc, #24]	@ (8004288 <HAL_RCC_OscConfig+0x470>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x444>
 800427a:	e03d      	b.n	80042f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d107      	bne.n	8004294 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e038      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
 8004288:	40023800 	.word	0x40023800
 800428c:	40007000 	.word	0x40007000
 8004290:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004294:	4b1b      	ldr	r3, [pc, #108]	@ (8004304 <HAL_RCC_OscConfig+0x4ec>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d028      	beq.n	80042f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d121      	bne.n	80042f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d11a      	bne.n	80042f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042c4:	4013      	ands	r3, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d111      	bne.n	80042f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	085b      	lsrs	r3, r3, #1
 80042dc:	3b01      	subs	r3, #1
 80042de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d107      	bne.n	80042f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d001      	beq.n	80042f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800

08004308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0cc      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800431c:	4b68      	ldr	r3, [pc, #416]	@ (80044c0 <HAL_RCC_ClockConfig+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d90c      	bls.n	8004344 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432a:	4b65      	ldr	r3, [pc, #404]	@ (80044c0 <HAL_RCC_ClockConfig+0x1b8>)
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004332:	4b63      	ldr	r3, [pc, #396]	@ (80044c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e0b8      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d020      	beq.n	8004392 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800435c:	4b59      	ldr	r3, [pc, #356]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4a58      	ldr	r2, [pc, #352]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004366:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004374:	4b53      	ldr	r3, [pc, #332]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4a52      	ldr	r2, [pc, #328]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800437e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004380:	4b50      	ldr	r3, [pc, #320]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	494d      	ldr	r1, [pc, #308]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d044      	beq.n	8004428 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d107      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a6:	4b47      	ldr	r3, [pc, #284]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d119      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e07f      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d003      	beq.n	80043c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c6:	4b3f      	ldr	r3, [pc, #252]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e06f      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d6:	4b3b      	ldr	r3, [pc, #236]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e067      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043e6:	4b37      	ldr	r3, [pc, #220]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f023 0203 	bic.w	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4934      	ldr	r1, [pc, #208]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043f8:	f7fe f9c0 	bl	800277c <HAL_GetTick>
 80043fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004400:	f7fe f9bc 	bl	800277c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e04f      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	4b2b      	ldr	r3, [pc, #172]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 020c 	and.w	r2, r3, #12
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	429a      	cmp	r2, r3
 8004426:	d1eb      	bne.n	8004400 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004428:	4b25      	ldr	r3, [pc, #148]	@ (80044c0 <HAL_RCC_ClockConfig+0x1b8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d20c      	bcs.n	8004450 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	4b22      	ldr	r3, [pc, #136]	@ (80044c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443e:	4b20      	ldr	r3, [pc, #128]	@ (80044c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e032      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800445c:	4b19      	ldr	r3, [pc, #100]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4916      	ldr	r1, [pc, #88]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	4313      	orrs	r3, r2
 800446c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800447a:	4b12      	ldr	r3, [pc, #72]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	490e      	ldr	r1, [pc, #56]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800448e:	f000 f821 	bl	80044d4 <HAL_RCC_GetSysClockFreq>
 8004492:	4602      	mov	r2, r0
 8004494:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	490a      	ldr	r1, [pc, #40]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c0>)
 80044a0:	5ccb      	ldrb	r3, [r1, r3]
 80044a2:	fa22 f303 	lsr.w	r3, r2, r3
 80044a6:	4a09      	ldr	r2, [pc, #36]	@ (80044cc <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044aa:	4b09      	ldr	r3, [pc, #36]	@ (80044d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe f920 	bl	80026f4 <HAL_InitTick>

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40023c00 	.word	0x40023c00
 80044c4:	40023800 	.word	0x40023800
 80044c8:	08009d28 	.word	0x08009d28
 80044cc:	2000000c 	.word	0x2000000c
 80044d0:	20000010 	.word	0x20000010

080044d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d8:	b090      	sub	sp, #64	@ 0x40
 80044da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	637b      	str	r3, [r7, #52]	@ 0x34
 80044e0:	2300      	movs	r3, #0
 80044e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044e4:	2300      	movs	r3, #0
 80044e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ec:	4b59      	ldr	r3, [pc, #356]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x180>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d00d      	beq.n	8004514 <HAL_RCC_GetSysClockFreq+0x40>
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	f200 80a1 	bhi.w	8004640 <HAL_RCC_GetSysClockFreq+0x16c>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0x34>
 8004502:	2b04      	cmp	r3, #4
 8004504:	d003      	beq.n	800450e <HAL_RCC_GetSysClockFreq+0x3a>
 8004506:	e09b      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004508:	4b53      	ldr	r3, [pc, #332]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x184>)
 800450a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800450c:	e09b      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800450e:	4b53      	ldr	r3, [pc, #332]	@ (800465c <HAL_RCC_GetSysClockFreq+0x188>)
 8004510:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004512:	e098      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004514:	4b4f      	ldr	r3, [pc, #316]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x180>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800451c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800451e:	4b4d      	ldr	r3, [pc, #308]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x180>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d028      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452a:	4b4a      	ldr	r3, [pc, #296]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x180>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	099b      	lsrs	r3, r3, #6
 8004530:	2200      	movs	r2, #0
 8004532:	623b      	str	r3, [r7, #32]
 8004534:	627a      	str	r2, [r7, #36]	@ 0x24
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800453c:	2100      	movs	r1, #0
 800453e:	4b47      	ldr	r3, [pc, #284]	@ (800465c <HAL_RCC_GetSysClockFreq+0x188>)
 8004540:	fb03 f201 	mul.w	r2, r3, r1
 8004544:	2300      	movs	r3, #0
 8004546:	fb00 f303 	mul.w	r3, r0, r3
 800454a:	4413      	add	r3, r2
 800454c:	4a43      	ldr	r2, [pc, #268]	@ (800465c <HAL_RCC_GetSysClockFreq+0x188>)
 800454e:	fba0 1202 	umull	r1, r2, r0, r2
 8004552:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004554:	460a      	mov	r2, r1
 8004556:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800455a:	4413      	add	r3, r2
 800455c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800455e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004560:	2200      	movs	r2, #0
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	61fa      	str	r2, [r7, #28]
 8004566:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800456a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800456e:	f7fc fb6b 	bl	8000c48 <__aeabi_uldivmod>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4613      	mov	r3, r2
 8004578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800457a:	e053      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457c:	4b35      	ldr	r3, [pc, #212]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x180>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	099b      	lsrs	r3, r3, #6
 8004582:	2200      	movs	r2, #0
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	617a      	str	r2, [r7, #20]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800458e:	f04f 0b00 	mov.w	fp, #0
 8004592:	4652      	mov	r2, sl
 8004594:	465b      	mov	r3, fp
 8004596:	f04f 0000 	mov.w	r0, #0
 800459a:	f04f 0100 	mov.w	r1, #0
 800459e:	0159      	lsls	r1, r3, #5
 80045a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a4:	0150      	lsls	r0, r2, #5
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	ebb2 080a 	subs.w	r8, r2, sl
 80045ae:	eb63 090b 	sbc.w	r9, r3, fp
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045c6:	ebb2 0408 	subs.w	r4, r2, r8
 80045ca:	eb63 0509 	sbc.w	r5, r3, r9
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	00eb      	lsls	r3, r5, #3
 80045d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045dc:	00e2      	lsls	r2, r4, #3
 80045de:	4614      	mov	r4, r2
 80045e0:	461d      	mov	r5, r3
 80045e2:	eb14 030a 	adds.w	r3, r4, sl
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	eb45 030b 	adc.w	r3, r5, fp
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045fa:	4629      	mov	r1, r5
 80045fc:	028b      	lsls	r3, r1, #10
 80045fe:	4621      	mov	r1, r4
 8004600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004604:	4621      	mov	r1, r4
 8004606:	028a      	lsls	r2, r1, #10
 8004608:	4610      	mov	r0, r2
 800460a:	4619      	mov	r1, r3
 800460c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460e:	2200      	movs	r2, #0
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	60fa      	str	r2, [r7, #12]
 8004614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004618:	f7fc fb16 	bl	8000c48 <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4613      	mov	r3, r2
 8004622:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004624:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x180>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	3301      	adds	r3, #1
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004634:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800463e:	e002      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004640:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x184>)
 8004642:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004648:	4618      	mov	r0, r3
 800464a:	3740      	adds	r7, #64	@ 0x40
 800464c:	46bd      	mov	sp, r7
 800464e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800
 8004658:	00f42400 	.word	0x00f42400
 800465c:	017d7840 	.word	0x017d7840

08004660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004664:	4b03      	ldr	r3, [pc, #12]	@ (8004674 <HAL_RCC_GetHCLKFreq+0x14>)
 8004666:	681b      	ldr	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	2000000c 	.word	0x2000000c

08004678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800467c:	f7ff fff0 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b05      	ldr	r3, [pc, #20]	@ (8004698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	0a9b      	lsrs	r3, r3, #10
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4903      	ldr	r1, [pc, #12]	@ (800469c <HAL_RCC_GetPCLK1Freq+0x24>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40023800 	.word	0x40023800
 800469c:	08009d38 	.word	0x08009d38

080046a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046a4:	f7ff ffdc 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0b5b      	lsrs	r3, r3, #13
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	@ (80046c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40023800 	.word	0x40023800
 80046c4:	08009d38 	.word	0x08009d38

080046c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e041      	b.n	800475e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fd fdec 	bl	80022cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3304      	adds	r3, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f000 fad8 	bl	8004cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e041      	b.n	80047fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f839 	bl	8004804 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2202      	movs	r2, #2
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f000 fa89 	bl	8004cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d109      	bne.n	800483c <HAL_TIM_PWM_Start+0x24>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	e022      	b.n	8004882 <HAL_TIM_PWM_Start+0x6a>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b04      	cmp	r3, #4
 8004840:	d109      	bne.n	8004856 <HAL_TIM_PWM_Start+0x3e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	bf14      	ite	ne
 800484e:	2301      	movne	r3, #1
 8004850:	2300      	moveq	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	e015      	b.n	8004882 <HAL_TIM_PWM_Start+0x6a>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d109      	bne.n	8004870 <HAL_TIM_PWM_Start+0x58>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	bf14      	ite	ne
 8004868:	2301      	movne	r3, #1
 800486a:	2300      	moveq	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	e008      	b.n	8004882 <HAL_TIM_PWM_Start+0x6a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e07c      	b.n	8004984 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <HAL_TIM_PWM_Start+0x82>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004898:	e013      	b.n	80048c2 <HAL_TIM_PWM_Start+0xaa>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b04      	cmp	r3, #4
 800489e:	d104      	bne.n	80048aa <HAL_TIM_PWM_Start+0x92>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048a8:	e00b      	b.n	80048c2 <HAL_TIM_PWM_Start+0xaa>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_PWM_Start+0xa2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048b8:	e003      	b.n	80048c2 <HAL_TIM_PWM_Start+0xaa>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2201      	movs	r2, #1
 80048c8:	6839      	ldr	r1, [r7, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fcec 	bl	80052a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2d      	ldr	r2, [pc, #180]	@ (800498c <HAL_TIM_PWM_Start+0x174>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_TIM_PWM_Start+0xcc>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2c      	ldr	r2, [pc, #176]	@ (8004990 <HAL_TIM_PWM_Start+0x178>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d101      	bne.n	80048e8 <HAL_TIM_PWM_Start+0xd0>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <HAL_TIM_PWM_Start+0xd2>
 80048e8:	2300      	movs	r3, #0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a22      	ldr	r2, [pc, #136]	@ (800498c <HAL_TIM_PWM_Start+0x174>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d022      	beq.n	800494e <HAL_TIM_PWM_Start+0x136>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004910:	d01d      	beq.n	800494e <HAL_TIM_PWM_Start+0x136>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1f      	ldr	r2, [pc, #124]	@ (8004994 <HAL_TIM_PWM_Start+0x17c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d018      	beq.n	800494e <HAL_TIM_PWM_Start+0x136>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1d      	ldr	r2, [pc, #116]	@ (8004998 <HAL_TIM_PWM_Start+0x180>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <HAL_TIM_PWM_Start+0x136>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1c      	ldr	r2, [pc, #112]	@ (800499c <HAL_TIM_PWM_Start+0x184>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00e      	beq.n	800494e <HAL_TIM_PWM_Start+0x136>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a16      	ldr	r2, [pc, #88]	@ (8004990 <HAL_TIM_PWM_Start+0x178>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d009      	beq.n	800494e <HAL_TIM_PWM_Start+0x136>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a18      	ldr	r2, [pc, #96]	@ (80049a0 <HAL_TIM_PWM_Start+0x188>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d004      	beq.n	800494e <HAL_TIM_PWM_Start+0x136>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a16      	ldr	r2, [pc, #88]	@ (80049a4 <HAL_TIM_PWM_Start+0x18c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d111      	bne.n	8004972 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b06      	cmp	r3, #6
 800495e:	d010      	beq.n	8004982 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004970:	e007      	b.n	8004982 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40010000 	.word	0x40010000
 8004990:	40010400 	.word	0x40010400
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40000c00 	.word	0x40000c00
 80049a0:	40014000 	.word	0x40014000
 80049a4:	40001800 	.word	0x40001800

080049a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e0ae      	b.n	8004b24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b0c      	cmp	r3, #12
 80049d2:	f200 809f 	bhi.w	8004b14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049d6:	a201      	add	r2, pc, #4	@ (adr r2, 80049dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004a11 	.word	0x08004a11
 80049e0:	08004b15 	.word	0x08004b15
 80049e4:	08004b15 	.word	0x08004b15
 80049e8:	08004b15 	.word	0x08004b15
 80049ec:	08004a51 	.word	0x08004a51
 80049f0:	08004b15 	.word	0x08004b15
 80049f4:	08004b15 	.word	0x08004b15
 80049f8:	08004b15 	.word	0x08004b15
 80049fc:	08004a93 	.word	0x08004a93
 8004a00:	08004b15 	.word	0x08004b15
 8004a04:	08004b15 	.word	0x08004b15
 8004a08:	08004b15 	.word	0x08004b15
 8004a0c:	08004ad3 	.word	0x08004ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 f9fc 	bl	8004e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0208 	orr.w	r2, r2, #8
 8004a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0204 	bic.w	r2, r2, #4
 8004a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6999      	ldr	r1, [r3, #24]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	619a      	str	r2, [r3, #24]
      break;
 8004a4e:	e064      	b.n	8004b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fa4c 	bl	8004ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6999      	ldr	r1, [r3, #24]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	021a      	lsls	r2, r3, #8
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	619a      	str	r2, [r3, #24]
      break;
 8004a90:	e043      	b.n	8004b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 faa1 	bl	8004fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f042 0208 	orr.w	r2, r2, #8
 8004aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0204 	bic.w	r2, r2, #4
 8004abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69d9      	ldr	r1, [r3, #28]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	61da      	str	r2, [r3, #28]
      break;
 8004ad0:	e023      	b.n	8004b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 faf5 	bl	80050c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69d9      	ldr	r1, [r3, #28]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	021a      	lsls	r2, r3, #8
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	61da      	str	r2, [r3, #28]
      break;
 8004b12:	e002      	b.n	8004b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	75fb      	strb	r3, [r7, #23]
      break;
 8004b18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_TIM_ConfigClockSource+0x1c>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e0b4      	b.n	8004cb2 <HAL_TIM_ConfigClockSource+0x186>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b80:	d03e      	beq.n	8004c00 <HAL_TIM_ConfigClockSource+0xd4>
 8004b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b86:	f200 8087 	bhi.w	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8e:	f000 8086 	beq.w	8004c9e <HAL_TIM_ConfigClockSource+0x172>
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b96:	d87f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b70      	cmp	r3, #112	@ 0x70
 8004b9a:	d01a      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0xa6>
 8004b9c:	2b70      	cmp	r3, #112	@ 0x70
 8004b9e:	d87b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b60      	cmp	r3, #96	@ 0x60
 8004ba2:	d050      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x11a>
 8004ba4:	2b60      	cmp	r3, #96	@ 0x60
 8004ba6:	d877      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b50      	cmp	r3, #80	@ 0x50
 8004baa:	d03c      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0xfa>
 8004bac:	2b50      	cmp	r3, #80	@ 0x50
 8004bae:	d873      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b40      	cmp	r3, #64	@ 0x40
 8004bb2:	d058      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x13a>
 8004bb4:	2b40      	cmp	r3, #64	@ 0x40
 8004bb6:	d86f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b30      	cmp	r3, #48	@ 0x30
 8004bba:	d064      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bbc:	2b30      	cmp	r3, #48	@ 0x30
 8004bbe:	d86b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d060      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d867      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d05c      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d05a      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bd0:	e062      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004be2:	f000 fb41 	bl	8005268 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	609a      	str	r2, [r3, #8]
      break;
 8004bfe:	e04f      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	f000 fb2a 	bl	8005268 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c22:	609a      	str	r2, [r3, #8]
      break;
 8004c24:	e03c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 fa9e 	bl	8005174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2150      	movs	r1, #80	@ 0x50
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 faf7 	bl	8005232 <TIM_ITRx_SetConfig>
      break;
 8004c44:	e02c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c52:	461a      	mov	r2, r3
 8004c54:	f000 fabd 	bl	80051d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2160      	movs	r1, #96	@ 0x60
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fae7 	bl	8005232 <TIM_ITRx_SetConfig>
      break;
 8004c64:	e01c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c72:	461a      	mov	r2, r3
 8004c74:	f000 fa7e 	bl	8005174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2140      	movs	r1, #64	@ 0x40
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fad7 	bl	8005232 <TIM_ITRx_SetConfig>
      break;
 8004c84:	e00c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f000 face 	bl	8005232 <TIM_ITRx_SetConfig>
      break;
 8004c96:	e003      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9c:	e000      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a46      	ldr	r2, [pc, #280]	@ (8004de8 <TIM_Base_SetConfig+0x12c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cda:	d00f      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a43      	ldr	r2, [pc, #268]	@ (8004dec <TIM_Base_SetConfig+0x130>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00b      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a42      	ldr	r2, [pc, #264]	@ (8004df0 <TIM_Base_SetConfig+0x134>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d007      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a41      	ldr	r2, [pc, #260]	@ (8004df4 <TIM_Base_SetConfig+0x138>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a40      	ldr	r2, [pc, #256]	@ (8004df8 <TIM_Base_SetConfig+0x13c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d108      	bne.n	8004d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a35      	ldr	r2, [pc, #212]	@ (8004de8 <TIM_Base_SetConfig+0x12c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d02b      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d1c:	d027      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a32      	ldr	r2, [pc, #200]	@ (8004dec <TIM_Base_SetConfig+0x130>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d023      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a31      	ldr	r2, [pc, #196]	@ (8004df0 <TIM_Base_SetConfig+0x134>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d01f      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a30      	ldr	r2, [pc, #192]	@ (8004df4 <TIM_Base_SetConfig+0x138>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d01b      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a2f      	ldr	r2, [pc, #188]	@ (8004df8 <TIM_Base_SetConfig+0x13c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d017      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2e      	ldr	r2, [pc, #184]	@ (8004dfc <TIM_Base_SetConfig+0x140>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2d      	ldr	r2, [pc, #180]	@ (8004e00 <TIM_Base_SetConfig+0x144>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00f      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2c      	ldr	r2, [pc, #176]	@ (8004e04 <TIM_Base_SetConfig+0x148>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00b      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2b      	ldr	r2, [pc, #172]	@ (8004e08 <TIM_Base_SetConfig+0x14c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d007      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2a      	ldr	r2, [pc, #168]	@ (8004e0c <TIM_Base_SetConfig+0x150>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d003      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a29      	ldr	r2, [pc, #164]	@ (8004e10 <TIM_Base_SetConfig+0x154>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d108      	bne.n	8004d80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a10      	ldr	r2, [pc, #64]	@ (8004de8 <TIM_Base_SetConfig+0x12c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <TIM_Base_SetConfig+0xf8>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a12      	ldr	r2, [pc, #72]	@ (8004df8 <TIM_Base_SetConfig+0x13c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d103      	bne.n	8004dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d105      	bne.n	8004dda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f023 0201 	bic.w	r2, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	611a      	str	r2, [r3, #16]
  }
}
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40010000 	.word	0x40010000
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40000800 	.word	0x40000800
 8004df4:	40000c00 	.word	0x40000c00
 8004df8:	40010400 	.word	0x40010400
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	40014400 	.word	0x40014400
 8004e04:	40014800 	.word	0x40014800
 8004e08:	40001800 	.word	0x40001800
 8004e0c:	40001c00 	.word	0x40001c00
 8004e10:	40002000 	.word	0x40002000

08004e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f023 0201 	bic.w	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0303 	bic.w	r3, r3, #3
 8004e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f023 0302 	bic.w	r3, r3, #2
 8004e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a20      	ldr	r2, [pc, #128]	@ (8004eec <TIM_OC1_SetConfig+0xd8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d003      	beq.n	8004e78 <TIM_OC1_SetConfig+0x64>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef0 <TIM_OC1_SetConfig+0xdc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d10c      	bne.n	8004e92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f023 0308 	bic.w	r3, r3, #8
 8004e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f023 0304 	bic.w	r3, r3, #4
 8004e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a15      	ldr	r2, [pc, #84]	@ (8004eec <TIM_OC1_SetConfig+0xd8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_OC1_SetConfig+0x8e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a14      	ldr	r2, [pc, #80]	@ (8004ef0 <TIM_OC1_SetConfig+0xdc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d111      	bne.n	8004ec6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	621a      	str	r2, [r3, #32]
}
 8004ee0:	bf00      	nop
 8004ee2:	371c      	adds	r7, #28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	40010400 	.word	0x40010400

08004ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f023 0210 	bic.w	r2, r3, #16
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0320 	bic.w	r3, r3, #32
 8004f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a22      	ldr	r2, [pc, #136]	@ (8004fd8 <TIM_OC2_SetConfig+0xe4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_OC2_SetConfig+0x68>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a21      	ldr	r2, [pc, #132]	@ (8004fdc <TIM_OC2_SetConfig+0xe8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d10d      	bne.n	8004f78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a17      	ldr	r2, [pc, #92]	@ (8004fd8 <TIM_OC2_SetConfig+0xe4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_OC2_SetConfig+0x94>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a16      	ldr	r2, [pc, #88]	@ (8004fdc <TIM_OC2_SetConfig+0xe8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d113      	bne.n	8004fb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40010400 	.word	0x40010400

08004fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0303 	bic.w	r3, r3, #3
 8005016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a21      	ldr	r2, [pc, #132]	@ (80050c0 <TIM_OC3_SetConfig+0xe0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d003      	beq.n	8005046 <TIM_OC3_SetConfig+0x66>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a20      	ldr	r2, [pc, #128]	@ (80050c4 <TIM_OC3_SetConfig+0xe4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d10d      	bne.n	8005062 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800504c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a16      	ldr	r2, [pc, #88]	@ (80050c0 <TIM_OC3_SetConfig+0xe0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d003      	beq.n	8005072 <TIM_OC3_SetConfig+0x92>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a15      	ldr	r2, [pc, #84]	@ (80050c4 <TIM_OC3_SetConfig+0xe4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d113      	bne.n	800509a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	621a      	str	r2, [r3, #32]
}
 80050b4:	bf00      	nop
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40010400 	.word	0x40010400

080050c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	031b      	lsls	r3, r3, #12
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a12      	ldr	r2, [pc, #72]	@ (800516c <TIM_OC4_SetConfig+0xa4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_OC4_SetConfig+0x68>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a11      	ldr	r2, [pc, #68]	@ (8005170 <TIM_OC4_SetConfig+0xa8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d109      	bne.n	8005144 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	019b      	lsls	r3, r3, #6
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40010000 	.word	0x40010000
 8005170:	40010400 	.word	0x40010400

08005174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f023 0201 	bic.w	r2, r3, #1
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800519e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f023 030a 	bic.w	r3, r3, #10
 80051b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b087      	sub	sp, #28
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	f023 0210 	bic.w	r2, r3, #16
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	031b      	lsls	r3, r3, #12
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800520e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	621a      	str	r2, [r3, #32]
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	f043 0307 	orr.w	r3, r3, #7
 8005254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	609a      	str	r2, [r3, #8]
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	021a      	lsls	r2, r3, #8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	431a      	orrs	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4313      	orrs	r3, r2
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	609a      	str	r2, [r3, #8]
}
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	2201      	movs	r2, #1
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1a      	ldr	r2, [r3, #32]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	43db      	mvns	r3, r3
 80052ca:	401a      	ands	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1a      	ldr	r2, [r3, #32]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	fa01 f303 	lsl.w	r3, r1, r3
 80052e0:	431a      	orrs	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005308:	2302      	movs	r3, #2
 800530a:	e05a      	b.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a21      	ldr	r2, [pc, #132]	@ (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d022      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005358:	d01d      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1d      	ldr	r2, [pc, #116]	@ (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d018      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1b      	ldr	r2, [pc, #108]	@ (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1a      	ldr	r2, [pc, #104]	@ (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a18      	ldr	r2, [pc, #96]	@ (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a17      	ldr	r2, [pc, #92]	@ (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a15      	ldr	r2, [pc, #84]	@ (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d10c      	bne.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800539c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800
 80053dc:	40000c00 	.word	0x40000c00
 80053e0:	40010400 	.word	0x40010400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40001800 	.word	0x40001800

080053ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e042      	b.n	8005484 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fc ffb2 	bl	800237c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2224      	movs	r2, #36	@ 0x24
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800542e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f973 	bl	800571c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695a      	ldr	r2, [r3, #20]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	@ 0x28
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d175      	bne.n	8005598 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_UART_Transmit+0x2c>
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e06e      	b.n	800559a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2221      	movs	r2, #33	@ 0x21
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ca:	f7fd f957 	bl	800277c <HAL_GetTick>
 80054ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	88fa      	ldrh	r2, [r7, #6]
 80054d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	88fa      	ldrh	r2, [r7, #6]
 80054da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054e4:	d108      	bne.n	80054f8 <HAL_UART_Transmit+0x6c>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d104      	bne.n	80054f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	e003      	b.n	8005500 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005500:	e02e      	b.n	8005560 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2200      	movs	r2, #0
 800550a:	2180      	movs	r1, #128	@ 0x80
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f848 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e03a      	b.n	800559a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10b      	bne.n	8005542 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005538:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	3302      	adds	r3, #2
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	e007      	b.n	8005552 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	781a      	ldrb	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	3301      	adds	r3, #1
 8005550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1cb      	bne.n	8005502 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2200      	movs	r2, #0
 8005572:	2140      	movs	r1, #64	@ 0x40
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f814 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e006      	b.n	800559a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	e000      	b.n	800559a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005598:	2302      	movs	r3, #2
  }
}
 800559a:	4618      	mov	r0, r3
 800559c:	3720      	adds	r7, #32
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b086      	sub	sp, #24
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	603b      	str	r3, [r7, #0]
 80055ae:	4613      	mov	r3, r2
 80055b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b2:	e03b      	b.n	800562c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	d037      	beq.n	800562c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055bc:	f7fd f8de 	bl	800277c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	6a3a      	ldr	r2, [r7, #32]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d302      	bcc.n	80055d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e03a      	b.n	800564c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d023      	beq.n	800562c <UART_WaitOnFlagUntilTimeout+0x8a>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b80      	cmp	r3, #128	@ 0x80
 80055e8:	d020      	beq.n	800562c <UART_WaitOnFlagUntilTimeout+0x8a>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b40      	cmp	r3, #64	@ 0x40
 80055ee:	d01d      	beq.n	800562c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d116      	bne.n	800562c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f81d 	bl	8005654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2208      	movs	r2, #8
 800561e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e00f      	b.n	800564c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4013      	ands	r3, r2
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	429a      	cmp	r2, r3
 800563a:	bf0c      	ite	eq
 800563c:	2301      	moveq	r3, #1
 800563e:	2300      	movne	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	429a      	cmp	r2, r3
 8005648:	d0b4      	beq.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005654:	b480      	push	{r7}
 8005656:	b095      	sub	sp, #84	@ 0x54
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800567c:	643a      	str	r2, [r7, #64]	@ 0x40
 800567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005682:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800568a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e5      	bne.n	800565c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3314      	adds	r3, #20
 8005696:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	61fb      	str	r3, [r7, #28]
   return(result);
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3314      	adds	r3, #20
 80056ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e5      	bne.n	8005690 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d119      	bne.n	8005700 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	60bb      	str	r3, [r7, #8]
   return(result);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f023 0310 	bic.w	r3, r3, #16
 80056e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056ec:	61ba      	str	r2, [r7, #24]
 80056ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	6979      	ldr	r1, [r7, #20]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	613b      	str	r3, [r7, #16]
   return(result);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e5      	bne.n	80056cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800570e:	bf00      	nop
 8005710:	3754      	adds	r7, #84	@ 0x54
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800571c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005720:	b0c0      	sub	sp, #256	@ 0x100
 8005722:	af00      	add	r7, sp, #0
 8005724:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005738:	68d9      	ldr	r1, [r3, #12]
 800573a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	ea40 0301 	orr.w	r3, r0, r1
 8005744:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	431a      	orrs	r2, r3
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	431a      	orrs	r2, r3
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005774:	f021 010c 	bic.w	r1, r1, #12
 8005778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005782:	430b      	orrs	r3, r1
 8005784:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005796:	6999      	ldr	r1, [r3, #24]
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	ea40 0301 	orr.w	r3, r0, r1
 80057a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4b8f      	ldr	r3, [pc, #572]	@ (80059e8 <UART_SetConfig+0x2cc>)
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d005      	beq.n	80057bc <UART_SetConfig+0xa0>
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b8d      	ldr	r3, [pc, #564]	@ (80059ec <UART_SetConfig+0x2d0>)
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d104      	bne.n	80057c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057bc:	f7fe ff70 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 80057c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057c4:	e003      	b.n	80057ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057c6:	f7fe ff57 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 80057ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057d8:	f040 810c 	bne.w	80059f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057e0:	2200      	movs	r2, #0
 80057e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057ee:	4622      	mov	r2, r4
 80057f0:	462b      	mov	r3, r5
 80057f2:	1891      	adds	r1, r2, r2
 80057f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057f6:	415b      	adcs	r3, r3
 80057f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057fe:	4621      	mov	r1, r4
 8005800:	eb12 0801 	adds.w	r8, r2, r1
 8005804:	4629      	mov	r1, r5
 8005806:	eb43 0901 	adc.w	r9, r3, r1
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800581a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800581e:	4690      	mov	r8, r2
 8005820:	4699      	mov	r9, r3
 8005822:	4623      	mov	r3, r4
 8005824:	eb18 0303 	adds.w	r3, r8, r3
 8005828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800582c:	462b      	mov	r3, r5
 800582e:	eb49 0303 	adc.w	r3, r9, r3
 8005832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005842:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005846:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800584a:	460b      	mov	r3, r1
 800584c:	18db      	adds	r3, r3, r3
 800584e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005850:	4613      	mov	r3, r2
 8005852:	eb42 0303 	adc.w	r3, r2, r3
 8005856:	657b      	str	r3, [r7, #84]	@ 0x54
 8005858:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800585c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005860:	f7fb f9f2 	bl	8000c48 <__aeabi_uldivmod>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4b61      	ldr	r3, [pc, #388]	@ (80059f0 <UART_SetConfig+0x2d4>)
 800586a:	fba3 2302 	umull	r2, r3, r3, r2
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	011c      	lsls	r4, r3, #4
 8005872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005876:	2200      	movs	r2, #0
 8005878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800587c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005880:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005884:	4642      	mov	r2, r8
 8005886:	464b      	mov	r3, r9
 8005888:	1891      	adds	r1, r2, r2
 800588a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800588c:	415b      	adcs	r3, r3
 800588e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005890:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005894:	4641      	mov	r1, r8
 8005896:	eb12 0a01 	adds.w	sl, r2, r1
 800589a:	4649      	mov	r1, r9
 800589c:	eb43 0b01 	adc.w	fp, r3, r1
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058b4:	4692      	mov	sl, r2
 80058b6:	469b      	mov	fp, r3
 80058b8:	4643      	mov	r3, r8
 80058ba:	eb1a 0303 	adds.w	r3, sl, r3
 80058be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058c2:	464b      	mov	r3, r9
 80058c4:	eb4b 0303 	adc.w	r3, fp, r3
 80058c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058e0:	460b      	mov	r3, r1
 80058e2:	18db      	adds	r3, r3, r3
 80058e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80058e6:	4613      	mov	r3, r2
 80058e8:	eb42 0303 	adc.w	r3, r2, r3
 80058ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80058ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058f6:	f7fb f9a7 	bl	8000c48 <__aeabi_uldivmod>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4611      	mov	r1, r2
 8005900:	4b3b      	ldr	r3, [pc, #236]	@ (80059f0 <UART_SetConfig+0x2d4>)
 8005902:	fba3 2301 	umull	r2, r3, r3, r1
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	2264      	movs	r2, #100	@ 0x64
 800590a:	fb02 f303 	mul.w	r3, r2, r3
 800590e:	1acb      	subs	r3, r1, r3
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005916:	4b36      	ldr	r3, [pc, #216]	@ (80059f0 <UART_SetConfig+0x2d4>)
 8005918:	fba3 2302 	umull	r2, r3, r3, r2
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005924:	441c      	add	r4, r3
 8005926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800592a:	2200      	movs	r2, #0
 800592c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005930:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005934:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005938:	4642      	mov	r2, r8
 800593a:	464b      	mov	r3, r9
 800593c:	1891      	adds	r1, r2, r2
 800593e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005940:	415b      	adcs	r3, r3
 8005942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005948:	4641      	mov	r1, r8
 800594a:	1851      	adds	r1, r2, r1
 800594c:	6339      	str	r1, [r7, #48]	@ 0x30
 800594e:	4649      	mov	r1, r9
 8005950:	414b      	adcs	r3, r1
 8005952:	637b      	str	r3, [r7, #52]	@ 0x34
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005960:	4659      	mov	r1, fp
 8005962:	00cb      	lsls	r3, r1, #3
 8005964:	4651      	mov	r1, sl
 8005966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800596a:	4651      	mov	r1, sl
 800596c:	00ca      	lsls	r2, r1, #3
 800596e:	4610      	mov	r0, r2
 8005970:	4619      	mov	r1, r3
 8005972:	4603      	mov	r3, r0
 8005974:	4642      	mov	r2, r8
 8005976:	189b      	adds	r3, r3, r2
 8005978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800597c:	464b      	mov	r3, r9
 800597e:	460a      	mov	r2, r1
 8005980:	eb42 0303 	adc.w	r3, r2, r3
 8005984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005994:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005998:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800599c:	460b      	mov	r3, r1
 800599e:	18db      	adds	r3, r3, r3
 80059a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059a2:	4613      	mov	r3, r2
 80059a4:	eb42 0303 	adc.w	r3, r2, r3
 80059a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059b2:	f7fb f949 	bl	8000c48 <__aeabi_uldivmod>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <UART_SetConfig+0x2d4>)
 80059bc:	fba3 1302 	umull	r1, r3, r3, r2
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	2164      	movs	r1, #100	@ 0x64
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	3332      	adds	r3, #50	@ 0x32
 80059ce:	4a08      	ldr	r2, [pc, #32]	@ (80059f0 <UART_SetConfig+0x2d4>)
 80059d0:	fba2 2303 	umull	r2, r3, r2, r3
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	f003 0207 	and.w	r2, r3, #7
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4422      	add	r2, r4
 80059e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059e4:	e106      	b.n	8005bf4 <UART_SetConfig+0x4d8>
 80059e6:	bf00      	nop
 80059e8:	40011000 	.word	0x40011000
 80059ec:	40011400 	.word	0x40011400
 80059f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059f8:	2200      	movs	r2, #0
 80059fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a06:	4642      	mov	r2, r8
 8005a08:	464b      	mov	r3, r9
 8005a0a:	1891      	adds	r1, r2, r2
 8005a0c:	6239      	str	r1, [r7, #32]
 8005a0e:	415b      	adcs	r3, r3
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a16:	4641      	mov	r1, r8
 8005a18:	1854      	adds	r4, r2, r1
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	eb43 0501 	adc.w	r5, r3, r1
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	00eb      	lsls	r3, r5, #3
 8005a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a2e:	00e2      	lsls	r2, r4, #3
 8005a30:	4614      	mov	r4, r2
 8005a32:	461d      	mov	r5, r3
 8005a34:	4643      	mov	r3, r8
 8005a36:	18e3      	adds	r3, r4, r3
 8005a38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a3c:	464b      	mov	r3, r9
 8005a3e:	eb45 0303 	adc.w	r3, r5, r3
 8005a42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a62:	4629      	mov	r1, r5
 8005a64:	008b      	lsls	r3, r1, #2
 8005a66:	4621      	mov	r1, r4
 8005a68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	008a      	lsls	r2, r1, #2
 8005a70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a74:	f7fb f8e8 	bl	8000c48 <__aeabi_uldivmod>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4b60      	ldr	r3, [pc, #384]	@ (8005c00 <UART_SetConfig+0x4e4>)
 8005a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	011c      	lsls	r4, r3, #4
 8005a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a98:	4642      	mov	r2, r8
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	1891      	adds	r1, r2, r2
 8005a9e:	61b9      	str	r1, [r7, #24]
 8005aa0:	415b      	adcs	r3, r3
 8005aa2:	61fb      	str	r3, [r7, #28]
 8005aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aa8:	4641      	mov	r1, r8
 8005aaa:	1851      	adds	r1, r2, r1
 8005aac:	6139      	str	r1, [r7, #16]
 8005aae:	4649      	mov	r1, r9
 8005ab0:	414b      	adcs	r3, r1
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ac0:	4659      	mov	r1, fp
 8005ac2:	00cb      	lsls	r3, r1, #3
 8005ac4:	4651      	mov	r1, sl
 8005ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aca:	4651      	mov	r1, sl
 8005acc:	00ca      	lsls	r2, r1, #3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	189b      	adds	r3, r3, r2
 8005ad8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005adc:	464b      	mov	r3, r9
 8005ade:	460a      	mov	r2, r1
 8005ae0:	eb42 0303 	adc.w	r3, r2, r3
 8005ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005af2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b00:	4649      	mov	r1, r9
 8005b02:	008b      	lsls	r3, r1, #2
 8005b04:	4641      	mov	r1, r8
 8005b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b0a:	4641      	mov	r1, r8
 8005b0c:	008a      	lsls	r2, r1, #2
 8005b0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b12:	f7fb f899 	bl	8000c48 <__aeabi_uldivmod>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	4b38      	ldr	r3, [pc, #224]	@ (8005c00 <UART_SetConfig+0x4e4>)
 8005b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	2264      	movs	r2, #100	@ 0x64
 8005b26:	fb02 f303 	mul.w	r3, r2, r3
 8005b2a:	1acb      	subs	r3, r1, r3
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	3332      	adds	r3, #50	@ 0x32
 8005b30:	4a33      	ldr	r2, [pc, #204]	@ (8005c00 <UART_SetConfig+0x4e4>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b3c:	441c      	add	r4, r3
 8005b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b42:	2200      	movs	r2, #0
 8005b44:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b46:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	464b      	mov	r3, r9
 8005b50:	1891      	adds	r1, r2, r2
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	415b      	adcs	r3, r3
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b5c:	4641      	mov	r1, r8
 8005b5e:	1851      	adds	r1, r2, r1
 8005b60:	6039      	str	r1, [r7, #0]
 8005b62:	4649      	mov	r1, r9
 8005b64:	414b      	adcs	r3, r1
 8005b66:	607b      	str	r3, [r7, #4]
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b74:	4659      	mov	r1, fp
 8005b76:	00cb      	lsls	r3, r1, #3
 8005b78:	4651      	mov	r1, sl
 8005b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b7e:	4651      	mov	r1, sl
 8005b80:	00ca      	lsls	r2, r1, #3
 8005b82:	4610      	mov	r0, r2
 8005b84:	4619      	mov	r1, r3
 8005b86:	4603      	mov	r3, r0
 8005b88:	4642      	mov	r2, r8
 8005b8a:	189b      	adds	r3, r3, r2
 8005b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b8e:	464b      	mov	r3, r9
 8005b90:	460a      	mov	r2, r1
 8005b92:	eb42 0303 	adc.w	r3, r2, r3
 8005b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ba2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	008b      	lsls	r3, r1, #2
 8005bb4:	4641      	mov	r1, r8
 8005bb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bba:	4641      	mov	r1, r8
 8005bbc:	008a      	lsls	r2, r1, #2
 8005bbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005bc2:	f7fb f841 	bl	8000c48 <__aeabi_uldivmod>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4b0d      	ldr	r3, [pc, #52]	@ (8005c00 <UART_SetConfig+0x4e4>)
 8005bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	2164      	movs	r1, #100	@ 0x64
 8005bd4:	fb01 f303 	mul.w	r3, r1, r3
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	3332      	adds	r3, #50	@ 0x32
 8005bde:	4a08      	ldr	r2, [pc, #32]	@ (8005c00 <UART_SetConfig+0x4e4>)
 8005be0:	fba2 2303 	umull	r2, r3, r2, r3
 8005be4:	095b      	lsrs	r3, r3, #5
 8005be6:	f003 020f 	and.w	r2, r3, #15
 8005bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4422      	add	r2, r4
 8005bf2:	609a      	str	r2, [r3, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c00:	51eb851f 	.word	0x51eb851f

08005c04 <__cvt>:
 8005c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	ec57 6b10 	vmov	r6, r7, d0
 8005c0c:	2f00      	cmp	r7, #0
 8005c0e:	460c      	mov	r4, r1
 8005c10:	4619      	mov	r1, r3
 8005c12:	463b      	mov	r3, r7
 8005c14:	bfbb      	ittet	lt
 8005c16:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005c1a:	461f      	movlt	r7, r3
 8005c1c:	2300      	movge	r3, #0
 8005c1e:	232d      	movlt	r3, #45	@ 0x2d
 8005c20:	700b      	strb	r3, [r1, #0]
 8005c22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c24:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005c28:	4691      	mov	r9, r2
 8005c2a:	f023 0820 	bic.w	r8, r3, #32
 8005c2e:	bfbc      	itt	lt
 8005c30:	4632      	movlt	r2, r6
 8005c32:	4616      	movlt	r6, r2
 8005c34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c38:	d005      	beq.n	8005c46 <__cvt+0x42>
 8005c3a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005c3e:	d100      	bne.n	8005c42 <__cvt+0x3e>
 8005c40:	3401      	adds	r4, #1
 8005c42:	2102      	movs	r1, #2
 8005c44:	e000      	b.n	8005c48 <__cvt+0x44>
 8005c46:	2103      	movs	r1, #3
 8005c48:	ab03      	add	r3, sp, #12
 8005c4a:	9301      	str	r3, [sp, #4]
 8005c4c:	ab02      	add	r3, sp, #8
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	ec47 6b10 	vmov	d0, r6, r7
 8005c54:	4653      	mov	r3, sl
 8005c56:	4622      	mov	r2, r4
 8005c58:	f000 fe6e 	bl	8006938 <_dtoa_r>
 8005c5c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c60:	4605      	mov	r5, r0
 8005c62:	d119      	bne.n	8005c98 <__cvt+0x94>
 8005c64:	f019 0f01 	tst.w	r9, #1
 8005c68:	d00e      	beq.n	8005c88 <__cvt+0x84>
 8005c6a:	eb00 0904 	add.w	r9, r0, r4
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2300      	movs	r3, #0
 8005c72:	4630      	mov	r0, r6
 8005c74:	4639      	mov	r1, r7
 8005c76:	f7fa ff27 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c7a:	b108      	cbz	r0, 8005c80 <__cvt+0x7c>
 8005c7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c80:	2230      	movs	r2, #48	@ 0x30
 8005c82:	9b03      	ldr	r3, [sp, #12]
 8005c84:	454b      	cmp	r3, r9
 8005c86:	d31e      	bcc.n	8005cc6 <__cvt+0xc2>
 8005c88:	9b03      	ldr	r3, [sp, #12]
 8005c8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c8c:	1b5b      	subs	r3, r3, r5
 8005c8e:	4628      	mov	r0, r5
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	b004      	add	sp, #16
 8005c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c9c:	eb00 0904 	add.w	r9, r0, r4
 8005ca0:	d1e5      	bne.n	8005c6e <__cvt+0x6a>
 8005ca2:	7803      	ldrb	r3, [r0, #0]
 8005ca4:	2b30      	cmp	r3, #48	@ 0x30
 8005ca6:	d10a      	bne.n	8005cbe <__cvt+0xba>
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2300      	movs	r3, #0
 8005cac:	4630      	mov	r0, r6
 8005cae:	4639      	mov	r1, r7
 8005cb0:	f7fa ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cb4:	b918      	cbnz	r0, 8005cbe <__cvt+0xba>
 8005cb6:	f1c4 0401 	rsb	r4, r4, #1
 8005cba:	f8ca 4000 	str.w	r4, [sl]
 8005cbe:	f8da 3000 	ldr.w	r3, [sl]
 8005cc2:	4499      	add	r9, r3
 8005cc4:	e7d3      	b.n	8005c6e <__cvt+0x6a>
 8005cc6:	1c59      	adds	r1, r3, #1
 8005cc8:	9103      	str	r1, [sp, #12]
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	e7d9      	b.n	8005c82 <__cvt+0x7e>

08005cce <__exponent>:
 8005cce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	bfba      	itte	lt
 8005cd4:	4249      	neglt	r1, r1
 8005cd6:	232d      	movlt	r3, #45	@ 0x2d
 8005cd8:	232b      	movge	r3, #43	@ 0x2b
 8005cda:	2909      	cmp	r1, #9
 8005cdc:	7002      	strb	r2, [r0, #0]
 8005cde:	7043      	strb	r3, [r0, #1]
 8005ce0:	dd29      	ble.n	8005d36 <__exponent+0x68>
 8005ce2:	f10d 0307 	add.w	r3, sp, #7
 8005ce6:	461d      	mov	r5, r3
 8005ce8:	270a      	movs	r7, #10
 8005cea:	461a      	mov	r2, r3
 8005cec:	fbb1 f6f7 	udiv	r6, r1, r7
 8005cf0:	fb07 1416 	mls	r4, r7, r6, r1
 8005cf4:	3430      	adds	r4, #48	@ 0x30
 8005cf6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	2c63      	cmp	r4, #99	@ 0x63
 8005cfe:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d02:	4631      	mov	r1, r6
 8005d04:	dcf1      	bgt.n	8005cea <__exponent+0x1c>
 8005d06:	3130      	adds	r1, #48	@ 0x30
 8005d08:	1e94      	subs	r4, r2, #2
 8005d0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d0e:	1c41      	adds	r1, r0, #1
 8005d10:	4623      	mov	r3, r4
 8005d12:	42ab      	cmp	r3, r5
 8005d14:	d30a      	bcc.n	8005d2c <__exponent+0x5e>
 8005d16:	f10d 0309 	add.w	r3, sp, #9
 8005d1a:	1a9b      	subs	r3, r3, r2
 8005d1c:	42ac      	cmp	r4, r5
 8005d1e:	bf88      	it	hi
 8005d20:	2300      	movhi	r3, #0
 8005d22:	3302      	adds	r3, #2
 8005d24:	4403      	add	r3, r0
 8005d26:	1a18      	subs	r0, r3, r0
 8005d28:	b003      	add	sp, #12
 8005d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d2c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005d30:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d34:	e7ed      	b.n	8005d12 <__exponent+0x44>
 8005d36:	2330      	movs	r3, #48	@ 0x30
 8005d38:	3130      	adds	r1, #48	@ 0x30
 8005d3a:	7083      	strb	r3, [r0, #2]
 8005d3c:	70c1      	strb	r1, [r0, #3]
 8005d3e:	1d03      	adds	r3, r0, #4
 8005d40:	e7f1      	b.n	8005d26 <__exponent+0x58>
	...

08005d44 <_printf_float>:
 8005d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d48:	b08d      	sub	sp, #52	@ 0x34
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005d50:	4616      	mov	r6, r2
 8005d52:	461f      	mov	r7, r3
 8005d54:	4605      	mov	r5, r0
 8005d56:	f000 fcef 	bl	8006738 <_localeconv_r>
 8005d5a:	6803      	ldr	r3, [r0, #0]
 8005d5c:	9304      	str	r3, [sp, #16]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fa fa86 	bl	8000270 <strlen>
 8005d64:	2300      	movs	r3, #0
 8005d66:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d68:	f8d8 3000 	ldr.w	r3, [r8]
 8005d6c:	9005      	str	r0, [sp, #20]
 8005d6e:	3307      	adds	r3, #7
 8005d70:	f023 0307 	bic.w	r3, r3, #7
 8005d74:	f103 0208 	add.w	r2, r3, #8
 8005d78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005d7c:	f8d4 b000 	ldr.w	fp, [r4]
 8005d80:	f8c8 2000 	str.w	r2, [r8]
 8005d84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d8c:	9307      	str	r3, [sp, #28]
 8005d8e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d92:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d9a:	4b9c      	ldr	r3, [pc, #624]	@ (800600c <_printf_float+0x2c8>)
 8005d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005da0:	f7fa fec4 	bl	8000b2c <__aeabi_dcmpun>
 8005da4:	bb70      	cbnz	r0, 8005e04 <_printf_float+0xc0>
 8005da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005daa:	4b98      	ldr	r3, [pc, #608]	@ (800600c <_printf_float+0x2c8>)
 8005dac:	f04f 32ff 	mov.w	r2, #4294967295
 8005db0:	f7fa fe9e 	bl	8000af0 <__aeabi_dcmple>
 8005db4:	bb30      	cbnz	r0, 8005e04 <_printf_float+0xc0>
 8005db6:	2200      	movs	r2, #0
 8005db8:	2300      	movs	r3, #0
 8005dba:	4640      	mov	r0, r8
 8005dbc:	4649      	mov	r1, r9
 8005dbe:	f7fa fe8d 	bl	8000adc <__aeabi_dcmplt>
 8005dc2:	b110      	cbz	r0, 8005dca <_printf_float+0x86>
 8005dc4:	232d      	movs	r3, #45	@ 0x2d
 8005dc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dca:	4a91      	ldr	r2, [pc, #580]	@ (8006010 <_printf_float+0x2cc>)
 8005dcc:	4b91      	ldr	r3, [pc, #580]	@ (8006014 <_printf_float+0x2d0>)
 8005dce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005dd2:	bf94      	ite	ls
 8005dd4:	4690      	movls	r8, r2
 8005dd6:	4698      	movhi	r8, r3
 8005dd8:	2303      	movs	r3, #3
 8005dda:	6123      	str	r3, [r4, #16]
 8005ddc:	f02b 0304 	bic.w	r3, fp, #4
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	f04f 0900 	mov.w	r9, #0
 8005de6:	9700      	str	r7, [sp, #0]
 8005de8:	4633      	mov	r3, r6
 8005dea:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005dec:	4621      	mov	r1, r4
 8005dee:	4628      	mov	r0, r5
 8005df0:	f000 f9d2 	bl	8006198 <_printf_common>
 8005df4:	3001      	adds	r0, #1
 8005df6:	f040 808d 	bne.w	8005f14 <_printf_float+0x1d0>
 8005dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfe:	b00d      	add	sp, #52	@ 0x34
 8005e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e04:	4642      	mov	r2, r8
 8005e06:	464b      	mov	r3, r9
 8005e08:	4640      	mov	r0, r8
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	f7fa fe8e 	bl	8000b2c <__aeabi_dcmpun>
 8005e10:	b140      	cbz	r0, 8005e24 <_printf_float+0xe0>
 8005e12:	464b      	mov	r3, r9
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bfbc      	itt	lt
 8005e18:	232d      	movlt	r3, #45	@ 0x2d
 8005e1a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e1e:	4a7e      	ldr	r2, [pc, #504]	@ (8006018 <_printf_float+0x2d4>)
 8005e20:	4b7e      	ldr	r3, [pc, #504]	@ (800601c <_printf_float+0x2d8>)
 8005e22:	e7d4      	b.n	8005dce <_printf_float+0x8a>
 8005e24:	6863      	ldr	r3, [r4, #4]
 8005e26:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005e2a:	9206      	str	r2, [sp, #24]
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	d13b      	bne.n	8005ea8 <_printf_float+0x164>
 8005e30:	2306      	movs	r3, #6
 8005e32:	6063      	str	r3, [r4, #4]
 8005e34:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005e38:	2300      	movs	r3, #0
 8005e3a:	6022      	str	r2, [r4, #0]
 8005e3c:	9303      	str	r3, [sp, #12]
 8005e3e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005e40:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005e44:	ab09      	add	r3, sp, #36	@ 0x24
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	6861      	ldr	r1, [r4, #4]
 8005e4a:	ec49 8b10 	vmov	d0, r8, r9
 8005e4e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005e52:	4628      	mov	r0, r5
 8005e54:	f7ff fed6 	bl	8005c04 <__cvt>
 8005e58:	9b06      	ldr	r3, [sp, #24]
 8005e5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e5c:	2b47      	cmp	r3, #71	@ 0x47
 8005e5e:	4680      	mov	r8, r0
 8005e60:	d129      	bne.n	8005eb6 <_printf_float+0x172>
 8005e62:	1cc8      	adds	r0, r1, #3
 8005e64:	db02      	blt.n	8005e6c <_printf_float+0x128>
 8005e66:	6863      	ldr	r3, [r4, #4]
 8005e68:	4299      	cmp	r1, r3
 8005e6a:	dd41      	ble.n	8005ef0 <_printf_float+0x1ac>
 8005e6c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e70:	fa5f fa8a 	uxtb.w	sl, sl
 8005e74:	3901      	subs	r1, #1
 8005e76:	4652      	mov	r2, sl
 8005e78:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005e7c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e7e:	f7ff ff26 	bl	8005cce <__exponent>
 8005e82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e84:	1813      	adds	r3, r2, r0
 8005e86:	2a01      	cmp	r2, #1
 8005e88:	4681      	mov	r9, r0
 8005e8a:	6123      	str	r3, [r4, #16]
 8005e8c:	dc02      	bgt.n	8005e94 <_printf_float+0x150>
 8005e8e:	6822      	ldr	r2, [r4, #0]
 8005e90:	07d2      	lsls	r2, r2, #31
 8005e92:	d501      	bpl.n	8005e98 <_printf_float+0x154>
 8005e94:	3301      	adds	r3, #1
 8005e96:	6123      	str	r3, [r4, #16]
 8005e98:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0a2      	beq.n	8005de6 <_printf_float+0xa2>
 8005ea0:	232d      	movs	r3, #45	@ 0x2d
 8005ea2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ea6:	e79e      	b.n	8005de6 <_printf_float+0xa2>
 8005ea8:	9a06      	ldr	r2, [sp, #24]
 8005eaa:	2a47      	cmp	r2, #71	@ 0x47
 8005eac:	d1c2      	bne.n	8005e34 <_printf_float+0xf0>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1c0      	bne.n	8005e34 <_printf_float+0xf0>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e7bd      	b.n	8005e32 <_printf_float+0xee>
 8005eb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005eba:	d9db      	bls.n	8005e74 <_printf_float+0x130>
 8005ebc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ec0:	d118      	bne.n	8005ef4 <_printf_float+0x1b0>
 8005ec2:	2900      	cmp	r1, #0
 8005ec4:	6863      	ldr	r3, [r4, #4]
 8005ec6:	dd0b      	ble.n	8005ee0 <_printf_float+0x19c>
 8005ec8:	6121      	str	r1, [r4, #16]
 8005eca:	b913      	cbnz	r3, 8005ed2 <_printf_float+0x18e>
 8005ecc:	6822      	ldr	r2, [r4, #0]
 8005ece:	07d0      	lsls	r0, r2, #31
 8005ed0:	d502      	bpl.n	8005ed8 <_printf_float+0x194>
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	440b      	add	r3, r1
 8005ed6:	6123      	str	r3, [r4, #16]
 8005ed8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005eda:	f04f 0900 	mov.w	r9, #0
 8005ede:	e7db      	b.n	8005e98 <_printf_float+0x154>
 8005ee0:	b913      	cbnz	r3, 8005ee8 <_printf_float+0x1a4>
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	07d2      	lsls	r2, r2, #31
 8005ee6:	d501      	bpl.n	8005eec <_printf_float+0x1a8>
 8005ee8:	3302      	adds	r3, #2
 8005eea:	e7f4      	b.n	8005ed6 <_printf_float+0x192>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e7f2      	b.n	8005ed6 <_printf_float+0x192>
 8005ef0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ef6:	4299      	cmp	r1, r3
 8005ef8:	db05      	blt.n	8005f06 <_printf_float+0x1c2>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	6121      	str	r1, [r4, #16]
 8005efe:	07d8      	lsls	r0, r3, #31
 8005f00:	d5ea      	bpl.n	8005ed8 <_printf_float+0x194>
 8005f02:	1c4b      	adds	r3, r1, #1
 8005f04:	e7e7      	b.n	8005ed6 <_printf_float+0x192>
 8005f06:	2900      	cmp	r1, #0
 8005f08:	bfd4      	ite	le
 8005f0a:	f1c1 0202 	rsble	r2, r1, #2
 8005f0e:	2201      	movgt	r2, #1
 8005f10:	4413      	add	r3, r2
 8005f12:	e7e0      	b.n	8005ed6 <_printf_float+0x192>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	055a      	lsls	r2, r3, #21
 8005f18:	d407      	bmi.n	8005f2a <_printf_float+0x1e6>
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	4631      	mov	r1, r6
 8005f20:	4628      	mov	r0, r5
 8005f22:	47b8      	blx	r7
 8005f24:	3001      	adds	r0, #1
 8005f26:	d12b      	bne.n	8005f80 <_printf_float+0x23c>
 8005f28:	e767      	b.n	8005dfa <_printf_float+0xb6>
 8005f2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f2e:	f240 80dd 	bls.w	80060ec <_printf_float+0x3a8>
 8005f32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f36:	2200      	movs	r2, #0
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f7fa fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d033      	beq.n	8005faa <_printf_float+0x266>
 8005f42:	4a37      	ldr	r2, [pc, #220]	@ (8006020 <_printf_float+0x2dc>)
 8005f44:	2301      	movs	r3, #1
 8005f46:	4631      	mov	r1, r6
 8005f48:	4628      	mov	r0, r5
 8005f4a:	47b8      	blx	r7
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	f43f af54 	beq.w	8005dfa <_printf_float+0xb6>
 8005f52:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005f56:	4543      	cmp	r3, r8
 8005f58:	db02      	blt.n	8005f60 <_printf_float+0x21c>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	07d8      	lsls	r0, r3, #31
 8005f5e:	d50f      	bpl.n	8005f80 <_printf_float+0x23c>
 8005f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f64:	4631      	mov	r1, r6
 8005f66:	4628      	mov	r0, r5
 8005f68:	47b8      	blx	r7
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	f43f af45 	beq.w	8005dfa <_printf_float+0xb6>
 8005f70:	f04f 0900 	mov.w	r9, #0
 8005f74:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f78:	f104 0a1a 	add.w	sl, r4, #26
 8005f7c:	45c8      	cmp	r8, r9
 8005f7e:	dc09      	bgt.n	8005f94 <_printf_float+0x250>
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	079b      	lsls	r3, r3, #30
 8005f84:	f100 8103 	bmi.w	800618e <_printf_float+0x44a>
 8005f88:	68e0      	ldr	r0, [r4, #12]
 8005f8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f8c:	4298      	cmp	r0, r3
 8005f8e:	bfb8      	it	lt
 8005f90:	4618      	movlt	r0, r3
 8005f92:	e734      	b.n	8005dfe <_printf_float+0xba>
 8005f94:	2301      	movs	r3, #1
 8005f96:	4652      	mov	r2, sl
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	f43f af2b 	beq.w	8005dfa <_printf_float+0xb6>
 8005fa4:	f109 0901 	add.w	r9, r9, #1
 8005fa8:	e7e8      	b.n	8005f7c <_printf_float+0x238>
 8005faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	dc39      	bgt.n	8006024 <_printf_float+0x2e0>
 8005fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8006020 <_printf_float+0x2dc>)
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	47b8      	blx	r7
 8005fba:	3001      	adds	r0, #1
 8005fbc:	f43f af1d 	beq.w	8005dfa <_printf_float+0xb6>
 8005fc0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005fc4:	ea59 0303 	orrs.w	r3, r9, r3
 8005fc8:	d102      	bne.n	8005fd0 <_printf_float+0x28c>
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	07d9      	lsls	r1, r3, #31
 8005fce:	d5d7      	bpl.n	8005f80 <_printf_float+0x23c>
 8005fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	47b8      	blx	r7
 8005fda:	3001      	adds	r0, #1
 8005fdc:	f43f af0d 	beq.w	8005dfa <_printf_float+0xb6>
 8005fe0:	f04f 0a00 	mov.w	sl, #0
 8005fe4:	f104 0b1a 	add.w	fp, r4, #26
 8005fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fea:	425b      	negs	r3, r3
 8005fec:	4553      	cmp	r3, sl
 8005fee:	dc01      	bgt.n	8005ff4 <_printf_float+0x2b0>
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	e793      	b.n	8005f1c <_printf_float+0x1d8>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	465a      	mov	r2, fp
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	47b8      	blx	r7
 8005ffe:	3001      	adds	r0, #1
 8006000:	f43f aefb 	beq.w	8005dfa <_printf_float+0xb6>
 8006004:	f10a 0a01 	add.w	sl, sl, #1
 8006008:	e7ee      	b.n	8005fe8 <_printf_float+0x2a4>
 800600a:	bf00      	nop
 800600c:	7fefffff 	.word	0x7fefffff
 8006010:	08009d40 	.word	0x08009d40
 8006014:	08009d44 	.word	0x08009d44
 8006018:	08009d48 	.word	0x08009d48
 800601c:	08009d4c 	.word	0x08009d4c
 8006020:	08009d50 	.word	0x08009d50
 8006024:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006026:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800602a:	4553      	cmp	r3, sl
 800602c:	bfa8      	it	ge
 800602e:	4653      	movge	r3, sl
 8006030:	2b00      	cmp	r3, #0
 8006032:	4699      	mov	r9, r3
 8006034:	dc36      	bgt.n	80060a4 <_printf_float+0x360>
 8006036:	f04f 0b00 	mov.w	fp, #0
 800603a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800603e:	f104 021a 	add.w	r2, r4, #26
 8006042:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006044:	9306      	str	r3, [sp, #24]
 8006046:	eba3 0309 	sub.w	r3, r3, r9
 800604a:	455b      	cmp	r3, fp
 800604c:	dc31      	bgt.n	80060b2 <_printf_float+0x36e>
 800604e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006050:	459a      	cmp	sl, r3
 8006052:	dc3a      	bgt.n	80060ca <_printf_float+0x386>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	07da      	lsls	r2, r3, #31
 8006058:	d437      	bmi.n	80060ca <_printf_float+0x386>
 800605a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800605c:	ebaa 0903 	sub.w	r9, sl, r3
 8006060:	9b06      	ldr	r3, [sp, #24]
 8006062:	ebaa 0303 	sub.w	r3, sl, r3
 8006066:	4599      	cmp	r9, r3
 8006068:	bfa8      	it	ge
 800606a:	4699      	movge	r9, r3
 800606c:	f1b9 0f00 	cmp.w	r9, #0
 8006070:	dc33      	bgt.n	80060da <_printf_float+0x396>
 8006072:	f04f 0800 	mov.w	r8, #0
 8006076:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800607a:	f104 0b1a 	add.w	fp, r4, #26
 800607e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006080:	ebaa 0303 	sub.w	r3, sl, r3
 8006084:	eba3 0309 	sub.w	r3, r3, r9
 8006088:	4543      	cmp	r3, r8
 800608a:	f77f af79 	ble.w	8005f80 <_printf_float+0x23c>
 800608e:	2301      	movs	r3, #1
 8006090:	465a      	mov	r2, fp
 8006092:	4631      	mov	r1, r6
 8006094:	4628      	mov	r0, r5
 8006096:	47b8      	blx	r7
 8006098:	3001      	adds	r0, #1
 800609a:	f43f aeae 	beq.w	8005dfa <_printf_float+0xb6>
 800609e:	f108 0801 	add.w	r8, r8, #1
 80060a2:	e7ec      	b.n	800607e <_printf_float+0x33a>
 80060a4:	4642      	mov	r2, r8
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	47b8      	blx	r7
 80060ac:	3001      	adds	r0, #1
 80060ae:	d1c2      	bne.n	8006036 <_printf_float+0x2f2>
 80060b0:	e6a3      	b.n	8005dfa <_printf_float+0xb6>
 80060b2:	2301      	movs	r3, #1
 80060b4:	4631      	mov	r1, r6
 80060b6:	4628      	mov	r0, r5
 80060b8:	9206      	str	r2, [sp, #24]
 80060ba:	47b8      	blx	r7
 80060bc:	3001      	adds	r0, #1
 80060be:	f43f ae9c 	beq.w	8005dfa <_printf_float+0xb6>
 80060c2:	9a06      	ldr	r2, [sp, #24]
 80060c4:	f10b 0b01 	add.w	fp, fp, #1
 80060c8:	e7bb      	b.n	8006042 <_printf_float+0x2fe>
 80060ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060ce:	4631      	mov	r1, r6
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	d1c0      	bne.n	800605a <_printf_float+0x316>
 80060d8:	e68f      	b.n	8005dfa <_printf_float+0xb6>
 80060da:	9a06      	ldr	r2, [sp, #24]
 80060dc:	464b      	mov	r3, r9
 80060de:	4442      	add	r2, r8
 80060e0:	4631      	mov	r1, r6
 80060e2:	4628      	mov	r0, r5
 80060e4:	47b8      	blx	r7
 80060e6:	3001      	adds	r0, #1
 80060e8:	d1c3      	bne.n	8006072 <_printf_float+0x32e>
 80060ea:	e686      	b.n	8005dfa <_printf_float+0xb6>
 80060ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80060f0:	f1ba 0f01 	cmp.w	sl, #1
 80060f4:	dc01      	bgt.n	80060fa <_printf_float+0x3b6>
 80060f6:	07db      	lsls	r3, r3, #31
 80060f8:	d536      	bpl.n	8006168 <_printf_float+0x424>
 80060fa:	2301      	movs	r3, #1
 80060fc:	4642      	mov	r2, r8
 80060fe:	4631      	mov	r1, r6
 8006100:	4628      	mov	r0, r5
 8006102:	47b8      	blx	r7
 8006104:	3001      	adds	r0, #1
 8006106:	f43f ae78 	beq.w	8005dfa <_printf_float+0xb6>
 800610a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800610e:	4631      	mov	r1, r6
 8006110:	4628      	mov	r0, r5
 8006112:	47b8      	blx	r7
 8006114:	3001      	adds	r0, #1
 8006116:	f43f ae70 	beq.w	8005dfa <_printf_float+0xb6>
 800611a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800611e:	2200      	movs	r2, #0
 8006120:	2300      	movs	r3, #0
 8006122:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006126:	f7fa fccf 	bl	8000ac8 <__aeabi_dcmpeq>
 800612a:	b9c0      	cbnz	r0, 800615e <_printf_float+0x41a>
 800612c:	4653      	mov	r3, sl
 800612e:	f108 0201 	add.w	r2, r8, #1
 8006132:	4631      	mov	r1, r6
 8006134:	4628      	mov	r0, r5
 8006136:	47b8      	blx	r7
 8006138:	3001      	adds	r0, #1
 800613a:	d10c      	bne.n	8006156 <_printf_float+0x412>
 800613c:	e65d      	b.n	8005dfa <_printf_float+0xb6>
 800613e:	2301      	movs	r3, #1
 8006140:	465a      	mov	r2, fp
 8006142:	4631      	mov	r1, r6
 8006144:	4628      	mov	r0, r5
 8006146:	47b8      	blx	r7
 8006148:	3001      	adds	r0, #1
 800614a:	f43f ae56 	beq.w	8005dfa <_printf_float+0xb6>
 800614e:	f108 0801 	add.w	r8, r8, #1
 8006152:	45d0      	cmp	r8, sl
 8006154:	dbf3      	blt.n	800613e <_printf_float+0x3fa>
 8006156:	464b      	mov	r3, r9
 8006158:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800615c:	e6df      	b.n	8005f1e <_printf_float+0x1da>
 800615e:	f04f 0800 	mov.w	r8, #0
 8006162:	f104 0b1a 	add.w	fp, r4, #26
 8006166:	e7f4      	b.n	8006152 <_printf_float+0x40e>
 8006168:	2301      	movs	r3, #1
 800616a:	4642      	mov	r2, r8
 800616c:	e7e1      	b.n	8006132 <_printf_float+0x3ee>
 800616e:	2301      	movs	r3, #1
 8006170:	464a      	mov	r2, r9
 8006172:	4631      	mov	r1, r6
 8006174:	4628      	mov	r0, r5
 8006176:	47b8      	blx	r7
 8006178:	3001      	adds	r0, #1
 800617a:	f43f ae3e 	beq.w	8005dfa <_printf_float+0xb6>
 800617e:	f108 0801 	add.w	r8, r8, #1
 8006182:	68e3      	ldr	r3, [r4, #12]
 8006184:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006186:	1a5b      	subs	r3, r3, r1
 8006188:	4543      	cmp	r3, r8
 800618a:	dcf0      	bgt.n	800616e <_printf_float+0x42a>
 800618c:	e6fc      	b.n	8005f88 <_printf_float+0x244>
 800618e:	f04f 0800 	mov.w	r8, #0
 8006192:	f104 0919 	add.w	r9, r4, #25
 8006196:	e7f4      	b.n	8006182 <_printf_float+0x43e>

08006198 <_printf_common>:
 8006198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800619c:	4616      	mov	r6, r2
 800619e:	4698      	mov	r8, r3
 80061a0:	688a      	ldr	r2, [r1, #8]
 80061a2:	690b      	ldr	r3, [r1, #16]
 80061a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061a8:	4293      	cmp	r3, r2
 80061aa:	bfb8      	it	lt
 80061ac:	4613      	movlt	r3, r2
 80061ae:	6033      	str	r3, [r6, #0]
 80061b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061b4:	4607      	mov	r7, r0
 80061b6:	460c      	mov	r4, r1
 80061b8:	b10a      	cbz	r2, 80061be <_printf_common+0x26>
 80061ba:	3301      	adds	r3, #1
 80061bc:	6033      	str	r3, [r6, #0]
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	0699      	lsls	r1, r3, #26
 80061c2:	bf42      	ittt	mi
 80061c4:	6833      	ldrmi	r3, [r6, #0]
 80061c6:	3302      	addmi	r3, #2
 80061c8:	6033      	strmi	r3, [r6, #0]
 80061ca:	6825      	ldr	r5, [r4, #0]
 80061cc:	f015 0506 	ands.w	r5, r5, #6
 80061d0:	d106      	bne.n	80061e0 <_printf_common+0x48>
 80061d2:	f104 0a19 	add.w	sl, r4, #25
 80061d6:	68e3      	ldr	r3, [r4, #12]
 80061d8:	6832      	ldr	r2, [r6, #0]
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	42ab      	cmp	r3, r5
 80061de:	dc26      	bgt.n	800622e <_printf_common+0x96>
 80061e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061e4:	6822      	ldr	r2, [r4, #0]
 80061e6:	3b00      	subs	r3, #0
 80061e8:	bf18      	it	ne
 80061ea:	2301      	movne	r3, #1
 80061ec:	0692      	lsls	r2, r2, #26
 80061ee:	d42b      	bmi.n	8006248 <_printf_common+0xb0>
 80061f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061f4:	4641      	mov	r1, r8
 80061f6:	4638      	mov	r0, r7
 80061f8:	47c8      	blx	r9
 80061fa:	3001      	adds	r0, #1
 80061fc:	d01e      	beq.n	800623c <_printf_common+0xa4>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	6922      	ldr	r2, [r4, #16]
 8006202:	f003 0306 	and.w	r3, r3, #6
 8006206:	2b04      	cmp	r3, #4
 8006208:	bf02      	ittt	eq
 800620a:	68e5      	ldreq	r5, [r4, #12]
 800620c:	6833      	ldreq	r3, [r6, #0]
 800620e:	1aed      	subeq	r5, r5, r3
 8006210:	68a3      	ldr	r3, [r4, #8]
 8006212:	bf0c      	ite	eq
 8006214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006218:	2500      	movne	r5, #0
 800621a:	4293      	cmp	r3, r2
 800621c:	bfc4      	itt	gt
 800621e:	1a9b      	subgt	r3, r3, r2
 8006220:	18ed      	addgt	r5, r5, r3
 8006222:	2600      	movs	r6, #0
 8006224:	341a      	adds	r4, #26
 8006226:	42b5      	cmp	r5, r6
 8006228:	d11a      	bne.n	8006260 <_printf_common+0xc8>
 800622a:	2000      	movs	r0, #0
 800622c:	e008      	b.n	8006240 <_printf_common+0xa8>
 800622e:	2301      	movs	r3, #1
 8006230:	4652      	mov	r2, sl
 8006232:	4641      	mov	r1, r8
 8006234:	4638      	mov	r0, r7
 8006236:	47c8      	blx	r9
 8006238:	3001      	adds	r0, #1
 800623a:	d103      	bne.n	8006244 <_printf_common+0xac>
 800623c:	f04f 30ff 	mov.w	r0, #4294967295
 8006240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006244:	3501      	adds	r5, #1
 8006246:	e7c6      	b.n	80061d6 <_printf_common+0x3e>
 8006248:	18e1      	adds	r1, r4, r3
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	2030      	movs	r0, #48	@ 0x30
 800624e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006252:	4422      	add	r2, r4
 8006254:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006258:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800625c:	3302      	adds	r3, #2
 800625e:	e7c7      	b.n	80061f0 <_printf_common+0x58>
 8006260:	2301      	movs	r3, #1
 8006262:	4622      	mov	r2, r4
 8006264:	4641      	mov	r1, r8
 8006266:	4638      	mov	r0, r7
 8006268:	47c8      	blx	r9
 800626a:	3001      	adds	r0, #1
 800626c:	d0e6      	beq.n	800623c <_printf_common+0xa4>
 800626e:	3601      	adds	r6, #1
 8006270:	e7d9      	b.n	8006226 <_printf_common+0x8e>
	...

08006274 <_printf_i>:
 8006274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006278:	7e0f      	ldrb	r7, [r1, #24]
 800627a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800627c:	2f78      	cmp	r7, #120	@ 0x78
 800627e:	4691      	mov	r9, r2
 8006280:	4680      	mov	r8, r0
 8006282:	460c      	mov	r4, r1
 8006284:	469a      	mov	sl, r3
 8006286:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800628a:	d807      	bhi.n	800629c <_printf_i+0x28>
 800628c:	2f62      	cmp	r7, #98	@ 0x62
 800628e:	d80a      	bhi.n	80062a6 <_printf_i+0x32>
 8006290:	2f00      	cmp	r7, #0
 8006292:	f000 80d2 	beq.w	800643a <_printf_i+0x1c6>
 8006296:	2f58      	cmp	r7, #88	@ 0x58
 8006298:	f000 80b9 	beq.w	800640e <_printf_i+0x19a>
 800629c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062a4:	e03a      	b.n	800631c <_printf_i+0xa8>
 80062a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062aa:	2b15      	cmp	r3, #21
 80062ac:	d8f6      	bhi.n	800629c <_printf_i+0x28>
 80062ae:	a101      	add	r1, pc, #4	@ (adr r1, 80062b4 <_printf_i+0x40>)
 80062b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062b4:	0800630d 	.word	0x0800630d
 80062b8:	08006321 	.word	0x08006321
 80062bc:	0800629d 	.word	0x0800629d
 80062c0:	0800629d 	.word	0x0800629d
 80062c4:	0800629d 	.word	0x0800629d
 80062c8:	0800629d 	.word	0x0800629d
 80062cc:	08006321 	.word	0x08006321
 80062d0:	0800629d 	.word	0x0800629d
 80062d4:	0800629d 	.word	0x0800629d
 80062d8:	0800629d 	.word	0x0800629d
 80062dc:	0800629d 	.word	0x0800629d
 80062e0:	08006421 	.word	0x08006421
 80062e4:	0800634b 	.word	0x0800634b
 80062e8:	080063db 	.word	0x080063db
 80062ec:	0800629d 	.word	0x0800629d
 80062f0:	0800629d 	.word	0x0800629d
 80062f4:	08006443 	.word	0x08006443
 80062f8:	0800629d 	.word	0x0800629d
 80062fc:	0800634b 	.word	0x0800634b
 8006300:	0800629d 	.word	0x0800629d
 8006304:	0800629d 	.word	0x0800629d
 8006308:	080063e3 	.word	0x080063e3
 800630c:	6833      	ldr	r3, [r6, #0]
 800630e:	1d1a      	adds	r2, r3, #4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6032      	str	r2, [r6, #0]
 8006314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006318:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800631c:	2301      	movs	r3, #1
 800631e:	e09d      	b.n	800645c <_printf_i+0x1e8>
 8006320:	6833      	ldr	r3, [r6, #0]
 8006322:	6820      	ldr	r0, [r4, #0]
 8006324:	1d19      	adds	r1, r3, #4
 8006326:	6031      	str	r1, [r6, #0]
 8006328:	0606      	lsls	r6, r0, #24
 800632a:	d501      	bpl.n	8006330 <_printf_i+0xbc>
 800632c:	681d      	ldr	r5, [r3, #0]
 800632e:	e003      	b.n	8006338 <_printf_i+0xc4>
 8006330:	0645      	lsls	r5, r0, #25
 8006332:	d5fb      	bpl.n	800632c <_printf_i+0xb8>
 8006334:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006338:	2d00      	cmp	r5, #0
 800633a:	da03      	bge.n	8006344 <_printf_i+0xd0>
 800633c:	232d      	movs	r3, #45	@ 0x2d
 800633e:	426d      	negs	r5, r5
 8006340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006344:	4859      	ldr	r0, [pc, #356]	@ (80064ac <_printf_i+0x238>)
 8006346:	230a      	movs	r3, #10
 8006348:	e011      	b.n	800636e <_printf_i+0xfa>
 800634a:	6821      	ldr	r1, [r4, #0]
 800634c:	6833      	ldr	r3, [r6, #0]
 800634e:	0608      	lsls	r0, r1, #24
 8006350:	f853 5b04 	ldr.w	r5, [r3], #4
 8006354:	d402      	bmi.n	800635c <_printf_i+0xe8>
 8006356:	0649      	lsls	r1, r1, #25
 8006358:	bf48      	it	mi
 800635a:	b2ad      	uxthmi	r5, r5
 800635c:	2f6f      	cmp	r7, #111	@ 0x6f
 800635e:	4853      	ldr	r0, [pc, #332]	@ (80064ac <_printf_i+0x238>)
 8006360:	6033      	str	r3, [r6, #0]
 8006362:	bf14      	ite	ne
 8006364:	230a      	movne	r3, #10
 8006366:	2308      	moveq	r3, #8
 8006368:	2100      	movs	r1, #0
 800636a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800636e:	6866      	ldr	r6, [r4, #4]
 8006370:	60a6      	str	r6, [r4, #8]
 8006372:	2e00      	cmp	r6, #0
 8006374:	bfa2      	ittt	ge
 8006376:	6821      	ldrge	r1, [r4, #0]
 8006378:	f021 0104 	bicge.w	r1, r1, #4
 800637c:	6021      	strge	r1, [r4, #0]
 800637e:	b90d      	cbnz	r5, 8006384 <_printf_i+0x110>
 8006380:	2e00      	cmp	r6, #0
 8006382:	d04b      	beq.n	800641c <_printf_i+0x1a8>
 8006384:	4616      	mov	r6, r2
 8006386:	fbb5 f1f3 	udiv	r1, r5, r3
 800638a:	fb03 5711 	mls	r7, r3, r1, r5
 800638e:	5dc7      	ldrb	r7, [r0, r7]
 8006390:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006394:	462f      	mov	r7, r5
 8006396:	42bb      	cmp	r3, r7
 8006398:	460d      	mov	r5, r1
 800639a:	d9f4      	bls.n	8006386 <_printf_i+0x112>
 800639c:	2b08      	cmp	r3, #8
 800639e:	d10b      	bne.n	80063b8 <_printf_i+0x144>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	07df      	lsls	r7, r3, #31
 80063a4:	d508      	bpl.n	80063b8 <_printf_i+0x144>
 80063a6:	6923      	ldr	r3, [r4, #16]
 80063a8:	6861      	ldr	r1, [r4, #4]
 80063aa:	4299      	cmp	r1, r3
 80063ac:	bfde      	ittt	le
 80063ae:	2330      	movle	r3, #48	@ 0x30
 80063b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063b8:	1b92      	subs	r2, r2, r6
 80063ba:	6122      	str	r2, [r4, #16]
 80063bc:	f8cd a000 	str.w	sl, [sp]
 80063c0:	464b      	mov	r3, r9
 80063c2:	aa03      	add	r2, sp, #12
 80063c4:	4621      	mov	r1, r4
 80063c6:	4640      	mov	r0, r8
 80063c8:	f7ff fee6 	bl	8006198 <_printf_common>
 80063cc:	3001      	adds	r0, #1
 80063ce:	d14a      	bne.n	8006466 <_printf_i+0x1f2>
 80063d0:	f04f 30ff 	mov.w	r0, #4294967295
 80063d4:	b004      	add	sp, #16
 80063d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	f043 0320 	orr.w	r3, r3, #32
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	4833      	ldr	r0, [pc, #204]	@ (80064b0 <_printf_i+0x23c>)
 80063e4:	2778      	movs	r7, #120	@ 0x78
 80063e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	6831      	ldr	r1, [r6, #0]
 80063ee:	061f      	lsls	r7, r3, #24
 80063f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80063f4:	d402      	bmi.n	80063fc <_printf_i+0x188>
 80063f6:	065f      	lsls	r7, r3, #25
 80063f8:	bf48      	it	mi
 80063fa:	b2ad      	uxthmi	r5, r5
 80063fc:	6031      	str	r1, [r6, #0]
 80063fe:	07d9      	lsls	r1, r3, #31
 8006400:	bf44      	itt	mi
 8006402:	f043 0320 	orrmi.w	r3, r3, #32
 8006406:	6023      	strmi	r3, [r4, #0]
 8006408:	b11d      	cbz	r5, 8006412 <_printf_i+0x19e>
 800640a:	2310      	movs	r3, #16
 800640c:	e7ac      	b.n	8006368 <_printf_i+0xf4>
 800640e:	4827      	ldr	r0, [pc, #156]	@ (80064ac <_printf_i+0x238>)
 8006410:	e7e9      	b.n	80063e6 <_printf_i+0x172>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	f023 0320 	bic.w	r3, r3, #32
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	e7f6      	b.n	800640a <_printf_i+0x196>
 800641c:	4616      	mov	r6, r2
 800641e:	e7bd      	b.n	800639c <_printf_i+0x128>
 8006420:	6833      	ldr	r3, [r6, #0]
 8006422:	6825      	ldr	r5, [r4, #0]
 8006424:	6961      	ldr	r1, [r4, #20]
 8006426:	1d18      	adds	r0, r3, #4
 8006428:	6030      	str	r0, [r6, #0]
 800642a:	062e      	lsls	r6, r5, #24
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	d501      	bpl.n	8006434 <_printf_i+0x1c0>
 8006430:	6019      	str	r1, [r3, #0]
 8006432:	e002      	b.n	800643a <_printf_i+0x1c6>
 8006434:	0668      	lsls	r0, r5, #25
 8006436:	d5fb      	bpl.n	8006430 <_printf_i+0x1bc>
 8006438:	8019      	strh	r1, [r3, #0]
 800643a:	2300      	movs	r3, #0
 800643c:	6123      	str	r3, [r4, #16]
 800643e:	4616      	mov	r6, r2
 8006440:	e7bc      	b.n	80063bc <_printf_i+0x148>
 8006442:	6833      	ldr	r3, [r6, #0]
 8006444:	1d1a      	adds	r2, r3, #4
 8006446:	6032      	str	r2, [r6, #0]
 8006448:	681e      	ldr	r6, [r3, #0]
 800644a:	6862      	ldr	r2, [r4, #4]
 800644c:	2100      	movs	r1, #0
 800644e:	4630      	mov	r0, r6
 8006450:	f7f9 febe 	bl	80001d0 <memchr>
 8006454:	b108      	cbz	r0, 800645a <_printf_i+0x1e6>
 8006456:	1b80      	subs	r0, r0, r6
 8006458:	6060      	str	r0, [r4, #4]
 800645a:	6863      	ldr	r3, [r4, #4]
 800645c:	6123      	str	r3, [r4, #16]
 800645e:	2300      	movs	r3, #0
 8006460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006464:	e7aa      	b.n	80063bc <_printf_i+0x148>
 8006466:	6923      	ldr	r3, [r4, #16]
 8006468:	4632      	mov	r2, r6
 800646a:	4649      	mov	r1, r9
 800646c:	4640      	mov	r0, r8
 800646e:	47d0      	blx	sl
 8006470:	3001      	adds	r0, #1
 8006472:	d0ad      	beq.n	80063d0 <_printf_i+0x15c>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	079b      	lsls	r3, r3, #30
 8006478:	d413      	bmi.n	80064a2 <_printf_i+0x22e>
 800647a:	68e0      	ldr	r0, [r4, #12]
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	4298      	cmp	r0, r3
 8006480:	bfb8      	it	lt
 8006482:	4618      	movlt	r0, r3
 8006484:	e7a6      	b.n	80063d4 <_printf_i+0x160>
 8006486:	2301      	movs	r3, #1
 8006488:	4632      	mov	r2, r6
 800648a:	4649      	mov	r1, r9
 800648c:	4640      	mov	r0, r8
 800648e:	47d0      	blx	sl
 8006490:	3001      	adds	r0, #1
 8006492:	d09d      	beq.n	80063d0 <_printf_i+0x15c>
 8006494:	3501      	adds	r5, #1
 8006496:	68e3      	ldr	r3, [r4, #12]
 8006498:	9903      	ldr	r1, [sp, #12]
 800649a:	1a5b      	subs	r3, r3, r1
 800649c:	42ab      	cmp	r3, r5
 800649e:	dcf2      	bgt.n	8006486 <_printf_i+0x212>
 80064a0:	e7eb      	b.n	800647a <_printf_i+0x206>
 80064a2:	2500      	movs	r5, #0
 80064a4:	f104 0619 	add.w	r6, r4, #25
 80064a8:	e7f5      	b.n	8006496 <_printf_i+0x222>
 80064aa:	bf00      	nop
 80064ac:	08009d52 	.word	0x08009d52
 80064b0:	08009d63 	.word	0x08009d63

080064b4 <std>:
 80064b4:	2300      	movs	r3, #0
 80064b6:	b510      	push	{r4, lr}
 80064b8:	4604      	mov	r4, r0
 80064ba:	e9c0 3300 	strd	r3, r3, [r0]
 80064be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064c2:	6083      	str	r3, [r0, #8]
 80064c4:	8181      	strh	r1, [r0, #12]
 80064c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80064c8:	81c2      	strh	r2, [r0, #14]
 80064ca:	6183      	str	r3, [r0, #24]
 80064cc:	4619      	mov	r1, r3
 80064ce:	2208      	movs	r2, #8
 80064d0:	305c      	adds	r0, #92	@ 0x5c
 80064d2:	f000 f928 	bl	8006726 <memset>
 80064d6:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <std+0x58>)
 80064d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80064da:	4b0d      	ldr	r3, [pc, #52]	@ (8006510 <std+0x5c>)
 80064dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064de:	4b0d      	ldr	r3, [pc, #52]	@ (8006514 <std+0x60>)
 80064e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006518 <std+0x64>)
 80064e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80064e6:	4b0d      	ldr	r3, [pc, #52]	@ (800651c <std+0x68>)
 80064e8:	6224      	str	r4, [r4, #32]
 80064ea:	429c      	cmp	r4, r3
 80064ec:	d006      	beq.n	80064fc <std+0x48>
 80064ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064f2:	4294      	cmp	r4, r2
 80064f4:	d002      	beq.n	80064fc <std+0x48>
 80064f6:	33d0      	adds	r3, #208	@ 0xd0
 80064f8:	429c      	cmp	r4, r3
 80064fa:	d105      	bne.n	8006508 <std+0x54>
 80064fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006504:	f000 b98c 	b.w	8006820 <__retarget_lock_init_recursive>
 8006508:	bd10      	pop	{r4, pc}
 800650a:	bf00      	nop
 800650c:	080066a1 	.word	0x080066a1
 8006510:	080066c3 	.word	0x080066c3
 8006514:	080066fb 	.word	0x080066fb
 8006518:	0800671f 	.word	0x0800671f
 800651c:	200003ec 	.word	0x200003ec

08006520 <stdio_exit_handler>:
 8006520:	4a02      	ldr	r2, [pc, #8]	@ (800652c <stdio_exit_handler+0xc>)
 8006522:	4903      	ldr	r1, [pc, #12]	@ (8006530 <stdio_exit_handler+0x10>)
 8006524:	4803      	ldr	r0, [pc, #12]	@ (8006534 <stdio_exit_handler+0x14>)
 8006526:	f000 b869 	b.w	80065fc <_fwalk_sglue>
 800652a:	bf00      	nop
 800652c:	20000018 	.word	0x20000018
 8006530:	0800817d 	.word	0x0800817d
 8006534:	20000028 	.word	0x20000028

08006538 <cleanup_stdio>:
 8006538:	6841      	ldr	r1, [r0, #4]
 800653a:	4b0c      	ldr	r3, [pc, #48]	@ (800656c <cleanup_stdio+0x34>)
 800653c:	4299      	cmp	r1, r3
 800653e:	b510      	push	{r4, lr}
 8006540:	4604      	mov	r4, r0
 8006542:	d001      	beq.n	8006548 <cleanup_stdio+0x10>
 8006544:	f001 fe1a 	bl	800817c <_fflush_r>
 8006548:	68a1      	ldr	r1, [r4, #8]
 800654a:	4b09      	ldr	r3, [pc, #36]	@ (8006570 <cleanup_stdio+0x38>)
 800654c:	4299      	cmp	r1, r3
 800654e:	d002      	beq.n	8006556 <cleanup_stdio+0x1e>
 8006550:	4620      	mov	r0, r4
 8006552:	f001 fe13 	bl	800817c <_fflush_r>
 8006556:	68e1      	ldr	r1, [r4, #12]
 8006558:	4b06      	ldr	r3, [pc, #24]	@ (8006574 <cleanup_stdio+0x3c>)
 800655a:	4299      	cmp	r1, r3
 800655c:	d004      	beq.n	8006568 <cleanup_stdio+0x30>
 800655e:	4620      	mov	r0, r4
 8006560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006564:	f001 be0a 	b.w	800817c <_fflush_r>
 8006568:	bd10      	pop	{r4, pc}
 800656a:	bf00      	nop
 800656c:	200003ec 	.word	0x200003ec
 8006570:	20000454 	.word	0x20000454
 8006574:	200004bc 	.word	0x200004bc

08006578 <global_stdio_init.part.0>:
 8006578:	b510      	push	{r4, lr}
 800657a:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <global_stdio_init.part.0+0x30>)
 800657c:	4c0b      	ldr	r4, [pc, #44]	@ (80065ac <global_stdio_init.part.0+0x34>)
 800657e:	4a0c      	ldr	r2, [pc, #48]	@ (80065b0 <global_stdio_init.part.0+0x38>)
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	4620      	mov	r0, r4
 8006584:	2200      	movs	r2, #0
 8006586:	2104      	movs	r1, #4
 8006588:	f7ff ff94 	bl	80064b4 <std>
 800658c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006590:	2201      	movs	r2, #1
 8006592:	2109      	movs	r1, #9
 8006594:	f7ff ff8e 	bl	80064b4 <std>
 8006598:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800659c:	2202      	movs	r2, #2
 800659e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a2:	2112      	movs	r1, #18
 80065a4:	f7ff bf86 	b.w	80064b4 <std>
 80065a8:	20000524 	.word	0x20000524
 80065ac:	200003ec 	.word	0x200003ec
 80065b0:	08006521 	.word	0x08006521

080065b4 <__sfp_lock_acquire>:
 80065b4:	4801      	ldr	r0, [pc, #4]	@ (80065bc <__sfp_lock_acquire+0x8>)
 80065b6:	f000 b934 	b.w	8006822 <__retarget_lock_acquire_recursive>
 80065ba:	bf00      	nop
 80065bc:	2000052d 	.word	0x2000052d

080065c0 <__sfp_lock_release>:
 80065c0:	4801      	ldr	r0, [pc, #4]	@ (80065c8 <__sfp_lock_release+0x8>)
 80065c2:	f000 b92f 	b.w	8006824 <__retarget_lock_release_recursive>
 80065c6:	bf00      	nop
 80065c8:	2000052d 	.word	0x2000052d

080065cc <__sinit>:
 80065cc:	b510      	push	{r4, lr}
 80065ce:	4604      	mov	r4, r0
 80065d0:	f7ff fff0 	bl	80065b4 <__sfp_lock_acquire>
 80065d4:	6a23      	ldr	r3, [r4, #32]
 80065d6:	b11b      	cbz	r3, 80065e0 <__sinit+0x14>
 80065d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065dc:	f7ff bff0 	b.w	80065c0 <__sfp_lock_release>
 80065e0:	4b04      	ldr	r3, [pc, #16]	@ (80065f4 <__sinit+0x28>)
 80065e2:	6223      	str	r3, [r4, #32]
 80065e4:	4b04      	ldr	r3, [pc, #16]	@ (80065f8 <__sinit+0x2c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f5      	bne.n	80065d8 <__sinit+0xc>
 80065ec:	f7ff ffc4 	bl	8006578 <global_stdio_init.part.0>
 80065f0:	e7f2      	b.n	80065d8 <__sinit+0xc>
 80065f2:	bf00      	nop
 80065f4:	08006539 	.word	0x08006539
 80065f8:	20000524 	.word	0x20000524

080065fc <_fwalk_sglue>:
 80065fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006600:	4607      	mov	r7, r0
 8006602:	4688      	mov	r8, r1
 8006604:	4614      	mov	r4, r2
 8006606:	2600      	movs	r6, #0
 8006608:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800660c:	f1b9 0901 	subs.w	r9, r9, #1
 8006610:	d505      	bpl.n	800661e <_fwalk_sglue+0x22>
 8006612:	6824      	ldr	r4, [r4, #0]
 8006614:	2c00      	cmp	r4, #0
 8006616:	d1f7      	bne.n	8006608 <_fwalk_sglue+0xc>
 8006618:	4630      	mov	r0, r6
 800661a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800661e:	89ab      	ldrh	r3, [r5, #12]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d907      	bls.n	8006634 <_fwalk_sglue+0x38>
 8006624:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006628:	3301      	adds	r3, #1
 800662a:	d003      	beq.n	8006634 <_fwalk_sglue+0x38>
 800662c:	4629      	mov	r1, r5
 800662e:	4638      	mov	r0, r7
 8006630:	47c0      	blx	r8
 8006632:	4306      	orrs	r6, r0
 8006634:	3568      	adds	r5, #104	@ 0x68
 8006636:	e7e9      	b.n	800660c <_fwalk_sglue+0x10>

08006638 <sniprintf>:
 8006638:	b40c      	push	{r2, r3}
 800663a:	b530      	push	{r4, r5, lr}
 800663c:	4b17      	ldr	r3, [pc, #92]	@ (800669c <sniprintf+0x64>)
 800663e:	1e0c      	subs	r4, r1, #0
 8006640:	681d      	ldr	r5, [r3, #0]
 8006642:	b09d      	sub	sp, #116	@ 0x74
 8006644:	da08      	bge.n	8006658 <sniprintf+0x20>
 8006646:	238b      	movs	r3, #139	@ 0x8b
 8006648:	602b      	str	r3, [r5, #0]
 800664a:	f04f 30ff 	mov.w	r0, #4294967295
 800664e:	b01d      	add	sp, #116	@ 0x74
 8006650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006654:	b002      	add	sp, #8
 8006656:	4770      	bx	lr
 8006658:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800665c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006660:	bf14      	ite	ne
 8006662:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006666:	4623      	moveq	r3, r4
 8006668:	9304      	str	r3, [sp, #16]
 800666a:	9307      	str	r3, [sp, #28]
 800666c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006670:	9002      	str	r0, [sp, #8]
 8006672:	9006      	str	r0, [sp, #24]
 8006674:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006678:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800667a:	ab21      	add	r3, sp, #132	@ 0x84
 800667c:	a902      	add	r1, sp, #8
 800667e:	4628      	mov	r0, r5
 8006680:	9301      	str	r3, [sp, #4]
 8006682:	f001 fbfb 	bl	8007e7c <_svfiprintf_r>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	bfbc      	itt	lt
 800668a:	238b      	movlt	r3, #139	@ 0x8b
 800668c:	602b      	strlt	r3, [r5, #0]
 800668e:	2c00      	cmp	r4, #0
 8006690:	d0dd      	beq.n	800664e <sniprintf+0x16>
 8006692:	9b02      	ldr	r3, [sp, #8]
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e7d9      	b.n	800664e <sniprintf+0x16>
 800669a:	bf00      	nop
 800669c:	20000024 	.word	0x20000024

080066a0 <__sread>:
 80066a0:	b510      	push	{r4, lr}
 80066a2:	460c      	mov	r4, r1
 80066a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a8:	f000 f86c 	bl	8006784 <_read_r>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	bfab      	itete	ge
 80066b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80066b2:	89a3      	ldrhlt	r3, [r4, #12]
 80066b4:	181b      	addge	r3, r3, r0
 80066b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066ba:	bfac      	ite	ge
 80066bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066be:	81a3      	strhlt	r3, [r4, #12]
 80066c0:	bd10      	pop	{r4, pc}

080066c2 <__swrite>:
 80066c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c6:	461f      	mov	r7, r3
 80066c8:	898b      	ldrh	r3, [r1, #12]
 80066ca:	05db      	lsls	r3, r3, #23
 80066cc:	4605      	mov	r5, r0
 80066ce:	460c      	mov	r4, r1
 80066d0:	4616      	mov	r6, r2
 80066d2:	d505      	bpl.n	80066e0 <__swrite+0x1e>
 80066d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d8:	2302      	movs	r3, #2
 80066da:	2200      	movs	r2, #0
 80066dc:	f000 f840 	bl	8006760 <_lseek_r>
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	4632      	mov	r2, r6
 80066ee:	463b      	mov	r3, r7
 80066f0:	4628      	mov	r0, r5
 80066f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066f6:	f000 b857 	b.w	80067a8 <_write_r>

080066fa <__sseek>:
 80066fa:	b510      	push	{r4, lr}
 80066fc:	460c      	mov	r4, r1
 80066fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006702:	f000 f82d 	bl	8006760 <_lseek_r>
 8006706:	1c43      	adds	r3, r0, #1
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	bf15      	itete	ne
 800670c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800670e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006712:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006716:	81a3      	strheq	r3, [r4, #12]
 8006718:	bf18      	it	ne
 800671a:	81a3      	strhne	r3, [r4, #12]
 800671c:	bd10      	pop	{r4, pc}

0800671e <__sclose>:
 800671e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006722:	f000 b80d 	b.w	8006740 <_close_r>

08006726 <memset>:
 8006726:	4402      	add	r2, r0
 8006728:	4603      	mov	r3, r0
 800672a:	4293      	cmp	r3, r2
 800672c:	d100      	bne.n	8006730 <memset+0xa>
 800672e:	4770      	bx	lr
 8006730:	f803 1b01 	strb.w	r1, [r3], #1
 8006734:	e7f9      	b.n	800672a <memset+0x4>
	...

08006738 <_localeconv_r>:
 8006738:	4800      	ldr	r0, [pc, #0]	@ (800673c <_localeconv_r+0x4>)
 800673a:	4770      	bx	lr
 800673c:	20000164 	.word	0x20000164

08006740 <_close_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4d06      	ldr	r5, [pc, #24]	@ (800675c <_close_r+0x1c>)
 8006744:	2300      	movs	r3, #0
 8006746:	4604      	mov	r4, r0
 8006748:	4608      	mov	r0, r1
 800674a:	602b      	str	r3, [r5, #0]
 800674c:	f7fb ff09 	bl	8002562 <_close>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_close_r+0x1a>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_close_r+0x1a>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	20000528 	.word	0x20000528

08006760 <_lseek_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d07      	ldr	r5, [pc, #28]	@ (8006780 <_lseek_r+0x20>)
 8006764:	4604      	mov	r4, r0
 8006766:	4608      	mov	r0, r1
 8006768:	4611      	mov	r1, r2
 800676a:	2200      	movs	r2, #0
 800676c:	602a      	str	r2, [r5, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	f7fb ff1e 	bl	80025b0 <_lseek>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d102      	bne.n	800677e <_lseek_r+0x1e>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	b103      	cbz	r3, 800677e <_lseek_r+0x1e>
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	20000528 	.word	0x20000528

08006784 <_read_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4d07      	ldr	r5, [pc, #28]	@ (80067a4 <_read_r+0x20>)
 8006788:	4604      	mov	r4, r0
 800678a:	4608      	mov	r0, r1
 800678c:	4611      	mov	r1, r2
 800678e:	2200      	movs	r2, #0
 8006790:	602a      	str	r2, [r5, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	f7fb feac 	bl	80024f0 <_read>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d102      	bne.n	80067a2 <_read_r+0x1e>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	b103      	cbz	r3, 80067a2 <_read_r+0x1e>
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	20000528 	.word	0x20000528

080067a8 <_write_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4d07      	ldr	r5, [pc, #28]	@ (80067c8 <_write_r+0x20>)
 80067ac:	4604      	mov	r4, r0
 80067ae:	4608      	mov	r0, r1
 80067b0:	4611      	mov	r1, r2
 80067b2:	2200      	movs	r2, #0
 80067b4:	602a      	str	r2, [r5, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f7fb feb7 	bl	800252a <_write>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_write_r+0x1e>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_write_r+0x1e>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	20000528 	.word	0x20000528

080067cc <__errno>:
 80067cc:	4b01      	ldr	r3, [pc, #4]	@ (80067d4 <__errno+0x8>)
 80067ce:	6818      	ldr	r0, [r3, #0]
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20000024 	.word	0x20000024

080067d8 <__libc_init_array>:
 80067d8:	b570      	push	{r4, r5, r6, lr}
 80067da:	4d0d      	ldr	r5, [pc, #52]	@ (8006810 <__libc_init_array+0x38>)
 80067dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006814 <__libc_init_array+0x3c>)
 80067de:	1b64      	subs	r4, r4, r5
 80067e0:	10a4      	asrs	r4, r4, #2
 80067e2:	2600      	movs	r6, #0
 80067e4:	42a6      	cmp	r6, r4
 80067e6:	d109      	bne.n	80067fc <__libc_init_array+0x24>
 80067e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006818 <__libc_init_array+0x40>)
 80067ea:	4c0c      	ldr	r4, [pc, #48]	@ (800681c <__libc_init_array+0x44>)
 80067ec:	f003 fa4e 	bl	8009c8c <_init>
 80067f0:	1b64      	subs	r4, r4, r5
 80067f2:	10a4      	asrs	r4, r4, #2
 80067f4:	2600      	movs	r6, #0
 80067f6:	42a6      	cmp	r6, r4
 80067f8:	d105      	bne.n	8006806 <__libc_init_array+0x2e>
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
 80067fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006800:	4798      	blx	r3
 8006802:	3601      	adds	r6, #1
 8006804:	e7ee      	b.n	80067e4 <__libc_init_array+0xc>
 8006806:	f855 3b04 	ldr.w	r3, [r5], #4
 800680a:	4798      	blx	r3
 800680c:	3601      	adds	r6, #1
 800680e:	e7f2      	b.n	80067f6 <__libc_init_array+0x1e>
 8006810:	0800a0e8 	.word	0x0800a0e8
 8006814:	0800a0e8 	.word	0x0800a0e8
 8006818:	0800a0e8 	.word	0x0800a0e8
 800681c:	0800a0ec 	.word	0x0800a0ec

08006820 <__retarget_lock_init_recursive>:
 8006820:	4770      	bx	lr

08006822 <__retarget_lock_acquire_recursive>:
 8006822:	4770      	bx	lr

08006824 <__retarget_lock_release_recursive>:
 8006824:	4770      	bx	lr

08006826 <quorem>:
 8006826:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	6903      	ldr	r3, [r0, #16]
 800682c:	690c      	ldr	r4, [r1, #16]
 800682e:	42a3      	cmp	r3, r4
 8006830:	4607      	mov	r7, r0
 8006832:	db7e      	blt.n	8006932 <quorem+0x10c>
 8006834:	3c01      	subs	r4, #1
 8006836:	f101 0814 	add.w	r8, r1, #20
 800683a:	00a3      	lsls	r3, r4, #2
 800683c:	f100 0514 	add.w	r5, r0, #20
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800684c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006850:	3301      	adds	r3, #1
 8006852:	429a      	cmp	r2, r3
 8006854:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006858:	fbb2 f6f3 	udiv	r6, r2, r3
 800685c:	d32e      	bcc.n	80068bc <quorem+0x96>
 800685e:	f04f 0a00 	mov.w	sl, #0
 8006862:	46c4      	mov	ip, r8
 8006864:	46ae      	mov	lr, r5
 8006866:	46d3      	mov	fp, sl
 8006868:	f85c 3b04 	ldr.w	r3, [ip], #4
 800686c:	b298      	uxth	r0, r3
 800686e:	fb06 a000 	mla	r0, r6, r0, sl
 8006872:	0c02      	lsrs	r2, r0, #16
 8006874:	0c1b      	lsrs	r3, r3, #16
 8006876:	fb06 2303 	mla	r3, r6, r3, r2
 800687a:	f8de 2000 	ldr.w	r2, [lr]
 800687e:	b280      	uxth	r0, r0
 8006880:	b292      	uxth	r2, r2
 8006882:	1a12      	subs	r2, r2, r0
 8006884:	445a      	add	r2, fp
 8006886:	f8de 0000 	ldr.w	r0, [lr]
 800688a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800688e:	b29b      	uxth	r3, r3
 8006890:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006894:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006898:	b292      	uxth	r2, r2
 800689a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800689e:	45e1      	cmp	r9, ip
 80068a0:	f84e 2b04 	str.w	r2, [lr], #4
 80068a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80068a8:	d2de      	bcs.n	8006868 <quorem+0x42>
 80068aa:	9b00      	ldr	r3, [sp, #0]
 80068ac:	58eb      	ldr	r3, [r5, r3]
 80068ae:	b92b      	cbnz	r3, 80068bc <quorem+0x96>
 80068b0:	9b01      	ldr	r3, [sp, #4]
 80068b2:	3b04      	subs	r3, #4
 80068b4:	429d      	cmp	r5, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	d32f      	bcc.n	800691a <quorem+0xf4>
 80068ba:	613c      	str	r4, [r7, #16]
 80068bc:	4638      	mov	r0, r7
 80068be:	f001 f979 	bl	8007bb4 <__mcmp>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	db25      	blt.n	8006912 <quorem+0xec>
 80068c6:	4629      	mov	r1, r5
 80068c8:	2000      	movs	r0, #0
 80068ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80068ce:	f8d1 c000 	ldr.w	ip, [r1]
 80068d2:	fa1f fe82 	uxth.w	lr, r2
 80068d6:	fa1f f38c 	uxth.w	r3, ip
 80068da:	eba3 030e 	sub.w	r3, r3, lr
 80068de:	4403      	add	r3, r0
 80068e0:	0c12      	lsrs	r2, r2, #16
 80068e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80068e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068f0:	45c1      	cmp	r9, r8
 80068f2:	f841 3b04 	str.w	r3, [r1], #4
 80068f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068fa:	d2e6      	bcs.n	80068ca <quorem+0xa4>
 80068fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006904:	b922      	cbnz	r2, 8006910 <quorem+0xea>
 8006906:	3b04      	subs	r3, #4
 8006908:	429d      	cmp	r5, r3
 800690a:	461a      	mov	r2, r3
 800690c:	d30b      	bcc.n	8006926 <quorem+0x100>
 800690e:	613c      	str	r4, [r7, #16]
 8006910:	3601      	adds	r6, #1
 8006912:	4630      	mov	r0, r6
 8006914:	b003      	add	sp, #12
 8006916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691a:	6812      	ldr	r2, [r2, #0]
 800691c:	3b04      	subs	r3, #4
 800691e:	2a00      	cmp	r2, #0
 8006920:	d1cb      	bne.n	80068ba <quorem+0x94>
 8006922:	3c01      	subs	r4, #1
 8006924:	e7c6      	b.n	80068b4 <quorem+0x8e>
 8006926:	6812      	ldr	r2, [r2, #0]
 8006928:	3b04      	subs	r3, #4
 800692a:	2a00      	cmp	r2, #0
 800692c:	d1ef      	bne.n	800690e <quorem+0xe8>
 800692e:	3c01      	subs	r4, #1
 8006930:	e7ea      	b.n	8006908 <quorem+0xe2>
 8006932:	2000      	movs	r0, #0
 8006934:	e7ee      	b.n	8006914 <quorem+0xee>
	...

08006938 <_dtoa_r>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	69c7      	ldr	r7, [r0, #28]
 800693e:	b099      	sub	sp, #100	@ 0x64
 8006940:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006944:	ec55 4b10 	vmov	r4, r5, d0
 8006948:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800694a:	9109      	str	r1, [sp, #36]	@ 0x24
 800694c:	4683      	mov	fp, r0
 800694e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006950:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006952:	b97f      	cbnz	r7, 8006974 <_dtoa_r+0x3c>
 8006954:	2010      	movs	r0, #16
 8006956:	f000 fdfd 	bl	8007554 <malloc>
 800695a:	4602      	mov	r2, r0
 800695c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006960:	b920      	cbnz	r0, 800696c <_dtoa_r+0x34>
 8006962:	4ba7      	ldr	r3, [pc, #668]	@ (8006c00 <_dtoa_r+0x2c8>)
 8006964:	21ef      	movs	r1, #239	@ 0xef
 8006966:	48a7      	ldr	r0, [pc, #668]	@ (8006c04 <_dtoa_r+0x2cc>)
 8006968:	f001 fc68 	bl	800823c <__assert_func>
 800696c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006970:	6007      	str	r7, [r0, #0]
 8006972:	60c7      	str	r7, [r0, #12]
 8006974:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006978:	6819      	ldr	r1, [r3, #0]
 800697a:	b159      	cbz	r1, 8006994 <_dtoa_r+0x5c>
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	604a      	str	r2, [r1, #4]
 8006980:	2301      	movs	r3, #1
 8006982:	4093      	lsls	r3, r2
 8006984:	608b      	str	r3, [r1, #8]
 8006986:	4658      	mov	r0, fp
 8006988:	f000 feda 	bl	8007740 <_Bfree>
 800698c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	1e2b      	subs	r3, r5, #0
 8006996:	bfb9      	ittee	lt
 8006998:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800699c:	9303      	strlt	r3, [sp, #12]
 800699e:	2300      	movge	r3, #0
 80069a0:	6033      	strge	r3, [r6, #0]
 80069a2:	9f03      	ldr	r7, [sp, #12]
 80069a4:	4b98      	ldr	r3, [pc, #608]	@ (8006c08 <_dtoa_r+0x2d0>)
 80069a6:	bfbc      	itt	lt
 80069a8:	2201      	movlt	r2, #1
 80069aa:	6032      	strlt	r2, [r6, #0]
 80069ac:	43bb      	bics	r3, r7
 80069ae:	d112      	bne.n	80069d6 <_dtoa_r+0x9e>
 80069b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80069b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069bc:	4323      	orrs	r3, r4
 80069be:	f000 854d 	beq.w	800745c <_dtoa_r+0xb24>
 80069c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006c1c <_dtoa_r+0x2e4>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 854f 	beq.w	800746c <_dtoa_r+0xb34>
 80069ce:	f10a 0303 	add.w	r3, sl, #3
 80069d2:	f000 bd49 	b.w	8007468 <_dtoa_r+0xb30>
 80069d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069da:	2200      	movs	r2, #0
 80069dc:	ec51 0b17 	vmov	r0, r1, d7
 80069e0:	2300      	movs	r3, #0
 80069e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80069e6:	f7fa f86f 	bl	8000ac8 <__aeabi_dcmpeq>
 80069ea:	4680      	mov	r8, r0
 80069ec:	b158      	cbz	r0, 8006a06 <_dtoa_r+0xce>
 80069ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80069f0:	2301      	movs	r3, #1
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069f6:	b113      	cbz	r3, 80069fe <_dtoa_r+0xc6>
 80069f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80069fa:	4b84      	ldr	r3, [pc, #528]	@ (8006c0c <_dtoa_r+0x2d4>)
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006c20 <_dtoa_r+0x2e8>
 8006a02:	f000 bd33 	b.w	800746c <_dtoa_r+0xb34>
 8006a06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006a0a:	aa16      	add	r2, sp, #88	@ 0x58
 8006a0c:	a917      	add	r1, sp, #92	@ 0x5c
 8006a0e:	4658      	mov	r0, fp
 8006a10:	f001 f980 	bl	8007d14 <__d2b>
 8006a14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006a18:	4681      	mov	r9, r0
 8006a1a:	2e00      	cmp	r6, #0
 8006a1c:	d077      	beq.n	8006b0e <_dtoa_r+0x1d6>
 8006a1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006a30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006a34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006a38:	4619      	mov	r1, r3
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	4b74      	ldr	r3, [pc, #464]	@ (8006c10 <_dtoa_r+0x2d8>)
 8006a3e:	f7f9 fc23 	bl	8000288 <__aeabi_dsub>
 8006a42:	a369      	add	r3, pc, #420	@ (adr r3, 8006be8 <_dtoa_r+0x2b0>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f7f9 fdd6 	bl	80005f8 <__aeabi_dmul>
 8006a4c:	a368      	add	r3, pc, #416	@ (adr r3, 8006bf0 <_dtoa_r+0x2b8>)
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f7f9 fc1b 	bl	800028c <__adddf3>
 8006a56:	4604      	mov	r4, r0
 8006a58:	4630      	mov	r0, r6
 8006a5a:	460d      	mov	r5, r1
 8006a5c:	f7f9 fd62 	bl	8000524 <__aeabi_i2d>
 8006a60:	a365      	add	r3, pc, #404	@ (adr r3, 8006bf8 <_dtoa_r+0x2c0>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f7f9 fdc7 	bl	80005f8 <__aeabi_dmul>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4620      	mov	r0, r4
 8006a70:	4629      	mov	r1, r5
 8006a72:	f7f9 fc0b 	bl	800028c <__adddf3>
 8006a76:	4604      	mov	r4, r0
 8006a78:	460d      	mov	r5, r1
 8006a7a:	f7fa f86d 	bl	8000b58 <__aeabi_d2iz>
 8006a7e:	2200      	movs	r2, #0
 8006a80:	4607      	mov	r7, r0
 8006a82:	2300      	movs	r3, #0
 8006a84:	4620      	mov	r0, r4
 8006a86:	4629      	mov	r1, r5
 8006a88:	f7fa f828 	bl	8000adc <__aeabi_dcmplt>
 8006a8c:	b140      	cbz	r0, 8006aa0 <_dtoa_r+0x168>
 8006a8e:	4638      	mov	r0, r7
 8006a90:	f7f9 fd48 	bl	8000524 <__aeabi_i2d>
 8006a94:	4622      	mov	r2, r4
 8006a96:	462b      	mov	r3, r5
 8006a98:	f7fa f816 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a9c:	b900      	cbnz	r0, 8006aa0 <_dtoa_r+0x168>
 8006a9e:	3f01      	subs	r7, #1
 8006aa0:	2f16      	cmp	r7, #22
 8006aa2:	d851      	bhi.n	8006b48 <_dtoa_r+0x210>
 8006aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8006c14 <_dtoa_r+0x2dc>)
 8006aa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ab2:	f7fa f813 	bl	8000adc <__aeabi_dcmplt>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d048      	beq.n	8006b4c <_dtoa_r+0x214>
 8006aba:	3f01      	subs	r7, #1
 8006abc:	2300      	movs	r3, #0
 8006abe:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ac0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006ac2:	1b9b      	subs	r3, r3, r6
 8006ac4:	1e5a      	subs	r2, r3, #1
 8006ac6:	bf44      	itt	mi
 8006ac8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006acc:	2300      	movmi	r3, #0
 8006ace:	9208      	str	r2, [sp, #32]
 8006ad0:	bf54      	ite	pl
 8006ad2:	f04f 0800 	movpl.w	r8, #0
 8006ad6:	9308      	strmi	r3, [sp, #32]
 8006ad8:	2f00      	cmp	r7, #0
 8006ada:	db39      	blt.n	8006b50 <_dtoa_r+0x218>
 8006adc:	9b08      	ldr	r3, [sp, #32]
 8006ade:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006ae0:	443b      	add	r3, r7
 8006ae2:	9308      	str	r3, [sp, #32]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aea:	2b09      	cmp	r3, #9
 8006aec:	d864      	bhi.n	8006bb8 <_dtoa_r+0x280>
 8006aee:	2b05      	cmp	r3, #5
 8006af0:	bfc4      	itt	gt
 8006af2:	3b04      	subgt	r3, #4
 8006af4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af8:	f1a3 0302 	sub.w	r3, r3, #2
 8006afc:	bfcc      	ite	gt
 8006afe:	2400      	movgt	r4, #0
 8006b00:	2401      	movle	r4, #1
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d863      	bhi.n	8006bce <_dtoa_r+0x296>
 8006b06:	e8df f003 	tbb	[pc, r3]
 8006b0a:	372a      	.short	0x372a
 8006b0c:	5535      	.short	0x5535
 8006b0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006b12:	441e      	add	r6, r3
 8006b14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	bfc1      	itttt	gt
 8006b1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006b20:	409f      	lslgt	r7, r3
 8006b22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006b26:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006b2a:	bfd6      	itet	le
 8006b2c:	f1c3 0320 	rsble	r3, r3, #32
 8006b30:	ea47 0003 	orrgt.w	r0, r7, r3
 8006b34:	fa04 f003 	lslle.w	r0, r4, r3
 8006b38:	f7f9 fce4 	bl	8000504 <__aeabi_ui2d>
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b42:	3e01      	subs	r6, #1
 8006b44:	9214      	str	r2, [sp, #80]	@ 0x50
 8006b46:	e777      	b.n	8006a38 <_dtoa_r+0x100>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e7b8      	b.n	8006abe <_dtoa_r+0x186>
 8006b4c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006b4e:	e7b7      	b.n	8006ac0 <_dtoa_r+0x188>
 8006b50:	427b      	negs	r3, r7
 8006b52:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b54:	2300      	movs	r3, #0
 8006b56:	eba8 0807 	sub.w	r8, r8, r7
 8006b5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b5c:	e7c4      	b.n	8006ae8 <_dtoa_r+0x1b0>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dc35      	bgt.n	8006bd4 <_dtoa_r+0x29c>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	9307      	str	r3, [sp, #28]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b72:	e00b      	b.n	8006b8c <_dtoa_r+0x254>
 8006b74:	2301      	movs	r3, #1
 8006b76:	e7f3      	b.n	8006b60 <_dtoa_r+0x228>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b7e:	18fb      	adds	r3, r7, r3
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	3301      	adds	r3, #1
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	bfb8      	it	lt
 8006b8a:	2301      	movlt	r3, #1
 8006b8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b90:	2100      	movs	r1, #0
 8006b92:	2204      	movs	r2, #4
 8006b94:	f102 0514 	add.w	r5, r2, #20
 8006b98:	429d      	cmp	r5, r3
 8006b9a:	d91f      	bls.n	8006bdc <_dtoa_r+0x2a4>
 8006b9c:	6041      	str	r1, [r0, #4]
 8006b9e:	4658      	mov	r0, fp
 8006ba0:	f000 fd8e 	bl	80076c0 <_Balloc>
 8006ba4:	4682      	mov	sl, r0
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d13c      	bne.n	8006c24 <_dtoa_r+0x2ec>
 8006baa:	4b1b      	ldr	r3, [pc, #108]	@ (8006c18 <_dtoa_r+0x2e0>)
 8006bac:	4602      	mov	r2, r0
 8006bae:	f240 11af 	movw	r1, #431	@ 0x1af
 8006bb2:	e6d8      	b.n	8006966 <_dtoa_r+0x2e>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e7e0      	b.n	8006b7a <_dtoa_r+0x242>
 8006bb8:	2401      	movs	r4, #1
 8006bba:	2300      	movs	r3, #0
 8006bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	9307      	str	r3, [sp, #28]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2312      	movs	r3, #18
 8006bcc:	e7d0      	b.n	8006b70 <_dtoa_r+0x238>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bd2:	e7f5      	b.n	8006bc0 <_dtoa_r+0x288>
 8006bd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	9307      	str	r3, [sp, #28]
 8006bda:	e7d7      	b.n	8006b8c <_dtoa_r+0x254>
 8006bdc:	3101      	adds	r1, #1
 8006bde:	0052      	lsls	r2, r2, #1
 8006be0:	e7d8      	b.n	8006b94 <_dtoa_r+0x25c>
 8006be2:	bf00      	nop
 8006be4:	f3af 8000 	nop.w
 8006be8:	636f4361 	.word	0x636f4361
 8006bec:	3fd287a7 	.word	0x3fd287a7
 8006bf0:	8b60c8b3 	.word	0x8b60c8b3
 8006bf4:	3fc68a28 	.word	0x3fc68a28
 8006bf8:	509f79fb 	.word	0x509f79fb
 8006bfc:	3fd34413 	.word	0x3fd34413
 8006c00:	08009d81 	.word	0x08009d81
 8006c04:	08009d98 	.word	0x08009d98
 8006c08:	7ff00000 	.word	0x7ff00000
 8006c0c:	08009d51 	.word	0x08009d51
 8006c10:	3ff80000 	.word	0x3ff80000
 8006c14:	08009e90 	.word	0x08009e90
 8006c18:	08009df0 	.word	0x08009df0
 8006c1c:	08009d7d 	.word	0x08009d7d
 8006c20:	08009d50 	.word	0x08009d50
 8006c24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c28:	6018      	str	r0, [r3, #0]
 8006c2a:	9b07      	ldr	r3, [sp, #28]
 8006c2c:	2b0e      	cmp	r3, #14
 8006c2e:	f200 80a4 	bhi.w	8006d7a <_dtoa_r+0x442>
 8006c32:	2c00      	cmp	r4, #0
 8006c34:	f000 80a1 	beq.w	8006d7a <_dtoa_r+0x442>
 8006c38:	2f00      	cmp	r7, #0
 8006c3a:	dd33      	ble.n	8006ca4 <_dtoa_r+0x36c>
 8006c3c:	4bad      	ldr	r3, [pc, #692]	@ (8006ef4 <_dtoa_r+0x5bc>)
 8006c3e:	f007 020f 	and.w	r2, r7, #15
 8006c42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c46:	ed93 7b00 	vldr	d7, [r3]
 8006c4a:	05f8      	lsls	r0, r7, #23
 8006c4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006c50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c54:	d516      	bpl.n	8006c84 <_dtoa_r+0x34c>
 8006c56:	4ba8      	ldr	r3, [pc, #672]	@ (8006ef8 <_dtoa_r+0x5c0>)
 8006c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c60:	f7f9 fdf4 	bl	800084c <__aeabi_ddiv>
 8006c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c68:	f004 040f 	and.w	r4, r4, #15
 8006c6c:	2603      	movs	r6, #3
 8006c6e:	4da2      	ldr	r5, [pc, #648]	@ (8006ef8 <_dtoa_r+0x5c0>)
 8006c70:	b954      	cbnz	r4, 8006c88 <_dtoa_r+0x350>
 8006c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c7a:	f7f9 fde7 	bl	800084c <__aeabi_ddiv>
 8006c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c82:	e028      	b.n	8006cd6 <_dtoa_r+0x39e>
 8006c84:	2602      	movs	r6, #2
 8006c86:	e7f2      	b.n	8006c6e <_dtoa_r+0x336>
 8006c88:	07e1      	lsls	r1, r4, #31
 8006c8a:	d508      	bpl.n	8006c9e <_dtoa_r+0x366>
 8006c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c94:	f7f9 fcb0 	bl	80005f8 <__aeabi_dmul>
 8006c98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c9c:	3601      	adds	r6, #1
 8006c9e:	1064      	asrs	r4, r4, #1
 8006ca0:	3508      	adds	r5, #8
 8006ca2:	e7e5      	b.n	8006c70 <_dtoa_r+0x338>
 8006ca4:	f000 80d2 	beq.w	8006e4c <_dtoa_r+0x514>
 8006ca8:	427c      	negs	r4, r7
 8006caa:	4b92      	ldr	r3, [pc, #584]	@ (8006ef4 <_dtoa_r+0x5bc>)
 8006cac:	4d92      	ldr	r5, [pc, #584]	@ (8006ef8 <_dtoa_r+0x5c0>)
 8006cae:	f004 020f 	and.w	r2, r4, #15
 8006cb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cbe:	f7f9 fc9b 	bl	80005f8 <__aeabi_dmul>
 8006cc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cc6:	1124      	asrs	r4, r4, #4
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2602      	movs	r6, #2
 8006ccc:	2c00      	cmp	r4, #0
 8006cce:	f040 80b2 	bne.w	8006e36 <_dtoa_r+0x4fe>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1d3      	bne.n	8006c7e <_dtoa_r+0x346>
 8006cd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006cd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 80b7 	beq.w	8006e50 <_dtoa_r+0x518>
 8006ce2:	4b86      	ldr	r3, [pc, #536]	@ (8006efc <_dtoa_r+0x5c4>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	4629      	mov	r1, r5
 8006cea:	f7f9 fef7 	bl	8000adc <__aeabi_dcmplt>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	f000 80ae 	beq.w	8006e50 <_dtoa_r+0x518>
 8006cf4:	9b07      	ldr	r3, [sp, #28]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 80aa 	beq.w	8006e50 <_dtoa_r+0x518>
 8006cfc:	9b00      	ldr	r3, [sp, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	dd37      	ble.n	8006d72 <_dtoa_r+0x43a>
 8006d02:	1e7b      	subs	r3, r7, #1
 8006d04:	9304      	str	r3, [sp, #16]
 8006d06:	4620      	mov	r0, r4
 8006d08:	4b7d      	ldr	r3, [pc, #500]	@ (8006f00 <_dtoa_r+0x5c8>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	f7f9 fc73 	bl	80005f8 <__aeabi_dmul>
 8006d12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d16:	9c00      	ldr	r4, [sp, #0]
 8006d18:	3601      	adds	r6, #1
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f7f9 fc02 	bl	8000524 <__aeabi_i2d>
 8006d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d24:	f7f9 fc68 	bl	80005f8 <__aeabi_dmul>
 8006d28:	4b76      	ldr	r3, [pc, #472]	@ (8006f04 <_dtoa_r+0x5cc>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f7f9 faae 	bl	800028c <__adddf3>
 8006d30:	4605      	mov	r5, r0
 8006d32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006d36:	2c00      	cmp	r4, #0
 8006d38:	f040 808d 	bne.w	8006e56 <_dtoa_r+0x51e>
 8006d3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d40:	4b71      	ldr	r3, [pc, #452]	@ (8006f08 <_dtoa_r+0x5d0>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	f7f9 faa0 	bl	8000288 <__aeabi_dsub>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d50:	462a      	mov	r2, r5
 8006d52:	4633      	mov	r3, r6
 8006d54:	f7f9 fee0 	bl	8000b18 <__aeabi_dcmpgt>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f040 828b 	bne.w	8007274 <_dtoa_r+0x93c>
 8006d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d62:	462a      	mov	r2, r5
 8006d64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d68:	f7f9 feb8 	bl	8000adc <__aeabi_dcmplt>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	f040 8128 	bne.w	8006fc2 <_dtoa_r+0x68a>
 8006d72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f2c0 815a 	blt.w	8007036 <_dtoa_r+0x6fe>
 8006d82:	2f0e      	cmp	r7, #14
 8006d84:	f300 8157 	bgt.w	8007036 <_dtoa_r+0x6fe>
 8006d88:	4b5a      	ldr	r3, [pc, #360]	@ (8006ef4 <_dtoa_r+0x5bc>)
 8006d8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d8e:	ed93 7b00 	vldr	d7, [r3]
 8006d92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	ed8d 7b00 	vstr	d7, [sp]
 8006d9a:	da03      	bge.n	8006da4 <_dtoa_r+0x46c>
 8006d9c:	9b07      	ldr	r3, [sp, #28]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f340 8101 	ble.w	8006fa6 <_dtoa_r+0x66e>
 8006da4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006da8:	4656      	mov	r6, sl
 8006daa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dae:	4620      	mov	r0, r4
 8006db0:	4629      	mov	r1, r5
 8006db2:	f7f9 fd4b 	bl	800084c <__aeabi_ddiv>
 8006db6:	f7f9 fecf 	bl	8000b58 <__aeabi_d2iz>
 8006dba:	4680      	mov	r8, r0
 8006dbc:	f7f9 fbb2 	bl	8000524 <__aeabi_i2d>
 8006dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dc4:	f7f9 fc18 	bl	80005f8 <__aeabi_dmul>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4620      	mov	r0, r4
 8006dce:	4629      	mov	r1, r5
 8006dd0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006dd4:	f7f9 fa58 	bl	8000288 <__aeabi_dsub>
 8006dd8:	f806 4b01 	strb.w	r4, [r6], #1
 8006ddc:	9d07      	ldr	r5, [sp, #28]
 8006dde:	eba6 040a 	sub.w	r4, r6, sl
 8006de2:	42a5      	cmp	r5, r4
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	f040 8117 	bne.w	800701a <_dtoa_r+0x6e2>
 8006dec:	f7f9 fa4e 	bl	800028c <__adddf3>
 8006df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006df4:	4604      	mov	r4, r0
 8006df6:	460d      	mov	r5, r1
 8006df8:	f7f9 fe8e 	bl	8000b18 <__aeabi_dcmpgt>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	f040 80f9 	bne.w	8006ff4 <_dtoa_r+0x6bc>
 8006e02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e06:	4620      	mov	r0, r4
 8006e08:	4629      	mov	r1, r5
 8006e0a:	f7f9 fe5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e0e:	b118      	cbz	r0, 8006e18 <_dtoa_r+0x4e0>
 8006e10:	f018 0f01 	tst.w	r8, #1
 8006e14:	f040 80ee 	bne.w	8006ff4 <_dtoa_r+0x6bc>
 8006e18:	4649      	mov	r1, r9
 8006e1a:	4658      	mov	r0, fp
 8006e1c:	f000 fc90 	bl	8007740 <_Bfree>
 8006e20:	2300      	movs	r3, #0
 8006e22:	7033      	strb	r3, [r6, #0]
 8006e24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e26:	3701      	adds	r7, #1
 8006e28:	601f      	str	r7, [r3, #0]
 8006e2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 831d 	beq.w	800746c <_dtoa_r+0xb34>
 8006e32:	601e      	str	r6, [r3, #0]
 8006e34:	e31a      	b.n	800746c <_dtoa_r+0xb34>
 8006e36:	07e2      	lsls	r2, r4, #31
 8006e38:	d505      	bpl.n	8006e46 <_dtoa_r+0x50e>
 8006e3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e3e:	f7f9 fbdb 	bl	80005f8 <__aeabi_dmul>
 8006e42:	3601      	adds	r6, #1
 8006e44:	2301      	movs	r3, #1
 8006e46:	1064      	asrs	r4, r4, #1
 8006e48:	3508      	adds	r5, #8
 8006e4a:	e73f      	b.n	8006ccc <_dtoa_r+0x394>
 8006e4c:	2602      	movs	r6, #2
 8006e4e:	e742      	b.n	8006cd6 <_dtoa_r+0x39e>
 8006e50:	9c07      	ldr	r4, [sp, #28]
 8006e52:	9704      	str	r7, [sp, #16]
 8006e54:	e761      	b.n	8006d1a <_dtoa_r+0x3e2>
 8006e56:	4b27      	ldr	r3, [pc, #156]	@ (8006ef4 <_dtoa_r+0x5bc>)
 8006e58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e62:	4454      	add	r4, sl
 8006e64:	2900      	cmp	r1, #0
 8006e66:	d053      	beq.n	8006f10 <_dtoa_r+0x5d8>
 8006e68:	4928      	ldr	r1, [pc, #160]	@ (8006f0c <_dtoa_r+0x5d4>)
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	f7f9 fcee 	bl	800084c <__aeabi_ddiv>
 8006e70:	4633      	mov	r3, r6
 8006e72:	462a      	mov	r2, r5
 8006e74:	f7f9 fa08 	bl	8000288 <__aeabi_dsub>
 8006e78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e7c:	4656      	mov	r6, sl
 8006e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e82:	f7f9 fe69 	bl	8000b58 <__aeabi_d2iz>
 8006e86:	4605      	mov	r5, r0
 8006e88:	f7f9 fb4c 	bl	8000524 <__aeabi_i2d>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e94:	f7f9 f9f8 	bl	8000288 <__aeabi_dsub>
 8006e98:	3530      	adds	r5, #48	@ 0x30
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ea2:	f806 5b01 	strb.w	r5, [r6], #1
 8006ea6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006eaa:	f7f9 fe17 	bl	8000adc <__aeabi_dcmplt>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d171      	bne.n	8006f96 <_dtoa_r+0x65e>
 8006eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006eb6:	4911      	ldr	r1, [pc, #68]	@ (8006efc <_dtoa_r+0x5c4>)
 8006eb8:	2000      	movs	r0, #0
 8006eba:	f7f9 f9e5 	bl	8000288 <__aeabi_dsub>
 8006ebe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ec2:	f7f9 fe0b 	bl	8000adc <__aeabi_dcmplt>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f040 8095 	bne.w	8006ff6 <_dtoa_r+0x6be>
 8006ecc:	42a6      	cmp	r6, r4
 8006ece:	f43f af50 	beq.w	8006d72 <_dtoa_r+0x43a>
 8006ed2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f00 <_dtoa_r+0x5c8>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f7f9 fb8d 	bl	80005f8 <__aeabi_dmul>
 8006ede:	4b08      	ldr	r3, [pc, #32]	@ (8006f00 <_dtoa_r+0x5c8>)
 8006ee0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eea:	f7f9 fb85 	bl	80005f8 <__aeabi_dmul>
 8006eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ef2:	e7c4      	b.n	8006e7e <_dtoa_r+0x546>
 8006ef4:	08009e90 	.word	0x08009e90
 8006ef8:	08009e68 	.word	0x08009e68
 8006efc:	3ff00000 	.word	0x3ff00000
 8006f00:	40240000 	.word	0x40240000
 8006f04:	401c0000 	.word	0x401c0000
 8006f08:	40140000 	.word	0x40140000
 8006f0c:	3fe00000 	.word	0x3fe00000
 8006f10:	4631      	mov	r1, r6
 8006f12:	4628      	mov	r0, r5
 8006f14:	f7f9 fb70 	bl	80005f8 <__aeabi_dmul>
 8006f18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006f1e:	4656      	mov	r6, sl
 8006f20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f24:	f7f9 fe18 	bl	8000b58 <__aeabi_d2iz>
 8006f28:	4605      	mov	r5, r0
 8006f2a:	f7f9 fafb 	bl	8000524 <__aeabi_i2d>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f36:	f7f9 f9a7 	bl	8000288 <__aeabi_dsub>
 8006f3a:	3530      	adds	r5, #48	@ 0x30
 8006f3c:	f806 5b01 	strb.w	r5, [r6], #1
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	42a6      	cmp	r6, r4
 8006f46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	d124      	bne.n	8006f9a <_dtoa_r+0x662>
 8006f50:	4bac      	ldr	r3, [pc, #688]	@ (8007204 <_dtoa_r+0x8cc>)
 8006f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f56:	f7f9 f999 	bl	800028c <__adddf3>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f62:	f7f9 fdd9 	bl	8000b18 <__aeabi_dcmpgt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d145      	bne.n	8006ff6 <_dtoa_r+0x6be>
 8006f6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f6e:	49a5      	ldr	r1, [pc, #660]	@ (8007204 <_dtoa_r+0x8cc>)
 8006f70:	2000      	movs	r0, #0
 8006f72:	f7f9 f989 	bl	8000288 <__aeabi_dsub>
 8006f76:	4602      	mov	r2, r0
 8006f78:	460b      	mov	r3, r1
 8006f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f7e:	f7f9 fdad 	bl	8000adc <__aeabi_dcmplt>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f43f aef5 	beq.w	8006d72 <_dtoa_r+0x43a>
 8006f88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006f8a:	1e73      	subs	r3, r6, #1
 8006f8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f92:	2b30      	cmp	r3, #48	@ 0x30
 8006f94:	d0f8      	beq.n	8006f88 <_dtoa_r+0x650>
 8006f96:	9f04      	ldr	r7, [sp, #16]
 8006f98:	e73e      	b.n	8006e18 <_dtoa_r+0x4e0>
 8006f9a:	4b9b      	ldr	r3, [pc, #620]	@ (8007208 <_dtoa_r+0x8d0>)
 8006f9c:	f7f9 fb2c 	bl	80005f8 <__aeabi_dmul>
 8006fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fa4:	e7bc      	b.n	8006f20 <_dtoa_r+0x5e8>
 8006fa6:	d10c      	bne.n	8006fc2 <_dtoa_r+0x68a>
 8006fa8:	4b98      	ldr	r3, [pc, #608]	@ (800720c <_dtoa_r+0x8d4>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fb0:	f7f9 fb22 	bl	80005f8 <__aeabi_dmul>
 8006fb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fb8:	f7f9 fda4 	bl	8000b04 <__aeabi_dcmpge>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f000 8157 	beq.w	8007270 <_dtoa_r+0x938>
 8006fc2:	2400      	movs	r4, #0
 8006fc4:	4625      	mov	r5, r4
 8006fc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	9304      	str	r3, [sp, #16]
 8006fcc:	4656      	mov	r6, sl
 8006fce:	2700      	movs	r7, #0
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4658      	mov	r0, fp
 8006fd4:	f000 fbb4 	bl	8007740 <_Bfree>
 8006fd8:	2d00      	cmp	r5, #0
 8006fda:	d0dc      	beq.n	8006f96 <_dtoa_r+0x65e>
 8006fdc:	b12f      	cbz	r7, 8006fea <_dtoa_r+0x6b2>
 8006fde:	42af      	cmp	r7, r5
 8006fe0:	d003      	beq.n	8006fea <_dtoa_r+0x6b2>
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	4658      	mov	r0, fp
 8006fe6:	f000 fbab 	bl	8007740 <_Bfree>
 8006fea:	4629      	mov	r1, r5
 8006fec:	4658      	mov	r0, fp
 8006fee:	f000 fba7 	bl	8007740 <_Bfree>
 8006ff2:	e7d0      	b.n	8006f96 <_dtoa_r+0x65e>
 8006ff4:	9704      	str	r7, [sp, #16]
 8006ff6:	4633      	mov	r3, r6
 8006ff8:	461e      	mov	r6, r3
 8006ffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ffe:	2a39      	cmp	r2, #57	@ 0x39
 8007000:	d107      	bne.n	8007012 <_dtoa_r+0x6da>
 8007002:	459a      	cmp	sl, r3
 8007004:	d1f8      	bne.n	8006ff8 <_dtoa_r+0x6c0>
 8007006:	9a04      	ldr	r2, [sp, #16]
 8007008:	3201      	adds	r2, #1
 800700a:	9204      	str	r2, [sp, #16]
 800700c:	2230      	movs	r2, #48	@ 0x30
 800700e:	f88a 2000 	strb.w	r2, [sl]
 8007012:	781a      	ldrb	r2, [r3, #0]
 8007014:	3201      	adds	r2, #1
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	e7bd      	b.n	8006f96 <_dtoa_r+0x65e>
 800701a:	4b7b      	ldr	r3, [pc, #492]	@ (8007208 <_dtoa_r+0x8d0>)
 800701c:	2200      	movs	r2, #0
 800701e:	f7f9 faeb 	bl	80005f8 <__aeabi_dmul>
 8007022:	2200      	movs	r2, #0
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	460d      	mov	r5, r1
 800702a:	f7f9 fd4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800702e:	2800      	cmp	r0, #0
 8007030:	f43f aebb 	beq.w	8006daa <_dtoa_r+0x472>
 8007034:	e6f0      	b.n	8006e18 <_dtoa_r+0x4e0>
 8007036:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007038:	2a00      	cmp	r2, #0
 800703a:	f000 80db 	beq.w	80071f4 <_dtoa_r+0x8bc>
 800703e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007040:	2a01      	cmp	r2, #1
 8007042:	f300 80bf 	bgt.w	80071c4 <_dtoa_r+0x88c>
 8007046:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007048:	2a00      	cmp	r2, #0
 800704a:	f000 80b7 	beq.w	80071bc <_dtoa_r+0x884>
 800704e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007052:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007054:	4646      	mov	r6, r8
 8007056:	9a08      	ldr	r2, [sp, #32]
 8007058:	2101      	movs	r1, #1
 800705a:	441a      	add	r2, r3
 800705c:	4658      	mov	r0, fp
 800705e:	4498      	add	r8, r3
 8007060:	9208      	str	r2, [sp, #32]
 8007062:	f000 fc21 	bl	80078a8 <__i2b>
 8007066:	4605      	mov	r5, r0
 8007068:	b15e      	cbz	r6, 8007082 <_dtoa_r+0x74a>
 800706a:	9b08      	ldr	r3, [sp, #32]
 800706c:	2b00      	cmp	r3, #0
 800706e:	dd08      	ble.n	8007082 <_dtoa_r+0x74a>
 8007070:	42b3      	cmp	r3, r6
 8007072:	9a08      	ldr	r2, [sp, #32]
 8007074:	bfa8      	it	ge
 8007076:	4633      	movge	r3, r6
 8007078:	eba8 0803 	sub.w	r8, r8, r3
 800707c:	1af6      	subs	r6, r6, r3
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	9308      	str	r3, [sp, #32]
 8007082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007084:	b1f3      	cbz	r3, 80070c4 <_dtoa_r+0x78c>
 8007086:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 80b7 	beq.w	80071fc <_dtoa_r+0x8c4>
 800708e:	b18c      	cbz	r4, 80070b4 <_dtoa_r+0x77c>
 8007090:	4629      	mov	r1, r5
 8007092:	4622      	mov	r2, r4
 8007094:	4658      	mov	r0, fp
 8007096:	f000 fcc7 	bl	8007a28 <__pow5mult>
 800709a:	464a      	mov	r2, r9
 800709c:	4601      	mov	r1, r0
 800709e:	4605      	mov	r5, r0
 80070a0:	4658      	mov	r0, fp
 80070a2:	f000 fc17 	bl	80078d4 <__multiply>
 80070a6:	4649      	mov	r1, r9
 80070a8:	9004      	str	r0, [sp, #16]
 80070aa:	4658      	mov	r0, fp
 80070ac:	f000 fb48 	bl	8007740 <_Bfree>
 80070b0:	9b04      	ldr	r3, [sp, #16]
 80070b2:	4699      	mov	r9, r3
 80070b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070b6:	1b1a      	subs	r2, r3, r4
 80070b8:	d004      	beq.n	80070c4 <_dtoa_r+0x78c>
 80070ba:	4649      	mov	r1, r9
 80070bc:	4658      	mov	r0, fp
 80070be:	f000 fcb3 	bl	8007a28 <__pow5mult>
 80070c2:	4681      	mov	r9, r0
 80070c4:	2101      	movs	r1, #1
 80070c6:	4658      	mov	r0, fp
 80070c8:	f000 fbee 	bl	80078a8 <__i2b>
 80070cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070ce:	4604      	mov	r4, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 81cf 	beq.w	8007474 <_dtoa_r+0xb3c>
 80070d6:	461a      	mov	r2, r3
 80070d8:	4601      	mov	r1, r0
 80070da:	4658      	mov	r0, fp
 80070dc:	f000 fca4 	bl	8007a28 <__pow5mult>
 80070e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	4604      	mov	r4, r0
 80070e6:	f300 8095 	bgt.w	8007214 <_dtoa_r+0x8dc>
 80070ea:	9b02      	ldr	r3, [sp, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f040 8087 	bne.w	8007200 <_dtoa_r+0x8c8>
 80070f2:	9b03      	ldr	r3, [sp, #12]
 80070f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f040 8089 	bne.w	8007210 <_dtoa_r+0x8d8>
 80070fe:	9b03      	ldr	r3, [sp, #12]
 8007100:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007104:	0d1b      	lsrs	r3, r3, #20
 8007106:	051b      	lsls	r3, r3, #20
 8007108:	b12b      	cbz	r3, 8007116 <_dtoa_r+0x7de>
 800710a:	9b08      	ldr	r3, [sp, #32]
 800710c:	3301      	adds	r3, #1
 800710e:	9308      	str	r3, [sp, #32]
 8007110:	f108 0801 	add.w	r8, r8, #1
 8007114:	2301      	movs	r3, #1
 8007116:	930a      	str	r3, [sp, #40]	@ 0x28
 8007118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 81b0 	beq.w	8007480 <_dtoa_r+0xb48>
 8007120:	6923      	ldr	r3, [r4, #16]
 8007122:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007126:	6918      	ldr	r0, [r3, #16]
 8007128:	f000 fb72 	bl	8007810 <__hi0bits>
 800712c:	f1c0 0020 	rsb	r0, r0, #32
 8007130:	9b08      	ldr	r3, [sp, #32]
 8007132:	4418      	add	r0, r3
 8007134:	f010 001f 	ands.w	r0, r0, #31
 8007138:	d077      	beq.n	800722a <_dtoa_r+0x8f2>
 800713a:	f1c0 0320 	rsb	r3, r0, #32
 800713e:	2b04      	cmp	r3, #4
 8007140:	dd6b      	ble.n	800721a <_dtoa_r+0x8e2>
 8007142:	9b08      	ldr	r3, [sp, #32]
 8007144:	f1c0 001c 	rsb	r0, r0, #28
 8007148:	4403      	add	r3, r0
 800714a:	4480      	add	r8, r0
 800714c:	4406      	add	r6, r0
 800714e:	9308      	str	r3, [sp, #32]
 8007150:	f1b8 0f00 	cmp.w	r8, #0
 8007154:	dd05      	ble.n	8007162 <_dtoa_r+0x82a>
 8007156:	4649      	mov	r1, r9
 8007158:	4642      	mov	r2, r8
 800715a:	4658      	mov	r0, fp
 800715c:	f000 fcbe 	bl	8007adc <__lshift>
 8007160:	4681      	mov	r9, r0
 8007162:	9b08      	ldr	r3, [sp, #32]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dd05      	ble.n	8007174 <_dtoa_r+0x83c>
 8007168:	4621      	mov	r1, r4
 800716a:	461a      	mov	r2, r3
 800716c:	4658      	mov	r0, fp
 800716e:	f000 fcb5 	bl	8007adc <__lshift>
 8007172:	4604      	mov	r4, r0
 8007174:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007176:	2b00      	cmp	r3, #0
 8007178:	d059      	beq.n	800722e <_dtoa_r+0x8f6>
 800717a:	4621      	mov	r1, r4
 800717c:	4648      	mov	r0, r9
 800717e:	f000 fd19 	bl	8007bb4 <__mcmp>
 8007182:	2800      	cmp	r0, #0
 8007184:	da53      	bge.n	800722e <_dtoa_r+0x8f6>
 8007186:	1e7b      	subs	r3, r7, #1
 8007188:	9304      	str	r3, [sp, #16]
 800718a:	4649      	mov	r1, r9
 800718c:	2300      	movs	r3, #0
 800718e:	220a      	movs	r2, #10
 8007190:	4658      	mov	r0, fp
 8007192:	f000 faf7 	bl	8007784 <__multadd>
 8007196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007198:	4681      	mov	r9, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 8172 	beq.w	8007484 <_dtoa_r+0xb4c>
 80071a0:	2300      	movs	r3, #0
 80071a2:	4629      	mov	r1, r5
 80071a4:	220a      	movs	r2, #10
 80071a6:	4658      	mov	r0, fp
 80071a8:	f000 faec 	bl	8007784 <__multadd>
 80071ac:	9b00      	ldr	r3, [sp, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	4605      	mov	r5, r0
 80071b2:	dc67      	bgt.n	8007284 <_dtoa_r+0x94c>
 80071b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	dc41      	bgt.n	800723e <_dtoa_r+0x906>
 80071ba:	e063      	b.n	8007284 <_dtoa_r+0x94c>
 80071bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80071be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80071c2:	e746      	b.n	8007052 <_dtoa_r+0x71a>
 80071c4:	9b07      	ldr	r3, [sp, #28]
 80071c6:	1e5c      	subs	r4, r3, #1
 80071c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ca:	42a3      	cmp	r3, r4
 80071cc:	bfbf      	itttt	lt
 80071ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80071d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80071d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80071d4:	1ae3      	sublt	r3, r4, r3
 80071d6:	bfb4      	ite	lt
 80071d8:	18d2      	addlt	r2, r2, r3
 80071da:	1b1c      	subge	r4, r3, r4
 80071dc:	9b07      	ldr	r3, [sp, #28]
 80071de:	bfbc      	itt	lt
 80071e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80071e2:	2400      	movlt	r4, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	bfb5      	itete	lt
 80071e8:	eba8 0603 	sublt.w	r6, r8, r3
 80071ec:	9b07      	ldrge	r3, [sp, #28]
 80071ee:	2300      	movlt	r3, #0
 80071f0:	4646      	movge	r6, r8
 80071f2:	e730      	b.n	8007056 <_dtoa_r+0x71e>
 80071f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071f8:	4646      	mov	r6, r8
 80071fa:	e735      	b.n	8007068 <_dtoa_r+0x730>
 80071fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071fe:	e75c      	b.n	80070ba <_dtoa_r+0x782>
 8007200:	2300      	movs	r3, #0
 8007202:	e788      	b.n	8007116 <_dtoa_r+0x7de>
 8007204:	3fe00000 	.word	0x3fe00000
 8007208:	40240000 	.word	0x40240000
 800720c:	40140000 	.word	0x40140000
 8007210:	9b02      	ldr	r3, [sp, #8]
 8007212:	e780      	b.n	8007116 <_dtoa_r+0x7de>
 8007214:	2300      	movs	r3, #0
 8007216:	930a      	str	r3, [sp, #40]	@ 0x28
 8007218:	e782      	b.n	8007120 <_dtoa_r+0x7e8>
 800721a:	d099      	beq.n	8007150 <_dtoa_r+0x818>
 800721c:	9a08      	ldr	r2, [sp, #32]
 800721e:	331c      	adds	r3, #28
 8007220:	441a      	add	r2, r3
 8007222:	4498      	add	r8, r3
 8007224:	441e      	add	r6, r3
 8007226:	9208      	str	r2, [sp, #32]
 8007228:	e792      	b.n	8007150 <_dtoa_r+0x818>
 800722a:	4603      	mov	r3, r0
 800722c:	e7f6      	b.n	800721c <_dtoa_r+0x8e4>
 800722e:	9b07      	ldr	r3, [sp, #28]
 8007230:	9704      	str	r7, [sp, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	dc20      	bgt.n	8007278 <_dtoa_r+0x940>
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800723a:	2b02      	cmp	r3, #2
 800723c:	dd1e      	ble.n	800727c <_dtoa_r+0x944>
 800723e:	9b00      	ldr	r3, [sp, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f47f aec0 	bne.w	8006fc6 <_dtoa_r+0x68e>
 8007246:	4621      	mov	r1, r4
 8007248:	2205      	movs	r2, #5
 800724a:	4658      	mov	r0, fp
 800724c:	f000 fa9a 	bl	8007784 <__multadd>
 8007250:	4601      	mov	r1, r0
 8007252:	4604      	mov	r4, r0
 8007254:	4648      	mov	r0, r9
 8007256:	f000 fcad 	bl	8007bb4 <__mcmp>
 800725a:	2800      	cmp	r0, #0
 800725c:	f77f aeb3 	ble.w	8006fc6 <_dtoa_r+0x68e>
 8007260:	4656      	mov	r6, sl
 8007262:	2331      	movs	r3, #49	@ 0x31
 8007264:	f806 3b01 	strb.w	r3, [r6], #1
 8007268:	9b04      	ldr	r3, [sp, #16]
 800726a:	3301      	adds	r3, #1
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	e6ae      	b.n	8006fce <_dtoa_r+0x696>
 8007270:	9c07      	ldr	r4, [sp, #28]
 8007272:	9704      	str	r7, [sp, #16]
 8007274:	4625      	mov	r5, r4
 8007276:	e7f3      	b.n	8007260 <_dtoa_r+0x928>
 8007278:	9b07      	ldr	r3, [sp, #28]
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 8104 	beq.w	800748c <_dtoa_r+0xb54>
 8007284:	2e00      	cmp	r6, #0
 8007286:	dd05      	ble.n	8007294 <_dtoa_r+0x95c>
 8007288:	4629      	mov	r1, r5
 800728a:	4632      	mov	r2, r6
 800728c:	4658      	mov	r0, fp
 800728e:	f000 fc25 	bl	8007adc <__lshift>
 8007292:	4605      	mov	r5, r0
 8007294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007296:	2b00      	cmp	r3, #0
 8007298:	d05a      	beq.n	8007350 <_dtoa_r+0xa18>
 800729a:	6869      	ldr	r1, [r5, #4]
 800729c:	4658      	mov	r0, fp
 800729e:	f000 fa0f 	bl	80076c0 <_Balloc>
 80072a2:	4606      	mov	r6, r0
 80072a4:	b928      	cbnz	r0, 80072b2 <_dtoa_r+0x97a>
 80072a6:	4b84      	ldr	r3, [pc, #528]	@ (80074b8 <_dtoa_r+0xb80>)
 80072a8:	4602      	mov	r2, r0
 80072aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80072ae:	f7ff bb5a 	b.w	8006966 <_dtoa_r+0x2e>
 80072b2:	692a      	ldr	r2, [r5, #16]
 80072b4:	3202      	adds	r2, #2
 80072b6:	0092      	lsls	r2, r2, #2
 80072b8:	f105 010c 	add.w	r1, r5, #12
 80072bc:	300c      	adds	r0, #12
 80072be:	f000 ffaf 	bl	8008220 <memcpy>
 80072c2:	2201      	movs	r2, #1
 80072c4:	4631      	mov	r1, r6
 80072c6:	4658      	mov	r0, fp
 80072c8:	f000 fc08 	bl	8007adc <__lshift>
 80072cc:	f10a 0301 	add.w	r3, sl, #1
 80072d0:	9307      	str	r3, [sp, #28]
 80072d2:	9b00      	ldr	r3, [sp, #0]
 80072d4:	4453      	add	r3, sl
 80072d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072d8:	9b02      	ldr	r3, [sp, #8]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	462f      	mov	r7, r5
 80072e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072e2:	4605      	mov	r5, r0
 80072e4:	9b07      	ldr	r3, [sp, #28]
 80072e6:	4621      	mov	r1, r4
 80072e8:	3b01      	subs	r3, #1
 80072ea:	4648      	mov	r0, r9
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	f7ff fa9a 	bl	8006826 <quorem>
 80072f2:	4639      	mov	r1, r7
 80072f4:	9002      	str	r0, [sp, #8]
 80072f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80072fa:	4648      	mov	r0, r9
 80072fc:	f000 fc5a 	bl	8007bb4 <__mcmp>
 8007300:	462a      	mov	r2, r5
 8007302:	9008      	str	r0, [sp, #32]
 8007304:	4621      	mov	r1, r4
 8007306:	4658      	mov	r0, fp
 8007308:	f000 fc70 	bl	8007bec <__mdiff>
 800730c:	68c2      	ldr	r2, [r0, #12]
 800730e:	4606      	mov	r6, r0
 8007310:	bb02      	cbnz	r2, 8007354 <_dtoa_r+0xa1c>
 8007312:	4601      	mov	r1, r0
 8007314:	4648      	mov	r0, r9
 8007316:	f000 fc4d 	bl	8007bb4 <__mcmp>
 800731a:	4602      	mov	r2, r0
 800731c:	4631      	mov	r1, r6
 800731e:	4658      	mov	r0, fp
 8007320:	920e      	str	r2, [sp, #56]	@ 0x38
 8007322:	f000 fa0d 	bl	8007740 <_Bfree>
 8007326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007328:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800732a:	9e07      	ldr	r6, [sp, #28]
 800732c:	ea43 0102 	orr.w	r1, r3, r2
 8007330:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007332:	4319      	orrs	r1, r3
 8007334:	d110      	bne.n	8007358 <_dtoa_r+0xa20>
 8007336:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800733a:	d029      	beq.n	8007390 <_dtoa_r+0xa58>
 800733c:	9b08      	ldr	r3, [sp, #32]
 800733e:	2b00      	cmp	r3, #0
 8007340:	dd02      	ble.n	8007348 <_dtoa_r+0xa10>
 8007342:	9b02      	ldr	r3, [sp, #8]
 8007344:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007348:	9b00      	ldr	r3, [sp, #0]
 800734a:	f883 8000 	strb.w	r8, [r3]
 800734e:	e63f      	b.n	8006fd0 <_dtoa_r+0x698>
 8007350:	4628      	mov	r0, r5
 8007352:	e7bb      	b.n	80072cc <_dtoa_r+0x994>
 8007354:	2201      	movs	r2, #1
 8007356:	e7e1      	b.n	800731c <_dtoa_r+0x9e4>
 8007358:	9b08      	ldr	r3, [sp, #32]
 800735a:	2b00      	cmp	r3, #0
 800735c:	db04      	blt.n	8007368 <_dtoa_r+0xa30>
 800735e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007360:	430b      	orrs	r3, r1
 8007362:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007364:	430b      	orrs	r3, r1
 8007366:	d120      	bne.n	80073aa <_dtoa_r+0xa72>
 8007368:	2a00      	cmp	r2, #0
 800736a:	dded      	ble.n	8007348 <_dtoa_r+0xa10>
 800736c:	4649      	mov	r1, r9
 800736e:	2201      	movs	r2, #1
 8007370:	4658      	mov	r0, fp
 8007372:	f000 fbb3 	bl	8007adc <__lshift>
 8007376:	4621      	mov	r1, r4
 8007378:	4681      	mov	r9, r0
 800737a:	f000 fc1b 	bl	8007bb4 <__mcmp>
 800737e:	2800      	cmp	r0, #0
 8007380:	dc03      	bgt.n	800738a <_dtoa_r+0xa52>
 8007382:	d1e1      	bne.n	8007348 <_dtoa_r+0xa10>
 8007384:	f018 0f01 	tst.w	r8, #1
 8007388:	d0de      	beq.n	8007348 <_dtoa_r+0xa10>
 800738a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800738e:	d1d8      	bne.n	8007342 <_dtoa_r+0xa0a>
 8007390:	9a00      	ldr	r2, [sp, #0]
 8007392:	2339      	movs	r3, #57	@ 0x39
 8007394:	7013      	strb	r3, [r2, #0]
 8007396:	4633      	mov	r3, r6
 8007398:	461e      	mov	r6, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80073a0:	2a39      	cmp	r2, #57	@ 0x39
 80073a2:	d052      	beq.n	800744a <_dtoa_r+0xb12>
 80073a4:	3201      	adds	r2, #1
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	e612      	b.n	8006fd0 <_dtoa_r+0x698>
 80073aa:	2a00      	cmp	r2, #0
 80073ac:	dd07      	ble.n	80073be <_dtoa_r+0xa86>
 80073ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073b2:	d0ed      	beq.n	8007390 <_dtoa_r+0xa58>
 80073b4:	9a00      	ldr	r2, [sp, #0]
 80073b6:	f108 0301 	add.w	r3, r8, #1
 80073ba:	7013      	strb	r3, [r2, #0]
 80073bc:	e608      	b.n	8006fd0 <_dtoa_r+0x698>
 80073be:	9b07      	ldr	r3, [sp, #28]
 80073c0:	9a07      	ldr	r2, [sp, #28]
 80073c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80073c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d028      	beq.n	800741e <_dtoa_r+0xae6>
 80073cc:	4649      	mov	r1, r9
 80073ce:	2300      	movs	r3, #0
 80073d0:	220a      	movs	r2, #10
 80073d2:	4658      	mov	r0, fp
 80073d4:	f000 f9d6 	bl	8007784 <__multadd>
 80073d8:	42af      	cmp	r7, r5
 80073da:	4681      	mov	r9, r0
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	f04f 020a 	mov.w	r2, #10
 80073e4:	4639      	mov	r1, r7
 80073e6:	4658      	mov	r0, fp
 80073e8:	d107      	bne.n	80073fa <_dtoa_r+0xac2>
 80073ea:	f000 f9cb 	bl	8007784 <__multadd>
 80073ee:	4607      	mov	r7, r0
 80073f0:	4605      	mov	r5, r0
 80073f2:	9b07      	ldr	r3, [sp, #28]
 80073f4:	3301      	adds	r3, #1
 80073f6:	9307      	str	r3, [sp, #28]
 80073f8:	e774      	b.n	80072e4 <_dtoa_r+0x9ac>
 80073fa:	f000 f9c3 	bl	8007784 <__multadd>
 80073fe:	4629      	mov	r1, r5
 8007400:	4607      	mov	r7, r0
 8007402:	2300      	movs	r3, #0
 8007404:	220a      	movs	r2, #10
 8007406:	4658      	mov	r0, fp
 8007408:	f000 f9bc 	bl	8007784 <__multadd>
 800740c:	4605      	mov	r5, r0
 800740e:	e7f0      	b.n	80073f2 <_dtoa_r+0xaba>
 8007410:	9b00      	ldr	r3, [sp, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	bfcc      	ite	gt
 8007416:	461e      	movgt	r6, r3
 8007418:	2601      	movle	r6, #1
 800741a:	4456      	add	r6, sl
 800741c:	2700      	movs	r7, #0
 800741e:	4649      	mov	r1, r9
 8007420:	2201      	movs	r2, #1
 8007422:	4658      	mov	r0, fp
 8007424:	f000 fb5a 	bl	8007adc <__lshift>
 8007428:	4621      	mov	r1, r4
 800742a:	4681      	mov	r9, r0
 800742c:	f000 fbc2 	bl	8007bb4 <__mcmp>
 8007430:	2800      	cmp	r0, #0
 8007432:	dcb0      	bgt.n	8007396 <_dtoa_r+0xa5e>
 8007434:	d102      	bne.n	800743c <_dtoa_r+0xb04>
 8007436:	f018 0f01 	tst.w	r8, #1
 800743a:	d1ac      	bne.n	8007396 <_dtoa_r+0xa5e>
 800743c:	4633      	mov	r3, r6
 800743e:	461e      	mov	r6, r3
 8007440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007444:	2a30      	cmp	r2, #48	@ 0x30
 8007446:	d0fa      	beq.n	800743e <_dtoa_r+0xb06>
 8007448:	e5c2      	b.n	8006fd0 <_dtoa_r+0x698>
 800744a:	459a      	cmp	sl, r3
 800744c:	d1a4      	bne.n	8007398 <_dtoa_r+0xa60>
 800744e:	9b04      	ldr	r3, [sp, #16]
 8007450:	3301      	adds	r3, #1
 8007452:	9304      	str	r3, [sp, #16]
 8007454:	2331      	movs	r3, #49	@ 0x31
 8007456:	f88a 3000 	strb.w	r3, [sl]
 800745a:	e5b9      	b.n	8006fd0 <_dtoa_r+0x698>
 800745c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800745e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80074bc <_dtoa_r+0xb84>
 8007462:	b11b      	cbz	r3, 800746c <_dtoa_r+0xb34>
 8007464:	f10a 0308 	add.w	r3, sl, #8
 8007468:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	4650      	mov	r0, sl
 800746e:	b019      	add	sp, #100	@ 0x64
 8007470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007476:	2b01      	cmp	r3, #1
 8007478:	f77f ae37 	ble.w	80070ea <_dtoa_r+0x7b2>
 800747c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800747e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007480:	2001      	movs	r0, #1
 8007482:	e655      	b.n	8007130 <_dtoa_r+0x7f8>
 8007484:	9b00      	ldr	r3, [sp, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f77f aed6 	ble.w	8007238 <_dtoa_r+0x900>
 800748c:	4656      	mov	r6, sl
 800748e:	4621      	mov	r1, r4
 8007490:	4648      	mov	r0, r9
 8007492:	f7ff f9c8 	bl	8006826 <quorem>
 8007496:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800749a:	f806 8b01 	strb.w	r8, [r6], #1
 800749e:	9b00      	ldr	r3, [sp, #0]
 80074a0:	eba6 020a 	sub.w	r2, r6, sl
 80074a4:	4293      	cmp	r3, r2
 80074a6:	ddb3      	ble.n	8007410 <_dtoa_r+0xad8>
 80074a8:	4649      	mov	r1, r9
 80074aa:	2300      	movs	r3, #0
 80074ac:	220a      	movs	r2, #10
 80074ae:	4658      	mov	r0, fp
 80074b0:	f000 f968 	bl	8007784 <__multadd>
 80074b4:	4681      	mov	r9, r0
 80074b6:	e7ea      	b.n	800748e <_dtoa_r+0xb56>
 80074b8:	08009df0 	.word	0x08009df0
 80074bc:	08009d74 	.word	0x08009d74

080074c0 <_free_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4605      	mov	r5, r0
 80074c4:	2900      	cmp	r1, #0
 80074c6:	d041      	beq.n	800754c <_free_r+0x8c>
 80074c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074cc:	1f0c      	subs	r4, r1, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	bfb8      	it	lt
 80074d2:	18e4      	addlt	r4, r4, r3
 80074d4:	f000 f8e8 	bl	80076a8 <__malloc_lock>
 80074d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007550 <_free_r+0x90>)
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	b933      	cbnz	r3, 80074ec <_free_r+0x2c>
 80074de:	6063      	str	r3, [r4, #4]
 80074e0:	6014      	str	r4, [r2, #0]
 80074e2:	4628      	mov	r0, r5
 80074e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074e8:	f000 b8e4 	b.w	80076b4 <__malloc_unlock>
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	d908      	bls.n	8007502 <_free_r+0x42>
 80074f0:	6820      	ldr	r0, [r4, #0]
 80074f2:	1821      	adds	r1, r4, r0
 80074f4:	428b      	cmp	r3, r1
 80074f6:	bf01      	itttt	eq
 80074f8:	6819      	ldreq	r1, [r3, #0]
 80074fa:	685b      	ldreq	r3, [r3, #4]
 80074fc:	1809      	addeq	r1, r1, r0
 80074fe:	6021      	streq	r1, [r4, #0]
 8007500:	e7ed      	b.n	80074de <_free_r+0x1e>
 8007502:	461a      	mov	r2, r3
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	b10b      	cbz	r3, 800750c <_free_r+0x4c>
 8007508:	42a3      	cmp	r3, r4
 800750a:	d9fa      	bls.n	8007502 <_free_r+0x42>
 800750c:	6811      	ldr	r1, [r2, #0]
 800750e:	1850      	adds	r0, r2, r1
 8007510:	42a0      	cmp	r0, r4
 8007512:	d10b      	bne.n	800752c <_free_r+0x6c>
 8007514:	6820      	ldr	r0, [r4, #0]
 8007516:	4401      	add	r1, r0
 8007518:	1850      	adds	r0, r2, r1
 800751a:	4283      	cmp	r3, r0
 800751c:	6011      	str	r1, [r2, #0]
 800751e:	d1e0      	bne.n	80074e2 <_free_r+0x22>
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	6053      	str	r3, [r2, #4]
 8007526:	4408      	add	r0, r1
 8007528:	6010      	str	r0, [r2, #0]
 800752a:	e7da      	b.n	80074e2 <_free_r+0x22>
 800752c:	d902      	bls.n	8007534 <_free_r+0x74>
 800752e:	230c      	movs	r3, #12
 8007530:	602b      	str	r3, [r5, #0]
 8007532:	e7d6      	b.n	80074e2 <_free_r+0x22>
 8007534:	6820      	ldr	r0, [r4, #0]
 8007536:	1821      	adds	r1, r4, r0
 8007538:	428b      	cmp	r3, r1
 800753a:	bf04      	itt	eq
 800753c:	6819      	ldreq	r1, [r3, #0]
 800753e:	685b      	ldreq	r3, [r3, #4]
 8007540:	6063      	str	r3, [r4, #4]
 8007542:	bf04      	itt	eq
 8007544:	1809      	addeq	r1, r1, r0
 8007546:	6021      	streq	r1, [r4, #0]
 8007548:	6054      	str	r4, [r2, #4]
 800754a:	e7ca      	b.n	80074e2 <_free_r+0x22>
 800754c:	bd38      	pop	{r3, r4, r5, pc}
 800754e:	bf00      	nop
 8007550:	20000534 	.word	0x20000534

08007554 <malloc>:
 8007554:	4b02      	ldr	r3, [pc, #8]	@ (8007560 <malloc+0xc>)
 8007556:	4601      	mov	r1, r0
 8007558:	6818      	ldr	r0, [r3, #0]
 800755a:	f000 b825 	b.w	80075a8 <_malloc_r>
 800755e:	bf00      	nop
 8007560:	20000024 	.word	0x20000024

08007564 <sbrk_aligned>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	4e0f      	ldr	r6, [pc, #60]	@ (80075a4 <sbrk_aligned+0x40>)
 8007568:	460c      	mov	r4, r1
 800756a:	6831      	ldr	r1, [r6, #0]
 800756c:	4605      	mov	r5, r0
 800756e:	b911      	cbnz	r1, 8007576 <sbrk_aligned+0x12>
 8007570:	f000 fe46 	bl	8008200 <_sbrk_r>
 8007574:	6030      	str	r0, [r6, #0]
 8007576:	4621      	mov	r1, r4
 8007578:	4628      	mov	r0, r5
 800757a:	f000 fe41 	bl	8008200 <_sbrk_r>
 800757e:	1c43      	adds	r3, r0, #1
 8007580:	d103      	bne.n	800758a <sbrk_aligned+0x26>
 8007582:	f04f 34ff 	mov.w	r4, #4294967295
 8007586:	4620      	mov	r0, r4
 8007588:	bd70      	pop	{r4, r5, r6, pc}
 800758a:	1cc4      	adds	r4, r0, #3
 800758c:	f024 0403 	bic.w	r4, r4, #3
 8007590:	42a0      	cmp	r0, r4
 8007592:	d0f8      	beq.n	8007586 <sbrk_aligned+0x22>
 8007594:	1a21      	subs	r1, r4, r0
 8007596:	4628      	mov	r0, r5
 8007598:	f000 fe32 	bl	8008200 <_sbrk_r>
 800759c:	3001      	adds	r0, #1
 800759e:	d1f2      	bne.n	8007586 <sbrk_aligned+0x22>
 80075a0:	e7ef      	b.n	8007582 <sbrk_aligned+0x1e>
 80075a2:	bf00      	nop
 80075a4:	20000530 	.word	0x20000530

080075a8 <_malloc_r>:
 80075a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075ac:	1ccd      	adds	r5, r1, #3
 80075ae:	f025 0503 	bic.w	r5, r5, #3
 80075b2:	3508      	adds	r5, #8
 80075b4:	2d0c      	cmp	r5, #12
 80075b6:	bf38      	it	cc
 80075b8:	250c      	movcc	r5, #12
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	4606      	mov	r6, r0
 80075be:	db01      	blt.n	80075c4 <_malloc_r+0x1c>
 80075c0:	42a9      	cmp	r1, r5
 80075c2:	d904      	bls.n	80075ce <_malloc_r+0x26>
 80075c4:	230c      	movs	r3, #12
 80075c6:	6033      	str	r3, [r6, #0]
 80075c8:	2000      	movs	r0, #0
 80075ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076a4 <_malloc_r+0xfc>
 80075d2:	f000 f869 	bl	80076a8 <__malloc_lock>
 80075d6:	f8d8 3000 	ldr.w	r3, [r8]
 80075da:	461c      	mov	r4, r3
 80075dc:	bb44      	cbnz	r4, 8007630 <_malloc_r+0x88>
 80075de:	4629      	mov	r1, r5
 80075e0:	4630      	mov	r0, r6
 80075e2:	f7ff ffbf 	bl	8007564 <sbrk_aligned>
 80075e6:	1c43      	adds	r3, r0, #1
 80075e8:	4604      	mov	r4, r0
 80075ea:	d158      	bne.n	800769e <_malloc_r+0xf6>
 80075ec:	f8d8 4000 	ldr.w	r4, [r8]
 80075f0:	4627      	mov	r7, r4
 80075f2:	2f00      	cmp	r7, #0
 80075f4:	d143      	bne.n	800767e <_malloc_r+0xd6>
 80075f6:	2c00      	cmp	r4, #0
 80075f8:	d04b      	beq.n	8007692 <_malloc_r+0xea>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	4639      	mov	r1, r7
 80075fe:	4630      	mov	r0, r6
 8007600:	eb04 0903 	add.w	r9, r4, r3
 8007604:	f000 fdfc 	bl	8008200 <_sbrk_r>
 8007608:	4581      	cmp	r9, r0
 800760a:	d142      	bne.n	8007692 <_malloc_r+0xea>
 800760c:	6821      	ldr	r1, [r4, #0]
 800760e:	1a6d      	subs	r5, r5, r1
 8007610:	4629      	mov	r1, r5
 8007612:	4630      	mov	r0, r6
 8007614:	f7ff ffa6 	bl	8007564 <sbrk_aligned>
 8007618:	3001      	adds	r0, #1
 800761a:	d03a      	beq.n	8007692 <_malloc_r+0xea>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	442b      	add	r3, r5
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	f8d8 3000 	ldr.w	r3, [r8]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	bb62      	cbnz	r2, 8007684 <_malloc_r+0xdc>
 800762a:	f8c8 7000 	str.w	r7, [r8]
 800762e:	e00f      	b.n	8007650 <_malloc_r+0xa8>
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	1b52      	subs	r2, r2, r5
 8007634:	d420      	bmi.n	8007678 <_malloc_r+0xd0>
 8007636:	2a0b      	cmp	r2, #11
 8007638:	d917      	bls.n	800766a <_malloc_r+0xc2>
 800763a:	1961      	adds	r1, r4, r5
 800763c:	42a3      	cmp	r3, r4
 800763e:	6025      	str	r5, [r4, #0]
 8007640:	bf18      	it	ne
 8007642:	6059      	strne	r1, [r3, #4]
 8007644:	6863      	ldr	r3, [r4, #4]
 8007646:	bf08      	it	eq
 8007648:	f8c8 1000 	streq.w	r1, [r8]
 800764c:	5162      	str	r2, [r4, r5]
 800764e:	604b      	str	r3, [r1, #4]
 8007650:	4630      	mov	r0, r6
 8007652:	f000 f82f 	bl	80076b4 <__malloc_unlock>
 8007656:	f104 000b 	add.w	r0, r4, #11
 800765a:	1d23      	adds	r3, r4, #4
 800765c:	f020 0007 	bic.w	r0, r0, #7
 8007660:	1ac2      	subs	r2, r0, r3
 8007662:	bf1c      	itt	ne
 8007664:	1a1b      	subne	r3, r3, r0
 8007666:	50a3      	strne	r3, [r4, r2]
 8007668:	e7af      	b.n	80075ca <_malloc_r+0x22>
 800766a:	6862      	ldr	r2, [r4, #4]
 800766c:	42a3      	cmp	r3, r4
 800766e:	bf0c      	ite	eq
 8007670:	f8c8 2000 	streq.w	r2, [r8]
 8007674:	605a      	strne	r2, [r3, #4]
 8007676:	e7eb      	b.n	8007650 <_malloc_r+0xa8>
 8007678:	4623      	mov	r3, r4
 800767a:	6864      	ldr	r4, [r4, #4]
 800767c:	e7ae      	b.n	80075dc <_malloc_r+0x34>
 800767e:	463c      	mov	r4, r7
 8007680:	687f      	ldr	r7, [r7, #4]
 8007682:	e7b6      	b.n	80075f2 <_malloc_r+0x4a>
 8007684:	461a      	mov	r2, r3
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	42a3      	cmp	r3, r4
 800768a:	d1fb      	bne.n	8007684 <_malloc_r+0xdc>
 800768c:	2300      	movs	r3, #0
 800768e:	6053      	str	r3, [r2, #4]
 8007690:	e7de      	b.n	8007650 <_malloc_r+0xa8>
 8007692:	230c      	movs	r3, #12
 8007694:	6033      	str	r3, [r6, #0]
 8007696:	4630      	mov	r0, r6
 8007698:	f000 f80c 	bl	80076b4 <__malloc_unlock>
 800769c:	e794      	b.n	80075c8 <_malloc_r+0x20>
 800769e:	6005      	str	r5, [r0, #0]
 80076a0:	e7d6      	b.n	8007650 <_malloc_r+0xa8>
 80076a2:	bf00      	nop
 80076a4:	20000534 	.word	0x20000534

080076a8 <__malloc_lock>:
 80076a8:	4801      	ldr	r0, [pc, #4]	@ (80076b0 <__malloc_lock+0x8>)
 80076aa:	f7ff b8ba 	b.w	8006822 <__retarget_lock_acquire_recursive>
 80076ae:	bf00      	nop
 80076b0:	2000052c 	.word	0x2000052c

080076b4 <__malloc_unlock>:
 80076b4:	4801      	ldr	r0, [pc, #4]	@ (80076bc <__malloc_unlock+0x8>)
 80076b6:	f7ff b8b5 	b.w	8006824 <__retarget_lock_release_recursive>
 80076ba:	bf00      	nop
 80076bc:	2000052c 	.word	0x2000052c

080076c0 <_Balloc>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	69c6      	ldr	r6, [r0, #28]
 80076c4:	4604      	mov	r4, r0
 80076c6:	460d      	mov	r5, r1
 80076c8:	b976      	cbnz	r6, 80076e8 <_Balloc+0x28>
 80076ca:	2010      	movs	r0, #16
 80076cc:	f7ff ff42 	bl	8007554 <malloc>
 80076d0:	4602      	mov	r2, r0
 80076d2:	61e0      	str	r0, [r4, #28]
 80076d4:	b920      	cbnz	r0, 80076e0 <_Balloc+0x20>
 80076d6:	4b18      	ldr	r3, [pc, #96]	@ (8007738 <_Balloc+0x78>)
 80076d8:	4818      	ldr	r0, [pc, #96]	@ (800773c <_Balloc+0x7c>)
 80076da:	216b      	movs	r1, #107	@ 0x6b
 80076dc:	f000 fdae 	bl	800823c <__assert_func>
 80076e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076e4:	6006      	str	r6, [r0, #0]
 80076e6:	60c6      	str	r6, [r0, #12]
 80076e8:	69e6      	ldr	r6, [r4, #28]
 80076ea:	68f3      	ldr	r3, [r6, #12]
 80076ec:	b183      	cbz	r3, 8007710 <_Balloc+0x50>
 80076ee:	69e3      	ldr	r3, [r4, #28]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076f6:	b9b8      	cbnz	r0, 8007728 <_Balloc+0x68>
 80076f8:	2101      	movs	r1, #1
 80076fa:	fa01 f605 	lsl.w	r6, r1, r5
 80076fe:	1d72      	adds	r2, r6, #5
 8007700:	0092      	lsls	r2, r2, #2
 8007702:	4620      	mov	r0, r4
 8007704:	f000 fdb8 	bl	8008278 <_calloc_r>
 8007708:	b160      	cbz	r0, 8007724 <_Balloc+0x64>
 800770a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800770e:	e00e      	b.n	800772e <_Balloc+0x6e>
 8007710:	2221      	movs	r2, #33	@ 0x21
 8007712:	2104      	movs	r1, #4
 8007714:	4620      	mov	r0, r4
 8007716:	f000 fdaf 	bl	8008278 <_calloc_r>
 800771a:	69e3      	ldr	r3, [r4, #28]
 800771c:	60f0      	str	r0, [r6, #12]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e4      	bne.n	80076ee <_Balloc+0x2e>
 8007724:	2000      	movs	r0, #0
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	6802      	ldr	r2, [r0, #0]
 800772a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800772e:	2300      	movs	r3, #0
 8007730:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007734:	e7f7      	b.n	8007726 <_Balloc+0x66>
 8007736:	bf00      	nop
 8007738:	08009d81 	.word	0x08009d81
 800773c:	08009e01 	.word	0x08009e01

08007740 <_Bfree>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	69c6      	ldr	r6, [r0, #28]
 8007744:	4605      	mov	r5, r0
 8007746:	460c      	mov	r4, r1
 8007748:	b976      	cbnz	r6, 8007768 <_Bfree+0x28>
 800774a:	2010      	movs	r0, #16
 800774c:	f7ff ff02 	bl	8007554 <malloc>
 8007750:	4602      	mov	r2, r0
 8007752:	61e8      	str	r0, [r5, #28]
 8007754:	b920      	cbnz	r0, 8007760 <_Bfree+0x20>
 8007756:	4b09      	ldr	r3, [pc, #36]	@ (800777c <_Bfree+0x3c>)
 8007758:	4809      	ldr	r0, [pc, #36]	@ (8007780 <_Bfree+0x40>)
 800775a:	218f      	movs	r1, #143	@ 0x8f
 800775c:	f000 fd6e 	bl	800823c <__assert_func>
 8007760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007764:	6006      	str	r6, [r0, #0]
 8007766:	60c6      	str	r6, [r0, #12]
 8007768:	b13c      	cbz	r4, 800777a <_Bfree+0x3a>
 800776a:	69eb      	ldr	r3, [r5, #28]
 800776c:	6862      	ldr	r2, [r4, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007774:	6021      	str	r1, [r4, #0]
 8007776:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	08009d81 	.word	0x08009d81
 8007780:	08009e01 	.word	0x08009e01

08007784 <__multadd>:
 8007784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007788:	690d      	ldr	r5, [r1, #16]
 800778a:	4607      	mov	r7, r0
 800778c:	460c      	mov	r4, r1
 800778e:	461e      	mov	r6, r3
 8007790:	f101 0c14 	add.w	ip, r1, #20
 8007794:	2000      	movs	r0, #0
 8007796:	f8dc 3000 	ldr.w	r3, [ip]
 800779a:	b299      	uxth	r1, r3
 800779c:	fb02 6101 	mla	r1, r2, r1, r6
 80077a0:	0c1e      	lsrs	r6, r3, #16
 80077a2:	0c0b      	lsrs	r3, r1, #16
 80077a4:	fb02 3306 	mla	r3, r2, r6, r3
 80077a8:	b289      	uxth	r1, r1
 80077aa:	3001      	adds	r0, #1
 80077ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077b0:	4285      	cmp	r5, r0
 80077b2:	f84c 1b04 	str.w	r1, [ip], #4
 80077b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077ba:	dcec      	bgt.n	8007796 <__multadd+0x12>
 80077bc:	b30e      	cbz	r6, 8007802 <__multadd+0x7e>
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	dc19      	bgt.n	80077f8 <__multadd+0x74>
 80077c4:	6861      	ldr	r1, [r4, #4]
 80077c6:	4638      	mov	r0, r7
 80077c8:	3101      	adds	r1, #1
 80077ca:	f7ff ff79 	bl	80076c0 <_Balloc>
 80077ce:	4680      	mov	r8, r0
 80077d0:	b928      	cbnz	r0, 80077de <__multadd+0x5a>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007808 <__multadd+0x84>)
 80077d6:	480d      	ldr	r0, [pc, #52]	@ (800780c <__multadd+0x88>)
 80077d8:	21ba      	movs	r1, #186	@ 0xba
 80077da:	f000 fd2f 	bl	800823c <__assert_func>
 80077de:	6922      	ldr	r2, [r4, #16]
 80077e0:	3202      	adds	r2, #2
 80077e2:	f104 010c 	add.w	r1, r4, #12
 80077e6:	0092      	lsls	r2, r2, #2
 80077e8:	300c      	adds	r0, #12
 80077ea:	f000 fd19 	bl	8008220 <memcpy>
 80077ee:	4621      	mov	r1, r4
 80077f0:	4638      	mov	r0, r7
 80077f2:	f7ff ffa5 	bl	8007740 <_Bfree>
 80077f6:	4644      	mov	r4, r8
 80077f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077fc:	3501      	adds	r5, #1
 80077fe:	615e      	str	r6, [r3, #20]
 8007800:	6125      	str	r5, [r4, #16]
 8007802:	4620      	mov	r0, r4
 8007804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007808:	08009df0 	.word	0x08009df0
 800780c:	08009e01 	.word	0x08009e01

08007810 <__hi0bits>:
 8007810:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007814:	4603      	mov	r3, r0
 8007816:	bf36      	itet	cc
 8007818:	0403      	lslcc	r3, r0, #16
 800781a:	2000      	movcs	r0, #0
 800781c:	2010      	movcc	r0, #16
 800781e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007822:	bf3c      	itt	cc
 8007824:	021b      	lslcc	r3, r3, #8
 8007826:	3008      	addcc	r0, #8
 8007828:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800782c:	bf3c      	itt	cc
 800782e:	011b      	lslcc	r3, r3, #4
 8007830:	3004      	addcc	r0, #4
 8007832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007836:	bf3c      	itt	cc
 8007838:	009b      	lslcc	r3, r3, #2
 800783a:	3002      	addcc	r0, #2
 800783c:	2b00      	cmp	r3, #0
 800783e:	db05      	blt.n	800784c <__hi0bits+0x3c>
 8007840:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007844:	f100 0001 	add.w	r0, r0, #1
 8007848:	bf08      	it	eq
 800784a:	2020      	moveq	r0, #32
 800784c:	4770      	bx	lr

0800784e <__lo0bits>:
 800784e:	6803      	ldr	r3, [r0, #0]
 8007850:	4602      	mov	r2, r0
 8007852:	f013 0007 	ands.w	r0, r3, #7
 8007856:	d00b      	beq.n	8007870 <__lo0bits+0x22>
 8007858:	07d9      	lsls	r1, r3, #31
 800785a:	d421      	bmi.n	80078a0 <__lo0bits+0x52>
 800785c:	0798      	lsls	r0, r3, #30
 800785e:	bf49      	itett	mi
 8007860:	085b      	lsrmi	r3, r3, #1
 8007862:	089b      	lsrpl	r3, r3, #2
 8007864:	2001      	movmi	r0, #1
 8007866:	6013      	strmi	r3, [r2, #0]
 8007868:	bf5c      	itt	pl
 800786a:	6013      	strpl	r3, [r2, #0]
 800786c:	2002      	movpl	r0, #2
 800786e:	4770      	bx	lr
 8007870:	b299      	uxth	r1, r3
 8007872:	b909      	cbnz	r1, 8007878 <__lo0bits+0x2a>
 8007874:	0c1b      	lsrs	r3, r3, #16
 8007876:	2010      	movs	r0, #16
 8007878:	b2d9      	uxtb	r1, r3
 800787a:	b909      	cbnz	r1, 8007880 <__lo0bits+0x32>
 800787c:	3008      	adds	r0, #8
 800787e:	0a1b      	lsrs	r3, r3, #8
 8007880:	0719      	lsls	r1, r3, #28
 8007882:	bf04      	itt	eq
 8007884:	091b      	lsreq	r3, r3, #4
 8007886:	3004      	addeq	r0, #4
 8007888:	0799      	lsls	r1, r3, #30
 800788a:	bf04      	itt	eq
 800788c:	089b      	lsreq	r3, r3, #2
 800788e:	3002      	addeq	r0, #2
 8007890:	07d9      	lsls	r1, r3, #31
 8007892:	d403      	bmi.n	800789c <__lo0bits+0x4e>
 8007894:	085b      	lsrs	r3, r3, #1
 8007896:	f100 0001 	add.w	r0, r0, #1
 800789a:	d003      	beq.n	80078a4 <__lo0bits+0x56>
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	4770      	bx	lr
 80078a0:	2000      	movs	r0, #0
 80078a2:	4770      	bx	lr
 80078a4:	2020      	movs	r0, #32
 80078a6:	4770      	bx	lr

080078a8 <__i2b>:
 80078a8:	b510      	push	{r4, lr}
 80078aa:	460c      	mov	r4, r1
 80078ac:	2101      	movs	r1, #1
 80078ae:	f7ff ff07 	bl	80076c0 <_Balloc>
 80078b2:	4602      	mov	r2, r0
 80078b4:	b928      	cbnz	r0, 80078c2 <__i2b+0x1a>
 80078b6:	4b05      	ldr	r3, [pc, #20]	@ (80078cc <__i2b+0x24>)
 80078b8:	4805      	ldr	r0, [pc, #20]	@ (80078d0 <__i2b+0x28>)
 80078ba:	f240 1145 	movw	r1, #325	@ 0x145
 80078be:	f000 fcbd 	bl	800823c <__assert_func>
 80078c2:	2301      	movs	r3, #1
 80078c4:	6144      	str	r4, [r0, #20]
 80078c6:	6103      	str	r3, [r0, #16]
 80078c8:	bd10      	pop	{r4, pc}
 80078ca:	bf00      	nop
 80078cc:	08009df0 	.word	0x08009df0
 80078d0:	08009e01 	.word	0x08009e01

080078d4 <__multiply>:
 80078d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d8:	4614      	mov	r4, r2
 80078da:	690a      	ldr	r2, [r1, #16]
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	429a      	cmp	r2, r3
 80078e0:	bfa8      	it	ge
 80078e2:	4623      	movge	r3, r4
 80078e4:	460f      	mov	r7, r1
 80078e6:	bfa4      	itt	ge
 80078e8:	460c      	movge	r4, r1
 80078ea:	461f      	movge	r7, r3
 80078ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80078f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80078f4:	68a3      	ldr	r3, [r4, #8]
 80078f6:	6861      	ldr	r1, [r4, #4]
 80078f8:	eb0a 0609 	add.w	r6, sl, r9
 80078fc:	42b3      	cmp	r3, r6
 80078fe:	b085      	sub	sp, #20
 8007900:	bfb8      	it	lt
 8007902:	3101      	addlt	r1, #1
 8007904:	f7ff fedc 	bl	80076c0 <_Balloc>
 8007908:	b930      	cbnz	r0, 8007918 <__multiply+0x44>
 800790a:	4602      	mov	r2, r0
 800790c:	4b44      	ldr	r3, [pc, #272]	@ (8007a20 <__multiply+0x14c>)
 800790e:	4845      	ldr	r0, [pc, #276]	@ (8007a24 <__multiply+0x150>)
 8007910:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007914:	f000 fc92 	bl	800823c <__assert_func>
 8007918:	f100 0514 	add.w	r5, r0, #20
 800791c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007920:	462b      	mov	r3, r5
 8007922:	2200      	movs	r2, #0
 8007924:	4543      	cmp	r3, r8
 8007926:	d321      	bcc.n	800796c <__multiply+0x98>
 8007928:	f107 0114 	add.w	r1, r7, #20
 800792c:	f104 0214 	add.w	r2, r4, #20
 8007930:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007934:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007938:	9302      	str	r3, [sp, #8]
 800793a:	1b13      	subs	r3, r2, r4
 800793c:	3b15      	subs	r3, #21
 800793e:	f023 0303 	bic.w	r3, r3, #3
 8007942:	3304      	adds	r3, #4
 8007944:	f104 0715 	add.w	r7, r4, #21
 8007948:	42ba      	cmp	r2, r7
 800794a:	bf38      	it	cc
 800794c:	2304      	movcc	r3, #4
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	9b02      	ldr	r3, [sp, #8]
 8007952:	9103      	str	r1, [sp, #12]
 8007954:	428b      	cmp	r3, r1
 8007956:	d80c      	bhi.n	8007972 <__multiply+0x9e>
 8007958:	2e00      	cmp	r6, #0
 800795a:	dd03      	ble.n	8007964 <__multiply+0x90>
 800795c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007960:	2b00      	cmp	r3, #0
 8007962:	d05b      	beq.n	8007a1c <__multiply+0x148>
 8007964:	6106      	str	r6, [r0, #16]
 8007966:	b005      	add	sp, #20
 8007968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796c:	f843 2b04 	str.w	r2, [r3], #4
 8007970:	e7d8      	b.n	8007924 <__multiply+0x50>
 8007972:	f8b1 a000 	ldrh.w	sl, [r1]
 8007976:	f1ba 0f00 	cmp.w	sl, #0
 800797a:	d024      	beq.n	80079c6 <__multiply+0xf2>
 800797c:	f104 0e14 	add.w	lr, r4, #20
 8007980:	46a9      	mov	r9, r5
 8007982:	f04f 0c00 	mov.w	ip, #0
 8007986:	f85e 7b04 	ldr.w	r7, [lr], #4
 800798a:	f8d9 3000 	ldr.w	r3, [r9]
 800798e:	fa1f fb87 	uxth.w	fp, r7
 8007992:	b29b      	uxth	r3, r3
 8007994:	fb0a 330b 	mla	r3, sl, fp, r3
 8007998:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800799c:	f8d9 7000 	ldr.w	r7, [r9]
 80079a0:	4463      	add	r3, ip
 80079a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80079a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80079aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80079b4:	4572      	cmp	r2, lr
 80079b6:	f849 3b04 	str.w	r3, [r9], #4
 80079ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80079be:	d8e2      	bhi.n	8007986 <__multiply+0xb2>
 80079c0:	9b01      	ldr	r3, [sp, #4]
 80079c2:	f845 c003 	str.w	ip, [r5, r3]
 80079c6:	9b03      	ldr	r3, [sp, #12]
 80079c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80079cc:	3104      	adds	r1, #4
 80079ce:	f1b9 0f00 	cmp.w	r9, #0
 80079d2:	d021      	beq.n	8007a18 <__multiply+0x144>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	f104 0c14 	add.w	ip, r4, #20
 80079da:	46ae      	mov	lr, r5
 80079dc:	f04f 0a00 	mov.w	sl, #0
 80079e0:	f8bc b000 	ldrh.w	fp, [ip]
 80079e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80079e8:	fb09 770b 	mla	r7, r9, fp, r7
 80079ec:	4457      	add	r7, sl
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80079f4:	f84e 3b04 	str.w	r3, [lr], #4
 80079f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a00:	f8be 3000 	ldrh.w	r3, [lr]
 8007a04:	fb09 330a 	mla	r3, r9, sl, r3
 8007a08:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007a0c:	4562      	cmp	r2, ip
 8007a0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a12:	d8e5      	bhi.n	80079e0 <__multiply+0x10c>
 8007a14:	9f01      	ldr	r7, [sp, #4]
 8007a16:	51eb      	str	r3, [r5, r7]
 8007a18:	3504      	adds	r5, #4
 8007a1a:	e799      	b.n	8007950 <__multiply+0x7c>
 8007a1c:	3e01      	subs	r6, #1
 8007a1e:	e79b      	b.n	8007958 <__multiply+0x84>
 8007a20:	08009df0 	.word	0x08009df0
 8007a24:	08009e01 	.word	0x08009e01

08007a28 <__pow5mult>:
 8007a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a2c:	4615      	mov	r5, r2
 8007a2e:	f012 0203 	ands.w	r2, r2, #3
 8007a32:	4607      	mov	r7, r0
 8007a34:	460e      	mov	r6, r1
 8007a36:	d007      	beq.n	8007a48 <__pow5mult+0x20>
 8007a38:	4c25      	ldr	r4, [pc, #148]	@ (8007ad0 <__pow5mult+0xa8>)
 8007a3a:	3a01      	subs	r2, #1
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a42:	f7ff fe9f 	bl	8007784 <__multadd>
 8007a46:	4606      	mov	r6, r0
 8007a48:	10ad      	asrs	r5, r5, #2
 8007a4a:	d03d      	beq.n	8007ac8 <__pow5mult+0xa0>
 8007a4c:	69fc      	ldr	r4, [r7, #28]
 8007a4e:	b97c      	cbnz	r4, 8007a70 <__pow5mult+0x48>
 8007a50:	2010      	movs	r0, #16
 8007a52:	f7ff fd7f 	bl	8007554 <malloc>
 8007a56:	4602      	mov	r2, r0
 8007a58:	61f8      	str	r0, [r7, #28]
 8007a5a:	b928      	cbnz	r0, 8007a68 <__pow5mult+0x40>
 8007a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ad4 <__pow5mult+0xac>)
 8007a5e:	481e      	ldr	r0, [pc, #120]	@ (8007ad8 <__pow5mult+0xb0>)
 8007a60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a64:	f000 fbea 	bl	800823c <__assert_func>
 8007a68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a6c:	6004      	str	r4, [r0, #0]
 8007a6e:	60c4      	str	r4, [r0, #12]
 8007a70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a78:	b94c      	cbnz	r4, 8007a8e <__pow5mult+0x66>
 8007a7a:	f240 2171 	movw	r1, #625	@ 0x271
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f7ff ff12 	bl	80078a8 <__i2b>
 8007a84:	2300      	movs	r3, #0
 8007a86:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	6003      	str	r3, [r0, #0]
 8007a8e:	f04f 0900 	mov.w	r9, #0
 8007a92:	07eb      	lsls	r3, r5, #31
 8007a94:	d50a      	bpl.n	8007aac <__pow5mult+0x84>
 8007a96:	4631      	mov	r1, r6
 8007a98:	4622      	mov	r2, r4
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	f7ff ff1a 	bl	80078d4 <__multiply>
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	4680      	mov	r8, r0
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	f7ff fe4b 	bl	8007740 <_Bfree>
 8007aaa:	4646      	mov	r6, r8
 8007aac:	106d      	asrs	r5, r5, #1
 8007aae:	d00b      	beq.n	8007ac8 <__pow5mult+0xa0>
 8007ab0:	6820      	ldr	r0, [r4, #0]
 8007ab2:	b938      	cbnz	r0, 8007ac4 <__pow5mult+0x9c>
 8007ab4:	4622      	mov	r2, r4
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f7ff ff0b 	bl	80078d4 <__multiply>
 8007abe:	6020      	str	r0, [r4, #0]
 8007ac0:	f8c0 9000 	str.w	r9, [r0]
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	e7e4      	b.n	8007a92 <__pow5mult+0x6a>
 8007ac8:	4630      	mov	r0, r6
 8007aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ace:	bf00      	nop
 8007ad0:	08009e5c 	.word	0x08009e5c
 8007ad4:	08009d81 	.word	0x08009d81
 8007ad8:	08009e01 	.word	0x08009e01

08007adc <__lshift>:
 8007adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae0:	460c      	mov	r4, r1
 8007ae2:	6849      	ldr	r1, [r1, #4]
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007aea:	68a3      	ldr	r3, [r4, #8]
 8007aec:	4607      	mov	r7, r0
 8007aee:	4691      	mov	r9, r2
 8007af0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007af4:	f108 0601 	add.w	r6, r8, #1
 8007af8:	42b3      	cmp	r3, r6
 8007afa:	db0b      	blt.n	8007b14 <__lshift+0x38>
 8007afc:	4638      	mov	r0, r7
 8007afe:	f7ff fddf 	bl	80076c0 <_Balloc>
 8007b02:	4605      	mov	r5, r0
 8007b04:	b948      	cbnz	r0, 8007b1a <__lshift+0x3e>
 8007b06:	4602      	mov	r2, r0
 8007b08:	4b28      	ldr	r3, [pc, #160]	@ (8007bac <__lshift+0xd0>)
 8007b0a:	4829      	ldr	r0, [pc, #164]	@ (8007bb0 <__lshift+0xd4>)
 8007b0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007b10:	f000 fb94 	bl	800823c <__assert_func>
 8007b14:	3101      	adds	r1, #1
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	e7ee      	b.n	8007af8 <__lshift+0x1c>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f100 0114 	add.w	r1, r0, #20
 8007b20:	f100 0210 	add.w	r2, r0, #16
 8007b24:	4618      	mov	r0, r3
 8007b26:	4553      	cmp	r3, sl
 8007b28:	db33      	blt.n	8007b92 <__lshift+0xb6>
 8007b2a:	6920      	ldr	r0, [r4, #16]
 8007b2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b30:	f104 0314 	add.w	r3, r4, #20
 8007b34:	f019 091f 	ands.w	r9, r9, #31
 8007b38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b40:	d02b      	beq.n	8007b9a <__lshift+0xbe>
 8007b42:	f1c9 0e20 	rsb	lr, r9, #32
 8007b46:	468a      	mov	sl, r1
 8007b48:	2200      	movs	r2, #0
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	fa00 f009 	lsl.w	r0, r0, r9
 8007b50:	4310      	orrs	r0, r2
 8007b52:	f84a 0b04 	str.w	r0, [sl], #4
 8007b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b5a:	459c      	cmp	ip, r3
 8007b5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b60:	d8f3      	bhi.n	8007b4a <__lshift+0x6e>
 8007b62:	ebac 0304 	sub.w	r3, ip, r4
 8007b66:	3b15      	subs	r3, #21
 8007b68:	f023 0303 	bic.w	r3, r3, #3
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	f104 0015 	add.w	r0, r4, #21
 8007b72:	4584      	cmp	ip, r0
 8007b74:	bf38      	it	cc
 8007b76:	2304      	movcc	r3, #4
 8007b78:	50ca      	str	r2, [r1, r3]
 8007b7a:	b10a      	cbz	r2, 8007b80 <__lshift+0xa4>
 8007b7c:	f108 0602 	add.w	r6, r8, #2
 8007b80:	3e01      	subs	r6, #1
 8007b82:	4638      	mov	r0, r7
 8007b84:	612e      	str	r6, [r5, #16]
 8007b86:	4621      	mov	r1, r4
 8007b88:	f7ff fdda 	bl	8007740 <_Bfree>
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b92:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b96:	3301      	adds	r3, #1
 8007b98:	e7c5      	b.n	8007b26 <__lshift+0x4a>
 8007b9a:	3904      	subs	r1, #4
 8007b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ba0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ba4:	459c      	cmp	ip, r3
 8007ba6:	d8f9      	bhi.n	8007b9c <__lshift+0xc0>
 8007ba8:	e7ea      	b.n	8007b80 <__lshift+0xa4>
 8007baa:	bf00      	nop
 8007bac:	08009df0 	.word	0x08009df0
 8007bb0:	08009e01 	.word	0x08009e01

08007bb4 <__mcmp>:
 8007bb4:	690a      	ldr	r2, [r1, #16]
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	6900      	ldr	r0, [r0, #16]
 8007bba:	1a80      	subs	r0, r0, r2
 8007bbc:	b530      	push	{r4, r5, lr}
 8007bbe:	d10e      	bne.n	8007bde <__mcmp+0x2a>
 8007bc0:	3314      	adds	r3, #20
 8007bc2:	3114      	adds	r1, #20
 8007bc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007bc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007bcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007bd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007bd4:	4295      	cmp	r5, r2
 8007bd6:	d003      	beq.n	8007be0 <__mcmp+0x2c>
 8007bd8:	d205      	bcs.n	8007be6 <__mcmp+0x32>
 8007bda:	f04f 30ff 	mov.w	r0, #4294967295
 8007bde:	bd30      	pop	{r4, r5, pc}
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	d3f3      	bcc.n	8007bcc <__mcmp+0x18>
 8007be4:	e7fb      	b.n	8007bde <__mcmp+0x2a>
 8007be6:	2001      	movs	r0, #1
 8007be8:	e7f9      	b.n	8007bde <__mcmp+0x2a>
	...

08007bec <__mdiff>:
 8007bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf0:	4689      	mov	r9, r1
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	4648      	mov	r0, r9
 8007bf8:	4614      	mov	r4, r2
 8007bfa:	f7ff ffdb 	bl	8007bb4 <__mcmp>
 8007bfe:	1e05      	subs	r5, r0, #0
 8007c00:	d112      	bne.n	8007c28 <__mdiff+0x3c>
 8007c02:	4629      	mov	r1, r5
 8007c04:	4630      	mov	r0, r6
 8007c06:	f7ff fd5b 	bl	80076c0 <_Balloc>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	b928      	cbnz	r0, 8007c1a <__mdiff+0x2e>
 8007c0e:	4b3f      	ldr	r3, [pc, #252]	@ (8007d0c <__mdiff+0x120>)
 8007c10:	f240 2137 	movw	r1, #567	@ 0x237
 8007c14:	483e      	ldr	r0, [pc, #248]	@ (8007d10 <__mdiff+0x124>)
 8007c16:	f000 fb11 	bl	800823c <__assert_func>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c20:	4610      	mov	r0, r2
 8007c22:	b003      	add	sp, #12
 8007c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c28:	bfbc      	itt	lt
 8007c2a:	464b      	movlt	r3, r9
 8007c2c:	46a1      	movlt	r9, r4
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c34:	bfba      	itte	lt
 8007c36:	461c      	movlt	r4, r3
 8007c38:	2501      	movlt	r5, #1
 8007c3a:	2500      	movge	r5, #0
 8007c3c:	f7ff fd40 	bl	80076c0 <_Balloc>
 8007c40:	4602      	mov	r2, r0
 8007c42:	b918      	cbnz	r0, 8007c4c <__mdiff+0x60>
 8007c44:	4b31      	ldr	r3, [pc, #196]	@ (8007d0c <__mdiff+0x120>)
 8007c46:	f240 2145 	movw	r1, #581	@ 0x245
 8007c4a:	e7e3      	b.n	8007c14 <__mdiff+0x28>
 8007c4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c50:	6926      	ldr	r6, [r4, #16]
 8007c52:	60c5      	str	r5, [r0, #12]
 8007c54:	f109 0310 	add.w	r3, r9, #16
 8007c58:	f109 0514 	add.w	r5, r9, #20
 8007c5c:	f104 0e14 	add.w	lr, r4, #20
 8007c60:	f100 0b14 	add.w	fp, r0, #20
 8007c64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c6c:	9301      	str	r3, [sp, #4]
 8007c6e:	46d9      	mov	r9, fp
 8007c70:	f04f 0c00 	mov.w	ip, #0
 8007c74:	9b01      	ldr	r3, [sp, #4]
 8007c76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c7e:	9301      	str	r3, [sp, #4]
 8007c80:	fa1f f38a 	uxth.w	r3, sl
 8007c84:	4619      	mov	r1, r3
 8007c86:	b283      	uxth	r3, r0
 8007c88:	1acb      	subs	r3, r1, r3
 8007c8a:	0c00      	lsrs	r0, r0, #16
 8007c8c:	4463      	add	r3, ip
 8007c8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c9c:	4576      	cmp	r6, lr
 8007c9e:	f849 3b04 	str.w	r3, [r9], #4
 8007ca2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ca6:	d8e5      	bhi.n	8007c74 <__mdiff+0x88>
 8007ca8:	1b33      	subs	r3, r6, r4
 8007caa:	3b15      	subs	r3, #21
 8007cac:	f023 0303 	bic.w	r3, r3, #3
 8007cb0:	3415      	adds	r4, #21
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	42a6      	cmp	r6, r4
 8007cb6:	bf38      	it	cc
 8007cb8:	2304      	movcc	r3, #4
 8007cba:	441d      	add	r5, r3
 8007cbc:	445b      	add	r3, fp
 8007cbe:	461e      	mov	r6, r3
 8007cc0:	462c      	mov	r4, r5
 8007cc2:	4544      	cmp	r4, r8
 8007cc4:	d30e      	bcc.n	8007ce4 <__mdiff+0xf8>
 8007cc6:	f108 0103 	add.w	r1, r8, #3
 8007cca:	1b49      	subs	r1, r1, r5
 8007ccc:	f021 0103 	bic.w	r1, r1, #3
 8007cd0:	3d03      	subs	r5, #3
 8007cd2:	45a8      	cmp	r8, r5
 8007cd4:	bf38      	it	cc
 8007cd6:	2100      	movcc	r1, #0
 8007cd8:	440b      	add	r3, r1
 8007cda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cde:	b191      	cbz	r1, 8007d06 <__mdiff+0x11a>
 8007ce0:	6117      	str	r7, [r2, #16]
 8007ce2:	e79d      	b.n	8007c20 <__mdiff+0x34>
 8007ce4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ce8:	46e6      	mov	lr, ip
 8007cea:	0c08      	lsrs	r0, r1, #16
 8007cec:	fa1c fc81 	uxtah	ip, ip, r1
 8007cf0:	4471      	add	r1, lr
 8007cf2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007cf6:	b289      	uxth	r1, r1
 8007cf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007cfc:	f846 1b04 	str.w	r1, [r6], #4
 8007d00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d04:	e7dd      	b.n	8007cc2 <__mdiff+0xd6>
 8007d06:	3f01      	subs	r7, #1
 8007d08:	e7e7      	b.n	8007cda <__mdiff+0xee>
 8007d0a:	bf00      	nop
 8007d0c:	08009df0 	.word	0x08009df0
 8007d10:	08009e01 	.word	0x08009e01

08007d14 <__d2b>:
 8007d14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d18:	460f      	mov	r7, r1
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	ec59 8b10 	vmov	r8, r9, d0
 8007d20:	4616      	mov	r6, r2
 8007d22:	f7ff fccd 	bl	80076c0 <_Balloc>
 8007d26:	4604      	mov	r4, r0
 8007d28:	b930      	cbnz	r0, 8007d38 <__d2b+0x24>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	4b23      	ldr	r3, [pc, #140]	@ (8007dbc <__d2b+0xa8>)
 8007d2e:	4824      	ldr	r0, [pc, #144]	@ (8007dc0 <__d2b+0xac>)
 8007d30:	f240 310f 	movw	r1, #783	@ 0x30f
 8007d34:	f000 fa82 	bl	800823c <__assert_func>
 8007d38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d40:	b10d      	cbz	r5, 8007d46 <__d2b+0x32>
 8007d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	f1b8 0300 	subs.w	r3, r8, #0
 8007d4c:	d023      	beq.n	8007d96 <__d2b+0x82>
 8007d4e:	4668      	mov	r0, sp
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	f7ff fd7c 	bl	800784e <__lo0bits>
 8007d56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d5a:	b1d0      	cbz	r0, 8007d92 <__d2b+0x7e>
 8007d5c:	f1c0 0320 	rsb	r3, r0, #32
 8007d60:	fa02 f303 	lsl.w	r3, r2, r3
 8007d64:	430b      	orrs	r3, r1
 8007d66:	40c2      	lsrs	r2, r0
 8007d68:	6163      	str	r3, [r4, #20]
 8007d6a:	9201      	str	r2, [sp, #4]
 8007d6c:	9b01      	ldr	r3, [sp, #4]
 8007d6e:	61a3      	str	r3, [r4, #24]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bf0c      	ite	eq
 8007d74:	2201      	moveq	r2, #1
 8007d76:	2202      	movne	r2, #2
 8007d78:	6122      	str	r2, [r4, #16]
 8007d7a:	b1a5      	cbz	r5, 8007da6 <__d2b+0x92>
 8007d7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d80:	4405      	add	r5, r0
 8007d82:	603d      	str	r5, [r7, #0]
 8007d84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d88:	6030      	str	r0, [r6, #0]
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	b003      	add	sp, #12
 8007d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d92:	6161      	str	r1, [r4, #20]
 8007d94:	e7ea      	b.n	8007d6c <__d2b+0x58>
 8007d96:	a801      	add	r0, sp, #4
 8007d98:	f7ff fd59 	bl	800784e <__lo0bits>
 8007d9c:	9b01      	ldr	r3, [sp, #4]
 8007d9e:	6163      	str	r3, [r4, #20]
 8007da0:	3020      	adds	r0, #32
 8007da2:	2201      	movs	r2, #1
 8007da4:	e7e8      	b.n	8007d78 <__d2b+0x64>
 8007da6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007daa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007dae:	6038      	str	r0, [r7, #0]
 8007db0:	6918      	ldr	r0, [r3, #16]
 8007db2:	f7ff fd2d 	bl	8007810 <__hi0bits>
 8007db6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007dba:	e7e5      	b.n	8007d88 <__d2b+0x74>
 8007dbc:	08009df0 	.word	0x08009df0
 8007dc0:	08009e01 	.word	0x08009e01

08007dc4 <__ssputs_r>:
 8007dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	688e      	ldr	r6, [r1, #8]
 8007dca:	461f      	mov	r7, r3
 8007dcc:	42be      	cmp	r6, r7
 8007dce:	680b      	ldr	r3, [r1, #0]
 8007dd0:	4682      	mov	sl, r0
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	4690      	mov	r8, r2
 8007dd6:	d82d      	bhi.n	8007e34 <__ssputs_r+0x70>
 8007dd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ddc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007de0:	d026      	beq.n	8007e30 <__ssputs_r+0x6c>
 8007de2:	6965      	ldr	r5, [r4, #20]
 8007de4:	6909      	ldr	r1, [r1, #16]
 8007de6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dea:	eba3 0901 	sub.w	r9, r3, r1
 8007dee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007df2:	1c7b      	adds	r3, r7, #1
 8007df4:	444b      	add	r3, r9
 8007df6:	106d      	asrs	r5, r5, #1
 8007df8:	429d      	cmp	r5, r3
 8007dfa:	bf38      	it	cc
 8007dfc:	461d      	movcc	r5, r3
 8007dfe:	0553      	lsls	r3, r2, #21
 8007e00:	d527      	bpl.n	8007e52 <__ssputs_r+0x8e>
 8007e02:	4629      	mov	r1, r5
 8007e04:	f7ff fbd0 	bl	80075a8 <_malloc_r>
 8007e08:	4606      	mov	r6, r0
 8007e0a:	b360      	cbz	r0, 8007e66 <__ssputs_r+0xa2>
 8007e0c:	6921      	ldr	r1, [r4, #16]
 8007e0e:	464a      	mov	r2, r9
 8007e10:	f000 fa06 	bl	8008220 <memcpy>
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e1e:	81a3      	strh	r3, [r4, #12]
 8007e20:	6126      	str	r6, [r4, #16]
 8007e22:	6165      	str	r5, [r4, #20]
 8007e24:	444e      	add	r6, r9
 8007e26:	eba5 0509 	sub.w	r5, r5, r9
 8007e2a:	6026      	str	r6, [r4, #0]
 8007e2c:	60a5      	str	r5, [r4, #8]
 8007e2e:	463e      	mov	r6, r7
 8007e30:	42be      	cmp	r6, r7
 8007e32:	d900      	bls.n	8007e36 <__ssputs_r+0x72>
 8007e34:	463e      	mov	r6, r7
 8007e36:	6820      	ldr	r0, [r4, #0]
 8007e38:	4632      	mov	r2, r6
 8007e3a:	4641      	mov	r1, r8
 8007e3c:	f000 f9c6 	bl	80081cc <memmove>
 8007e40:	68a3      	ldr	r3, [r4, #8]
 8007e42:	1b9b      	subs	r3, r3, r6
 8007e44:	60a3      	str	r3, [r4, #8]
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	4433      	add	r3, r6
 8007e4a:	6023      	str	r3, [r4, #0]
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e52:	462a      	mov	r2, r5
 8007e54:	f000 fa36 	bl	80082c4 <_realloc_r>
 8007e58:	4606      	mov	r6, r0
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d1e0      	bne.n	8007e20 <__ssputs_r+0x5c>
 8007e5e:	6921      	ldr	r1, [r4, #16]
 8007e60:	4650      	mov	r0, sl
 8007e62:	f7ff fb2d 	bl	80074c0 <_free_r>
 8007e66:	230c      	movs	r3, #12
 8007e68:	f8ca 3000 	str.w	r3, [sl]
 8007e6c:	89a3      	ldrh	r3, [r4, #12]
 8007e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e72:	81a3      	strh	r3, [r4, #12]
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295
 8007e78:	e7e9      	b.n	8007e4e <__ssputs_r+0x8a>
	...

08007e7c <_svfiprintf_r>:
 8007e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e80:	4698      	mov	r8, r3
 8007e82:	898b      	ldrh	r3, [r1, #12]
 8007e84:	061b      	lsls	r3, r3, #24
 8007e86:	b09d      	sub	sp, #116	@ 0x74
 8007e88:	4607      	mov	r7, r0
 8007e8a:	460d      	mov	r5, r1
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	d510      	bpl.n	8007eb2 <_svfiprintf_r+0x36>
 8007e90:	690b      	ldr	r3, [r1, #16]
 8007e92:	b973      	cbnz	r3, 8007eb2 <_svfiprintf_r+0x36>
 8007e94:	2140      	movs	r1, #64	@ 0x40
 8007e96:	f7ff fb87 	bl	80075a8 <_malloc_r>
 8007e9a:	6028      	str	r0, [r5, #0]
 8007e9c:	6128      	str	r0, [r5, #16]
 8007e9e:	b930      	cbnz	r0, 8007eae <_svfiprintf_r+0x32>
 8007ea0:	230c      	movs	r3, #12
 8007ea2:	603b      	str	r3, [r7, #0]
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	b01d      	add	sp, #116	@ 0x74
 8007eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eae:	2340      	movs	r3, #64	@ 0x40
 8007eb0:	616b      	str	r3, [r5, #20]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eb6:	2320      	movs	r3, #32
 8007eb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ebc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ec0:	2330      	movs	r3, #48	@ 0x30
 8007ec2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008060 <_svfiprintf_r+0x1e4>
 8007ec6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007eca:	f04f 0901 	mov.w	r9, #1
 8007ece:	4623      	mov	r3, r4
 8007ed0:	469a      	mov	sl, r3
 8007ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ed6:	b10a      	cbz	r2, 8007edc <_svfiprintf_r+0x60>
 8007ed8:	2a25      	cmp	r2, #37	@ 0x25
 8007eda:	d1f9      	bne.n	8007ed0 <_svfiprintf_r+0x54>
 8007edc:	ebba 0b04 	subs.w	fp, sl, r4
 8007ee0:	d00b      	beq.n	8007efa <_svfiprintf_r+0x7e>
 8007ee2:	465b      	mov	r3, fp
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	4638      	mov	r0, r7
 8007eea:	f7ff ff6b 	bl	8007dc4 <__ssputs_r>
 8007eee:	3001      	adds	r0, #1
 8007ef0:	f000 80a7 	beq.w	8008042 <_svfiprintf_r+0x1c6>
 8007ef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ef6:	445a      	add	r2, fp
 8007ef8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007efa:	f89a 3000 	ldrb.w	r3, [sl]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 809f 	beq.w	8008042 <_svfiprintf_r+0x1c6>
 8007f04:	2300      	movs	r3, #0
 8007f06:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f0e:	f10a 0a01 	add.w	sl, sl, #1
 8007f12:	9304      	str	r3, [sp, #16]
 8007f14:	9307      	str	r3, [sp, #28]
 8007f16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f1c:	4654      	mov	r4, sl
 8007f1e:	2205      	movs	r2, #5
 8007f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f24:	484e      	ldr	r0, [pc, #312]	@ (8008060 <_svfiprintf_r+0x1e4>)
 8007f26:	f7f8 f953 	bl	80001d0 <memchr>
 8007f2a:	9a04      	ldr	r2, [sp, #16]
 8007f2c:	b9d8      	cbnz	r0, 8007f66 <_svfiprintf_r+0xea>
 8007f2e:	06d0      	lsls	r0, r2, #27
 8007f30:	bf44      	itt	mi
 8007f32:	2320      	movmi	r3, #32
 8007f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f38:	0711      	lsls	r1, r2, #28
 8007f3a:	bf44      	itt	mi
 8007f3c:	232b      	movmi	r3, #43	@ 0x2b
 8007f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f42:	f89a 3000 	ldrb.w	r3, [sl]
 8007f46:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f48:	d015      	beq.n	8007f76 <_svfiprintf_r+0xfa>
 8007f4a:	9a07      	ldr	r2, [sp, #28]
 8007f4c:	4654      	mov	r4, sl
 8007f4e:	2000      	movs	r0, #0
 8007f50:	f04f 0c0a 	mov.w	ip, #10
 8007f54:	4621      	mov	r1, r4
 8007f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f5a:	3b30      	subs	r3, #48	@ 0x30
 8007f5c:	2b09      	cmp	r3, #9
 8007f5e:	d94b      	bls.n	8007ff8 <_svfiprintf_r+0x17c>
 8007f60:	b1b0      	cbz	r0, 8007f90 <_svfiprintf_r+0x114>
 8007f62:	9207      	str	r2, [sp, #28]
 8007f64:	e014      	b.n	8007f90 <_svfiprintf_r+0x114>
 8007f66:	eba0 0308 	sub.w	r3, r0, r8
 8007f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	9304      	str	r3, [sp, #16]
 8007f72:	46a2      	mov	sl, r4
 8007f74:	e7d2      	b.n	8007f1c <_svfiprintf_r+0xa0>
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	1d19      	adds	r1, r3, #4
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	9103      	str	r1, [sp, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	bfbb      	ittet	lt
 8007f82:	425b      	neglt	r3, r3
 8007f84:	f042 0202 	orrlt.w	r2, r2, #2
 8007f88:	9307      	strge	r3, [sp, #28]
 8007f8a:	9307      	strlt	r3, [sp, #28]
 8007f8c:	bfb8      	it	lt
 8007f8e:	9204      	strlt	r2, [sp, #16]
 8007f90:	7823      	ldrb	r3, [r4, #0]
 8007f92:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f94:	d10a      	bne.n	8007fac <_svfiprintf_r+0x130>
 8007f96:	7863      	ldrb	r3, [r4, #1]
 8007f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f9a:	d132      	bne.n	8008002 <_svfiprintf_r+0x186>
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	1d1a      	adds	r2, r3, #4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	9203      	str	r2, [sp, #12]
 8007fa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fa8:	3402      	adds	r4, #2
 8007faa:	9305      	str	r3, [sp, #20]
 8007fac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008070 <_svfiprintf_r+0x1f4>
 8007fb0:	7821      	ldrb	r1, [r4, #0]
 8007fb2:	2203      	movs	r2, #3
 8007fb4:	4650      	mov	r0, sl
 8007fb6:	f7f8 f90b 	bl	80001d0 <memchr>
 8007fba:	b138      	cbz	r0, 8007fcc <_svfiprintf_r+0x150>
 8007fbc:	9b04      	ldr	r3, [sp, #16]
 8007fbe:	eba0 000a 	sub.w	r0, r0, sl
 8007fc2:	2240      	movs	r2, #64	@ 0x40
 8007fc4:	4082      	lsls	r2, r0
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	3401      	adds	r4, #1
 8007fca:	9304      	str	r3, [sp, #16]
 8007fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd0:	4824      	ldr	r0, [pc, #144]	@ (8008064 <_svfiprintf_r+0x1e8>)
 8007fd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fd6:	2206      	movs	r2, #6
 8007fd8:	f7f8 f8fa 	bl	80001d0 <memchr>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d036      	beq.n	800804e <_svfiprintf_r+0x1d2>
 8007fe0:	4b21      	ldr	r3, [pc, #132]	@ (8008068 <_svfiprintf_r+0x1ec>)
 8007fe2:	bb1b      	cbnz	r3, 800802c <_svfiprintf_r+0x1b0>
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	3307      	adds	r3, #7
 8007fe8:	f023 0307 	bic.w	r3, r3, #7
 8007fec:	3308      	adds	r3, #8
 8007fee:	9303      	str	r3, [sp, #12]
 8007ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff2:	4433      	add	r3, r6
 8007ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ff6:	e76a      	b.n	8007ece <_svfiprintf_r+0x52>
 8007ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	2001      	movs	r0, #1
 8008000:	e7a8      	b.n	8007f54 <_svfiprintf_r+0xd8>
 8008002:	2300      	movs	r3, #0
 8008004:	3401      	adds	r4, #1
 8008006:	9305      	str	r3, [sp, #20]
 8008008:	4619      	mov	r1, r3
 800800a:	f04f 0c0a 	mov.w	ip, #10
 800800e:	4620      	mov	r0, r4
 8008010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008014:	3a30      	subs	r2, #48	@ 0x30
 8008016:	2a09      	cmp	r2, #9
 8008018:	d903      	bls.n	8008022 <_svfiprintf_r+0x1a6>
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0c6      	beq.n	8007fac <_svfiprintf_r+0x130>
 800801e:	9105      	str	r1, [sp, #20]
 8008020:	e7c4      	b.n	8007fac <_svfiprintf_r+0x130>
 8008022:	fb0c 2101 	mla	r1, ip, r1, r2
 8008026:	4604      	mov	r4, r0
 8008028:	2301      	movs	r3, #1
 800802a:	e7f0      	b.n	800800e <_svfiprintf_r+0x192>
 800802c:	ab03      	add	r3, sp, #12
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	462a      	mov	r2, r5
 8008032:	4b0e      	ldr	r3, [pc, #56]	@ (800806c <_svfiprintf_r+0x1f0>)
 8008034:	a904      	add	r1, sp, #16
 8008036:	4638      	mov	r0, r7
 8008038:	f7fd fe84 	bl	8005d44 <_printf_float>
 800803c:	1c42      	adds	r2, r0, #1
 800803e:	4606      	mov	r6, r0
 8008040:	d1d6      	bne.n	8007ff0 <_svfiprintf_r+0x174>
 8008042:	89ab      	ldrh	r3, [r5, #12]
 8008044:	065b      	lsls	r3, r3, #25
 8008046:	f53f af2d 	bmi.w	8007ea4 <_svfiprintf_r+0x28>
 800804a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800804c:	e72c      	b.n	8007ea8 <_svfiprintf_r+0x2c>
 800804e:	ab03      	add	r3, sp, #12
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	462a      	mov	r2, r5
 8008054:	4b05      	ldr	r3, [pc, #20]	@ (800806c <_svfiprintf_r+0x1f0>)
 8008056:	a904      	add	r1, sp, #16
 8008058:	4638      	mov	r0, r7
 800805a:	f7fe f90b 	bl	8006274 <_printf_i>
 800805e:	e7ed      	b.n	800803c <_svfiprintf_r+0x1c0>
 8008060:	08009f58 	.word	0x08009f58
 8008064:	08009f62 	.word	0x08009f62
 8008068:	08005d45 	.word	0x08005d45
 800806c:	08007dc5 	.word	0x08007dc5
 8008070:	08009f5e 	.word	0x08009f5e

08008074 <__sflush_r>:
 8008074:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800807c:	0716      	lsls	r6, r2, #28
 800807e:	4605      	mov	r5, r0
 8008080:	460c      	mov	r4, r1
 8008082:	d454      	bmi.n	800812e <__sflush_r+0xba>
 8008084:	684b      	ldr	r3, [r1, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	dc02      	bgt.n	8008090 <__sflush_r+0x1c>
 800808a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800808c:	2b00      	cmp	r3, #0
 800808e:	dd48      	ble.n	8008122 <__sflush_r+0xae>
 8008090:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008092:	2e00      	cmp	r6, #0
 8008094:	d045      	beq.n	8008122 <__sflush_r+0xae>
 8008096:	2300      	movs	r3, #0
 8008098:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800809c:	682f      	ldr	r7, [r5, #0]
 800809e:	6a21      	ldr	r1, [r4, #32]
 80080a0:	602b      	str	r3, [r5, #0]
 80080a2:	d030      	beq.n	8008106 <__sflush_r+0x92>
 80080a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	0759      	lsls	r1, r3, #29
 80080aa:	d505      	bpl.n	80080b8 <__sflush_r+0x44>
 80080ac:	6863      	ldr	r3, [r4, #4]
 80080ae:	1ad2      	subs	r2, r2, r3
 80080b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80080b2:	b10b      	cbz	r3, 80080b8 <__sflush_r+0x44>
 80080b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080b6:	1ad2      	subs	r2, r2, r3
 80080b8:	2300      	movs	r3, #0
 80080ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080bc:	6a21      	ldr	r1, [r4, #32]
 80080be:	4628      	mov	r0, r5
 80080c0:	47b0      	blx	r6
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	d106      	bne.n	80080d6 <__sflush_r+0x62>
 80080c8:	6829      	ldr	r1, [r5, #0]
 80080ca:	291d      	cmp	r1, #29
 80080cc:	d82b      	bhi.n	8008126 <__sflush_r+0xb2>
 80080ce:	4a2a      	ldr	r2, [pc, #168]	@ (8008178 <__sflush_r+0x104>)
 80080d0:	410a      	asrs	r2, r1
 80080d2:	07d6      	lsls	r6, r2, #31
 80080d4:	d427      	bmi.n	8008126 <__sflush_r+0xb2>
 80080d6:	2200      	movs	r2, #0
 80080d8:	6062      	str	r2, [r4, #4]
 80080da:	04d9      	lsls	r1, r3, #19
 80080dc:	6922      	ldr	r2, [r4, #16]
 80080de:	6022      	str	r2, [r4, #0]
 80080e0:	d504      	bpl.n	80080ec <__sflush_r+0x78>
 80080e2:	1c42      	adds	r2, r0, #1
 80080e4:	d101      	bne.n	80080ea <__sflush_r+0x76>
 80080e6:	682b      	ldr	r3, [r5, #0]
 80080e8:	b903      	cbnz	r3, 80080ec <__sflush_r+0x78>
 80080ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80080ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080ee:	602f      	str	r7, [r5, #0]
 80080f0:	b1b9      	cbz	r1, 8008122 <__sflush_r+0xae>
 80080f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080f6:	4299      	cmp	r1, r3
 80080f8:	d002      	beq.n	8008100 <__sflush_r+0x8c>
 80080fa:	4628      	mov	r0, r5
 80080fc:	f7ff f9e0 	bl	80074c0 <_free_r>
 8008100:	2300      	movs	r3, #0
 8008102:	6363      	str	r3, [r4, #52]	@ 0x34
 8008104:	e00d      	b.n	8008122 <__sflush_r+0xae>
 8008106:	2301      	movs	r3, #1
 8008108:	4628      	mov	r0, r5
 800810a:	47b0      	blx	r6
 800810c:	4602      	mov	r2, r0
 800810e:	1c50      	adds	r0, r2, #1
 8008110:	d1c9      	bne.n	80080a6 <__sflush_r+0x32>
 8008112:	682b      	ldr	r3, [r5, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0c6      	beq.n	80080a6 <__sflush_r+0x32>
 8008118:	2b1d      	cmp	r3, #29
 800811a:	d001      	beq.n	8008120 <__sflush_r+0xac>
 800811c:	2b16      	cmp	r3, #22
 800811e:	d11e      	bne.n	800815e <__sflush_r+0xea>
 8008120:	602f      	str	r7, [r5, #0]
 8008122:	2000      	movs	r0, #0
 8008124:	e022      	b.n	800816c <__sflush_r+0xf8>
 8008126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800812a:	b21b      	sxth	r3, r3
 800812c:	e01b      	b.n	8008166 <__sflush_r+0xf2>
 800812e:	690f      	ldr	r7, [r1, #16]
 8008130:	2f00      	cmp	r7, #0
 8008132:	d0f6      	beq.n	8008122 <__sflush_r+0xae>
 8008134:	0793      	lsls	r3, r2, #30
 8008136:	680e      	ldr	r6, [r1, #0]
 8008138:	bf08      	it	eq
 800813a:	694b      	ldreq	r3, [r1, #20]
 800813c:	600f      	str	r7, [r1, #0]
 800813e:	bf18      	it	ne
 8008140:	2300      	movne	r3, #0
 8008142:	eba6 0807 	sub.w	r8, r6, r7
 8008146:	608b      	str	r3, [r1, #8]
 8008148:	f1b8 0f00 	cmp.w	r8, #0
 800814c:	dde9      	ble.n	8008122 <__sflush_r+0xae>
 800814e:	6a21      	ldr	r1, [r4, #32]
 8008150:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008152:	4643      	mov	r3, r8
 8008154:	463a      	mov	r2, r7
 8008156:	4628      	mov	r0, r5
 8008158:	47b0      	blx	r6
 800815a:	2800      	cmp	r0, #0
 800815c:	dc08      	bgt.n	8008170 <__sflush_r+0xfc>
 800815e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008166:	81a3      	strh	r3, [r4, #12]
 8008168:	f04f 30ff 	mov.w	r0, #4294967295
 800816c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008170:	4407      	add	r7, r0
 8008172:	eba8 0800 	sub.w	r8, r8, r0
 8008176:	e7e7      	b.n	8008148 <__sflush_r+0xd4>
 8008178:	dfbffffe 	.word	0xdfbffffe

0800817c <_fflush_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	690b      	ldr	r3, [r1, #16]
 8008180:	4605      	mov	r5, r0
 8008182:	460c      	mov	r4, r1
 8008184:	b913      	cbnz	r3, 800818c <_fflush_r+0x10>
 8008186:	2500      	movs	r5, #0
 8008188:	4628      	mov	r0, r5
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	b118      	cbz	r0, 8008196 <_fflush_r+0x1a>
 800818e:	6a03      	ldr	r3, [r0, #32]
 8008190:	b90b      	cbnz	r3, 8008196 <_fflush_r+0x1a>
 8008192:	f7fe fa1b 	bl	80065cc <__sinit>
 8008196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0f3      	beq.n	8008186 <_fflush_r+0xa>
 800819e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081a0:	07d0      	lsls	r0, r2, #31
 80081a2:	d404      	bmi.n	80081ae <_fflush_r+0x32>
 80081a4:	0599      	lsls	r1, r3, #22
 80081a6:	d402      	bmi.n	80081ae <_fflush_r+0x32>
 80081a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081aa:	f7fe fb3a 	bl	8006822 <__retarget_lock_acquire_recursive>
 80081ae:	4628      	mov	r0, r5
 80081b0:	4621      	mov	r1, r4
 80081b2:	f7ff ff5f 	bl	8008074 <__sflush_r>
 80081b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081b8:	07da      	lsls	r2, r3, #31
 80081ba:	4605      	mov	r5, r0
 80081bc:	d4e4      	bmi.n	8008188 <_fflush_r+0xc>
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	059b      	lsls	r3, r3, #22
 80081c2:	d4e1      	bmi.n	8008188 <_fflush_r+0xc>
 80081c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081c6:	f7fe fb2d 	bl	8006824 <__retarget_lock_release_recursive>
 80081ca:	e7dd      	b.n	8008188 <_fflush_r+0xc>

080081cc <memmove>:
 80081cc:	4288      	cmp	r0, r1
 80081ce:	b510      	push	{r4, lr}
 80081d0:	eb01 0402 	add.w	r4, r1, r2
 80081d4:	d902      	bls.n	80081dc <memmove+0x10>
 80081d6:	4284      	cmp	r4, r0
 80081d8:	4623      	mov	r3, r4
 80081da:	d807      	bhi.n	80081ec <memmove+0x20>
 80081dc:	1e43      	subs	r3, r0, #1
 80081de:	42a1      	cmp	r1, r4
 80081e0:	d008      	beq.n	80081f4 <memmove+0x28>
 80081e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081ea:	e7f8      	b.n	80081de <memmove+0x12>
 80081ec:	4402      	add	r2, r0
 80081ee:	4601      	mov	r1, r0
 80081f0:	428a      	cmp	r2, r1
 80081f2:	d100      	bne.n	80081f6 <memmove+0x2a>
 80081f4:	bd10      	pop	{r4, pc}
 80081f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081fe:	e7f7      	b.n	80081f0 <memmove+0x24>

08008200 <_sbrk_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d06      	ldr	r5, [pc, #24]	@ (800821c <_sbrk_r+0x1c>)
 8008204:	2300      	movs	r3, #0
 8008206:	4604      	mov	r4, r0
 8008208:	4608      	mov	r0, r1
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	f7fa f9de 	bl	80025cc <_sbrk>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_sbrk_r+0x1a>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_sbrk_r+0x1a>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	20000528 	.word	0x20000528

08008220 <memcpy>:
 8008220:	440a      	add	r2, r1
 8008222:	4291      	cmp	r1, r2
 8008224:	f100 33ff 	add.w	r3, r0, #4294967295
 8008228:	d100      	bne.n	800822c <memcpy+0xc>
 800822a:	4770      	bx	lr
 800822c:	b510      	push	{r4, lr}
 800822e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008236:	4291      	cmp	r1, r2
 8008238:	d1f9      	bne.n	800822e <memcpy+0xe>
 800823a:	bd10      	pop	{r4, pc}

0800823c <__assert_func>:
 800823c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800823e:	4614      	mov	r4, r2
 8008240:	461a      	mov	r2, r3
 8008242:	4b09      	ldr	r3, [pc, #36]	@ (8008268 <__assert_func+0x2c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4605      	mov	r5, r0
 8008248:	68d8      	ldr	r0, [r3, #12]
 800824a:	b954      	cbnz	r4, 8008262 <__assert_func+0x26>
 800824c:	4b07      	ldr	r3, [pc, #28]	@ (800826c <__assert_func+0x30>)
 800824e:	461c      	mov	r4, r3
 8008250:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008254:	9100      	str	r1, [sp, #0]
 8008256:	462b      	mov	r3, r5
 8008258:	4905      	ldr	r1, [pc, #20]	@ (8008270 <__assert_func+0x34>)
 800825a:	f000 f86f 	bl	800833c <fiprintf>
 800825e:	f000 f87f 	bl	8008360 <abort>
 8008262:	4b04      	ldr	r3, [pc, #16]	@ (8008274 <__assert_func+0x38>)
 8008264:	e7f4      	b.n	8008250 <__assert_func+0x14>
 8008266:	bf00      	nop
 8008268:	20000024 	.word	0x20000024
 800826c:	08009fae 	.word	0x08009fae
 8008270:	08009f80 	.word	0x08009f80
 8008274:	08009f73 	.word	0x08009f73

08008278 <_calloc_r>:
 8008278:	b570      	push	{r4, r5, r6, lr}
 800827a:	fba1 5402 	umull	r5, r4, r1, r2
 800827e:	b93c      	cbnz	r4, 8008290 <_calloc_r+0x18>
 8008280:	4629      	mov	r1, r5
 8008282:	f7ff f991 	bl	80075a8 <_malloc_r>
 8008286:	4606      	mov	r6, r0
 8008288:	b928      	cbnz	r0, 8008296 <_calloc_r+0x1e>
 800828a:	2600      	movs	r6, #0
 800828c:	4630      	mov	r0, r6
 800828e:	bd70      	pop	{r4, r5, r6, pc}
 8008290:	220c      	movs	r2, #12
 8008292:	6002      	str	r2, [r0, #0]
 8008294:	e7f9      	b.n	800828a <_calloc_r+0x12>
 8008296:	462a      	mov	r2, r5
 8008298:	4621      	mov	r1, r4
 800829a:	f7fe fa44 	bl	8006726 <memset>
 800829e:	e7f5      	b.n	800828c <_calloc_r+0x14>

080082a0 <__ascii_mbtowc>:
 80082a0:	b082      	sub	sp, #8
 80082a2:	b901      	cbnz	r1, 80082a6 <__ascii_mbtowc+0x6>
 80082a4:	a901      	add	r1, sp, #4
 80082a6:	b142      	cbz	r2, 80082ba <__ascii_mbtowc+0x1a>
 80082a8:	b14b      	cbz	r3, 80082be <__ascii_mbtowc+0x1e>
 80082aa:	7813      	ldrb	r3, [r2, #0]
 80082ac:	600b      	str	r3, [r1, #0]
 80082ae:	7812      	ldrb	r2, [r2, #0]
 80082b0:	1e10      	subs	r0, r2, #0
 80082b2:	bf18      	it	ne
 80082b4:	2001      	movne	r0, #1
 80082b6:	b002      	add	sp, #8
 80082b8:	4770      	bx	lr
 80082ba:	4610      	mov	r0, r2
 80082bc:	e7fb      	b.n	80082b6 <__ascii_mbtowc+0x16>
 80082be:	f06f 0001 	mvn.w	r0, #1
 80082c2:	e7f8      	b.n	80082b6 <__ascii_mbtowc+0x16>

080082c4 <_realloc_r>:
 80082c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c8:	4680      	mov	r8, r0
 80082ca:	4615      	mov	r5, r2
 80082cc:	460c      	mov	r4, r1
 80082ce:	b921      	cbnz	r1, 80082da <_realloc_r+0x16>
 80082d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082d4:	4611      	mov	r1, r2
 80082d6:	f7ff b967 	b.w	80075a8 <_malloc_r>
 80082da:	b92a      	cbnz	r2, 80082e8 <_realloc_r+0x24>
 80082dc:	f7ff f8f0 	bl	80074c0 <_free_r>
 80082e0:	2400      	movs	r4, #0
 80082e2:	4620      	mov	r0, r4
 80082e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e8:	f000 f841 	bl	800836e <_malloc_usable_size_r>
 80082ec:	4285      	cmp	r5, r0
 80082ee:	4606      	mov	r6, r0
 80082f0:	d802      	bhi.n	80082f8 <_realloc_r+0x34>
 80082f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80082f6:	d8f4      	bhi.n	80082e2 <_realloc_r+0x1e>
 80082f8:	4629      	mov	r1, r5
 80082fa:	4640      	mov	r0, r8
 80082fc:	f7ff f954 	bl	80075a8 <_malloc_r>
 8008300:	4607      	mov	r7, r0
 8008302:	2800      	cmp	r0, #0
 8008304:	d0ec      	beq.n	80082e0 <_realloc_r+0x1c>
 8008306:	42b5      	cmp	r5, r6
 8008308:	462a      	mov	r2, r5
 800830a:	4621      	mov	r1, r4
 800830c:	bf28      	it	cs
 800830e:	4632      	movcs	r2, r6
 8008310:	f7ff ff86 	bl	8008220 <memcpy>
 8008314:	4621      	mov	r1, r4
 8008316:	4640      	mov	r0, r8
 8008318:	f7ff f8d2 	bl	80074c0 <_free_r>
 800831c:	463c      	mov	r4, r7
 800831e:	e7e0      	b.n	80082e2 <_realloc_r+0x1e>

08008320 <__ascii_wctomb>:
 8008320:	4603      	mov	r3, r0
 8008322:	4608      	mov	r0, r1
 8008324:	b141      	cbz	r1, 8008338 <__ascii_wctomb+0x18>
 8008326:	2aff      	cmp	r2, #255	@ 0xff
 8008328:	d904      	bls.n	8008334 <__ascii_wctomb+0x14>
 800832a:	228a      	movs	r2, #138	@ 0x8a
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	f04f 30ff 	mov.w	r0, #4294967295
 8008332:	4770      	bx	lr
 8008334:	700a      	strb	r2, [r1, #0]
 8008336:	2001      	movs	r0, #1
 8008338:	4770      	bx	lr
	...

0800833c <fiprintf>:
 800833c:	b40e      	push	{r1, r2, r3}
 800833e:	b503      	push	{r0, r1, lr}
 8008340:	4601      	mov	r1, r0
 8008342:	ab03      	add	r3, sp, #12
 8008344:	4805      	ldr	r0, [pc, #20]	@ (800835c <fiprintf+0x20>)
 8008346:	f853 2b04 	ldr.w	r2, [r3], #4
 800834a:	6800      	ldr	r0, [r0, #0]
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	f000 f83f 	bl	80083d0 <_vfiprintf_r>
 8008352:	b002      	add	sp, #8
 8008354:	f85d eb04 	ldr.w	lr, [sp], #4
 8008358:	b003      	add	sp, #12
 800835a:	4770      	bx	lr
 800835c:	20000024 	.word	0x20000024

08008360 <abort>:
 8008360:	b508      	push	{r3, lr}
 8008362:	2006      	movs	r0, #6
 8008364:	f000 fa08 	bl	8008778 <raise>
 8008368:	2001      	movs	r0, #1
 800836a:	f7fa f8b6 	bl	80024da <_exit>

0800836e <_malloc_usable_size_r>:
 800836e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008372:	1f18      	subs	r0, r3, #4
 8008374:	2b00      	cmp	r3, #0
 8008376:	bfbc      	itt	lt
 8008378:	580b      	ldrlt	r3, [r1, r0]
 800837a:	18c0      	addlt	r0, r0, r3
 800837c:	4770      	bx	lr

0800837e <__sfputc_r>:
 800837e:	6893      	ldr	r3, [r2, #8]
 8008380:	3b01      	subs	r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	b410      	push	{r4}
 8008386:	6093      	str	r3, [r2, #8]
 8008388:	da08      	bge.n	800839c <__sfputc_r+0x1e>
 800838a:	6994      	ldr	r4, [r2, #24]
 800838c:	42a3      	cmp	r3, r4
 800838e:	db01      	blt.n	8008394 <__sfputc_r+0x16>
 8008390:	290a      	cmp	r1, #10
 8008392:	d103      	bne.n	800839c <__sfputc_r+0x1e>
 8008394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008398:	f000 b932 	b.w	8008600 <__swbuf_r>
 800839c:	6813      	ldr	r3, [r2, #0]
 800839e:	1c58      	adds	r0, r3, #1
 80083a0:	6010      	str	r0, [r2, #0]
 80083a2:	7019      	strb	r1, [r3, #0]
 80083a4:	4608      	mov	r0, r1
 80083a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <__sfputs_r>:
 80083ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ae:	4606      	mov	r6, r0
 80083b0:	460f      	mov	r7, r1
 80083b2:	4614      	mov	r4, r2
 80083b4:	18d5      	adds	r5, r2, r3
 80083b6:	42ac      	cmp	r4, r5
 80083b8:	d101      	bne.n	80083be <__sfputs_r+0x12>
 80083ba:	2000      	movs	r0, #0
 80083bc:	e007      	b.n	80083ce <__sfputs_r+0x22>
 80083be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c2:	463a      	mov	r2, r7
 80083c4:	4630      	mov	r0, r6
 80083c6:	f7ff ffda 	bl	800837e <__sfputc_r>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	d1f3      	bne.n	80083b6 <__sfputs_r+0xa>
 80083ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083d0 <_vfiprintf_r>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	460d      	mov	r5, r1
 80083d6:	b09d      	sub	sp, #116	@ 0x74
 80083d8:	4614      	mov	r4, r2
 80083da:	4698      	mov	r8, r3
 80083dc:	4606      	mov	r6, r0
 80083de:	b118      	cbz	r0, 80083e8 <_vfiprintf_r+0x18>
 80083e0:	6a03      	ldr	r3, [r0, #32]
 80083e2:	b90b      	cbnz	r3, 80083e8 <_vfiprintf_r+0x18>
 80083e4:	f7fe f8f2 	bl	80065cc <__sinit>
 80083e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083ea:	07d9      	lsls	r1, r3, #31
 80083ec:	d405      	bmi.n	80083fa <_vfiprintf_r+0x2a>
 80083ee:	89ab      	ldrh	r3, [r5, #12]
 80083f0:	059a      	lsls	r2, r3, #22
 80083f2:	d402      	bmi.n	80083fa <_vfiprintf_r+0x2a>
 80083f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083f6:	f7fe fa14 	bl	8006822 <__retarget_lock_acquire_recursive>
 80083fa:	89ab      	ldrh	r3, [r5, #12]
 80083fc:	071b      	lsls	r3, r3, #28
 80083fe:	d501      	bpl.n	8008404 <_vfiprintf_r+0x34>
 8008400:	692b      	ldr	r3, [r5, #16]
 8008402:	b99b      	cbnz	r3, 800842c <_vfiprintf_r+0x5c>
 8008404:	4629      	mov	r1, r5
 8008406:	4630      	mov	r0, r6
 8008408:	f000 f938 	bl	800867c <__swsetup_r>
 800840c:	b170      	cbz	r0, 800842c <_vfiprintf_r+0x5c>
 800840e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008410:	07dc      	lsls	r4, r3, #31
 8008412:	d504      	bpl.n	800841e <_vfiprintf_r+0x4e>
 8008414:	f04f 30ff 	mov.w	r0, #4294967295
 8008418:	b01d      	add	sp, #116	@ 0x74
 800841a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841e:	89ab      	ldrh	r3, [r5, #12]
 8008420:	0598      	lsls	r0, r3, #22
 8008422:	d4f7      	bmi.n	8008414 <_vfiprintf_r+0x44>
 8008424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008426:	f7fe f9fd 	bl	8006824 <__retarget_lock_release_recursive>
 800842a:	e7f3      	b.n	8008414 <_vfiprintf_r+0x44>
 800842c:	2300      	movs	r3, #0
 800842e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008430:	2320      	movs	r3, #32
 8008432:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008436:	f8cd 800c 	str.w	r8, [sp, #12]
 800843a:	2330      	movs	r3, #48	@ 0x30
 800843c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80085ec <_vfiprintf_r+0x21c>
 8008440:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008444:	f04f 0901 	mov.w	r9, #1
 8008448:	4623      	mov	r3, r4
 800844a:	469a      	mov	sl, r3
 800844c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008450:	b10a      	cbz	r2, 8008456 <_vfiprintf_r+0x86>
 8008452:	2a25      	cmp	r2, #37	@ 0x25
 8008454:	d1f9      	bne.n	800844a <_vfiprintf_r+0x7a>
 8008456:	ebba 0b04 	subs.w	fp, sl, r4
 800845a:	d00b      	beq.n	8008474 <_vfiprintf_r+0xa4>
 800845c:	465b      	mov	r3, fp
 800845e:	4622      	mov	r2, r4
 8008460:	4629      	mov	r1, r5
 8008462:	4630      	mov	r0, r6
 8008464:	f7ff ffa2 	bl	80083ac <__sfputs_r>
 8008468:	3001      	adds	r0, #1
 800846a:	f000 80a7 	beq.w	80085bc <_vfiprintf_r+0x1ec>
 800846e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008470:	445a      	add	r2, fp
 8008472:	9209      	str	r2, [sp, #36]	@ 0x24
 8008474:	f89a 3000 	ldrb.w	r3, [sl]
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 809f 	beq.w	80085bc <_vfiprintf_r+0x1ec>
 800847e:	2300      	movs	r3, #0
 8008480:	f04f 32ff 	mov.w	r2, #4294967295
 8008484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008488:	f10a 0a01 	add.w	sl, sl, #1
 800848c:	9304      	str	r3, [sp, #16]
 800848e:	9307      	str	r3, [sp, #28]
 8008490:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008494:	931a      	str	r3, [sp, #104]	@ 0x68
 8008496:	4654      	mov	r4, sl
 8008498:	2205      	movs	r2, #5
 800849a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849e:	4853      	ldr	r0, [pc, #332]	@ (80085ec <_vfiprintf_r+0x21c>)
 80084a0:	f7f7 fe96 	bl	80001d0 <memchr>
 80084a4:	9a04      	ldr	r2, [sp, #16]
 80084a6:	b9d8      	cbnz	r0, 80084e0 <_vfiprintf_r+0x110>
 80084a8:	06d1      	lsls	r1, r2, #27
 80084aa:	bf44      	itt	mi
 80084ac:	2320      	movmi	r3, #32
 80084ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084b2:	0713      	lsls	r3, r2, #28
 80084b4:	bf44      	itt	mi
 80084b6:	232b      	movmi	r3, #43	@ 0x2b
 80084b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084bc:	f89a 3000 	ldrb.w	r3, [sl]
 80084c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80084c2:	d015      	beq.n	80084f0 <_vfiprintf_r+0x120>
 80084c4:	9a07      	ldr	r2, [sp, #28]
 80084c6:	4654      	mov	r4, sl
 80084c8:	2000      	movs	r0, #0
 80084ca:	f04f 0c0a 	mov.w	ip, #10
 80084ce:	4621      	mov	r1, r4
 80084d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084d4:	3b30      	subs	r3, #48	@ 0x30
 80084d6:	2b09      	cmp	r3, #9
 80084d8:	d94b      	bls.n	8008572 <_vfiprintf_r+0x1a2>
 80084da:	b1b0      	cbz	r0, 800850a <_vfiprintf_r+0x13a>
 80084dc:	9207      	str	r2, [sp, #28]
 80084de:	e014      	b.n	800850a <_vfiprintf_r+0x13a>
 80084e0:	eba0 0308 	sub.w	r3, r0, r8
 80084e4:	fa09 f303 	lsl.w	r3, r9, r3
 80084e8:	4313      	orrs	r3, r2
 80084ea:	9304      	str	r3, [sp, #16]
 80084ec:	46a2      	mov	sl, r4
 80084ee:	e7d2      	b.n	8008496 <_vfiprintf_r+0xc6>
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	1d19      	adds	r1, r3, #4
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	9103      	str	r1, [sp, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	bfbb      	ittet	lt
 80084fc:	425b      	neglt	r3, r3
 80084fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008502:	9307      	strge	r3, [sp, #28]
 8008504:	9307      	strlt	r3, [sp, #28]
 8008506:	bfb8      	it	lt
 8008508:	9204      	strlt	r2, [sp, #16]
 800850a:	7823      	ldrb	r3, [r4, #0]
 800850c:	2b2e      	cmp	r3, #46	@ 0x2e
 800850e:	d10a      	bne.n	8008526 <_vfiprintf_r+0x156>
 8008510:	7863      	ldrb	r3, [r4, #1]
 8008512:	2b2a      	cmp	r3, #42	@ 0x2a
 8008514:	d132      	bne.n	800857c <_vfiprintf_r+0x1ac>
 8008516:	9b03      	ldr	r3, [sp, #12]
 8008518:	1d1a      	adds	r2, r3, #4
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	9203      	str	r2, [sp, #12]
 800851e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008522:	3402      	adds	r4, #2
 8008524:	9305      	str	r3, [sp, #20]
 8008526:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085fc <_vfiprintf_r+0x22c>
 800852a:	7821      	ldrb	r1, [r4, #0]
 800852c:	2203      	movs	r2, #3
 800852e:	4650      	mov	r0, sl
 8008530:	f7f7 fe4e 	bl	80001d0 <memchr>
 8008534:	b138      	cbz	r0, 8008546 <_vfiprintf_r+0x176>
 8008536:	9b04      	ldr	r3, [sp, #16]
 8008538:	eba0 000a 	sub.w	r0, r0, sl
 800853c:	2240      	movs	r2, #64	@ 0x40
 800853e:	4082      	lsls	r2, r0
 8008540:	4313      	orrs	r3, r2
 8008542:	3401      	adds	r4, #1
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854a:	4829      	ldr	r0, [pc, #164]	@ (80085f0 <_vfiprintf_r+0x220>)
 800854c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008550:	2206      	movs	r2, #6
 8008552:	f7f7 fe3d 	bl	80001d0 <memchr>
 8008556:	2800      	cmp	r0, #0
 8008558:	d03f      	beq.n	80085da <_vfiprintf_r+0x20a>
 800855a:	4b26      	ldr	r3, [pc, #152]	@ (80085f4 <_vfiprintf_r+0x224>)
 800855c:	bb1b      	cbnz	r3, 80085a6 <_vfiprintf_r+0x1d6>
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	3307      	adds	r3, #7
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	3308      	adds	r3, #8
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800856c:	443b      	add	r3, r7
 800856e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008570:	e76a      	b.n	8008448 <_vfiprintf_r+0x78>
 8008572:	fb0c 3202 	mla	r2, ip, r2, r3
 8008576:	460c      	mov	r4, r1
 8008578:	2001      	movs	r0, #1
 800857a:	e7a8      	b.n	80084ce <_vfiprintf_r+0xfe>
 800857c:	2300      	movs	r3, #0
 800857e:	3401      	adds	r4, #1
 8008580:	9305      	str	r3, [sp, #20]
 8008582:	4619      	mov	r1, r3
 8008584:	f04f 0c0a 	mov.w	ip, #10
 8008588:	4620      	mov	r0, r4
 800858a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800858e:	3a30      	subs	r2, #48	@ 0x30
 8008590:	2a09      	cmp	r2, #9
 8008592:	d903      	bls.n	800859c <_vfiprintf_r+0x1cc>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0c6      	beq.n	8008526 <_vfiprintf_r+0x156>
 8008598:	9105      	str	r1, [sp, #20]
 800859a:	e7c4      	b.n	8008526 <_vfiprintf_r+0x156>
 800859c:	fb0c 2101 	mla	r1, ip, r1, r2
 80085a0:	4604      	mov	r4, r0
 80085a2:	2301      	movs	r3, #1
 80085a4:	e7f0      	b.n	8008588 <_vfiprintf_r+0x1b8>
 80085a6:	ab03      	add	r3, sp, #12
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	462a      	mov	r2, r5
 80085ac:	4b12      	ldr	r3, [pc, #72]	@ (80085f8 <_vfiprintf_r+0x228>)
 80085ae:	a904      	add	r1, sp, #16
 80085b0:	4630      	mov	r0, r6
 80085b2:	f7fd fbc7 	bl	8005d44 <_printf_float>
 80085b6:	4607      	mov	r7, r0
 80085b8:	1c78      	adds	r0, r7, #1
 80085ba:	d1d6      	bne.n	800856a <_vfiprintf_r+0x19a>
 80085bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085be:	07d9      	lsls	r1, r3, #31
 80085c0:	d405      	bmi.n	80085ce <_vfiprintf_r+0x1fe>
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	059a      	lsls	r2, r3, #22
 80085c6:	d402      	bmi.n	80085ce <_vfiprintf_r+0x1fe>
 80085c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085ca:	f7fe f92b 	bl	8006824 <__retarget_lock_release_recursive>
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	065b      	lsls	r3, r3, #25
 80085d2:	f53f af1f 	bmi.w	8008414 <_vfiprintf_r+0x44>
 80085d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085d8:	e71e      	b.n	8008418 <_vfiprintf_r+0x48>
 80085da:	ab03      	add	r3, sp, #12
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	462a      	mov	r2, r5
 80085e0:	4b05      	ldr	r3, [pc, #20]	@ (80085f8 <_vfiprintf_r+0x228>)
 80085e2:	a904      	add	r1, sp, #16
 80085e4:	4630      	mov	r0, r6
 80085e6:	f7fd fe45 	bl	8006274 <_printf_i>
 80085ea:	e7e4      	b.n	80085b6 <_vfiprintf_r+0x1e6>
 80085ec:	08009f58 	.word	0x08009f58
 80085f0:	08009f62 	.word	0x08009f62
 80085f4:	08005d45 	.word	0x08005d45
 80085f8:	080083ad 	.word	0x080083ad
 80085fc:	08009f5e 	.word	0x08009f5e

08008600 <__swbuf_r>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	460e      	mov	r6, r1
 8008604:	4614      	mov	r4, r2
 8008606:	4605      	mov	r5, r0
 8008608:	b118      	cbz	r0, 8008612 <__swbuf_r+0x12>
 800860a:	6a03      	ldr	r3, [r0, #32]
 800860c:	b90b      	cbnz	r3, 8008612 <__swbuf_r+0x12>
 800860e:	f7fd ffdd 	bl	80065cc <__sinit>
 8008612:	69a3      	ldr	r3, [r4, #24]
 8008614:	60a3      	str	r3, [r4, #8]
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	071a      	lsls	r2, r3, #28
 800861a:	d501      	bpl.n	8008620 <__swbuf_r+0x20>
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	b943      	cbnz	r3, 8008632 <__swbuf_r+0x32>
 8008620:	4621      	mov	r1, r4
 8008622:	4628      	mov	r0, r5
 8008624:	f000 f82a 	bl	800867c <__swsetup_r>
 8008628:	b118      	cbz	r0, 8008632 <__swbuf_r+0x32>
 800862a:	f04f 37ff 	mov.w	r7, #4294967295
 800862e:	4638      	mov	r0, r7
 8008630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	6922      	ldr	r2, [r4, #16]
 8008636:	1a98      	subs	r0, r3, r2
 8008638:	6963      	ldr	r3, [r4, #20]
 800863a:	b2f6      	uxtb	r6, r6
 800863c:	4283      	cmp	r3, r0
 800863e:	4637      	mov	r7, r6
 8008640:	dc05      	bgt.n	800864e <__swbuf_r+0x4e>
 8008642:	4621      	mov	r1, r4
 8008644:	4628      	mov	r0, r5
 8008646:	f7ff fd99 	bl	800817c <_fflush_r>
 800864a:	2800      	cmp	r0, #0
 800864c:	d1ed      	bne.n	800862a <__swbuf_r+0x2a>
 800864e:	68a3      	ldr	r3, [r4, #8]
 8008650:	3b01      	subs	r3, #1
 8008652:	60a3      	str	r3, [r4, #8]
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	6022      	str	r2, [r4, #0]
 800865a:	701e      	strb	r6, [r3, #0]
 800865c:	6962      	ldr	r2, [r4, #20]
 800865e:	1c43      	adds	r3, r0, #1
 8008660:	429a      	cmp	r2, r3
 8008662:	d004      	beq.n	800866e <__swbuf_r+0x6e>
 8008664:	89a3      	ldrh	r3, [r4, #12]
 8008666:	07db      	lsls	r3, r3, #31
 8008668:	d5e1      	bpl.n	800862e <__swbuf_r+0x2e>
 800866a:	2e0a      	cmp	r6, #10
 800866c:	d1df      	bne.n	800862e <__swbuf_r+0x2e>
 800866e:	4621      	mov	r1, r4
 8008670:	4628      	mov	r0, r5
 8008672:	f7ff fd83 	bl	800817c <_fflush_r>
 8008676:	2800      	cmp	r0, #0
 8008678:	d0d9      	beq.n	800862e <__swbuf_r+0x2e>
 800867a:	e7d6      	b.n	800862a <__swbuf_r+0x2a>

0800867c <__swsetup_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4b29      	ldr	r3, [pc, #164]	@ (8008724 <__swsetup_r+0xa8>)
 8008680:	4605      	mov	r5, r0
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	460c      	mov	r4, r1
 8008686:	b118      	cbz	r0, 8008690 <__swsetup_r+0x14>
 8008688:	6a03      	ldr	r3, [r0, #32]
 800868a:	b90b      	cbnz	r3, 8008690 <__swsetup_r+0x14>
 800868c:	f7fd ff9e 	bl	80065cc <__sinit>
 8008690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008694:	0719      	lsls	r1, r3, #28
 8008696:	d422      	bmi.n	80086de <__swsetup_r+0x62>
 8008698:	06da      	lsls	r2, r3, #27
 800869a:	d407      	bmi.n	80086ac <__swsetup_r+0x30>
 800869c:	2209      	movs	r2, #9
 800869e:	602a      	str	r2, [r5, #0]
 80086a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086a4:	81a3      	strh	r3, [r4, #12]
 80086a6:	f04f 30ff 	mov.w	r0, #4294967295
 80086aa:	e033      	b.n	8008714 <__swsetup_r+0x98>
 80086ac:	0758      	lsls	r0, r3, #29
 80086ae:	d512      	bpl.n	80086d6 <__swsetup_r+0x5a>
 80086b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086b2:	b141      	cbz	r1, 80086c6 <__swsetup_r+0x4a>
 80086b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086b8:	4299      	cmp	r1, r3
 80086ba:	d002      	beq.n	80086c2 <__swsetup_r+0x46>
 80086bc:	4628      	mov	r0, r5
 80086be:	f7fe feff 	bl	80074c0 <_free_r>
 80086c2:	2300      	movs	r3, #0
 80086c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80086cc:	81a3      	strh	r3, [r4, #12]
 80086ce:	2300      	movs	r3, #0
 80086d0:	6063      	str	r3, [r4, #4]
 80086d2:	6923      	ldr	r3, [r4, #16]
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	f043 0308 	orr.w	r3, r3, #8
 80086dc:	81a3      	strh	r3, [r4, #12]
 80086de:	6923      	ldr	r3, [r4, #16]
 80086e0:	b94b      	cbnz	r3, 80086f6 <__swsetup_r+0x7a>
 80086e2:	89a3      	ldrh	r3, [r4, #12]
 80086e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086ec:	d003      	beq.n	80086f6 <__swsetup_r+0x7a>
 80086ee:	4621      	mov	r1, r4
 80086f0:	4628      	mov	r0, r5
 80086f2:	f000 f883 	bl	80087fc <__smakebuf_r>
 80086f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086fa:	f013 0201 	ands.w	r2, r3, #1
 80086fe:	d00a      	beq.n	8008716 <__swsetup_r+0x9a>
 8008700:	2200      	movs	r2, #0
 8008702:	60a2      	str	r2, [r4, #8]
 8008704:	6962      	ldr	r2, [r4, #20]
 8008706:	4252      	negs	r2, r2
 8008708:	61a2      	str	r2, [r4, #24]
 800870a:	6922      	ldr	r2, [r4, #16]
 800870c:	b942      	cbnz	r2, 8008720 <__swsetup_r+0xa4>
 800870e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008712:	d1c5      	bne.n	80086a0 <__swsetup_r+0x24>
 8008714:	bd38      	pop	{r3, r4, r5, pc}
 8008716:	0799      	lsls	r1, r3, #30
 8008718:	bf58      	it	pl
 800871a:	6962      	ldrpl	r2, [r4, #20]
 800871c:	60a2      	str	r2, [r4, #8]
 800871e:	e7f4      	b.n	800870a <__swsetup_r+0x8e>
 8008720:	2000      	movs	r0, #0
 8008722:	e7f7      	b.n	8008714 <__swsetup_r+0x98>
 8008724:	20000024 	.word	0x20000024

08008728 <_raise_r>:
 8008728:	291f      	cmp	r1, #31
 800872a:	b538      	push	{r3, r4, r5, lr}
 800872c:	4605      	mov	r5, r0
 800872e:	460c      	mov	r4, r1
 8008730:	d904      	bls.n	800873c <_raise_r+0x14>
 8008732:	2316      	movs	r3, #22
 8008734:	6003      	str	r3, [r0, #0]
 8008736:	f04f 30ff 	mov.w	r0, #4294967295
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800873e:	b112      	cbz	r2, 8008746 <_raise_r+0x1e>
 8008740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008744:	b94b      	cbnz	r3, 800875a <_raise_r+0x32>
 8008746:	4628      	mov	r0, r5
 8008748:	f000 f830 	bl	80087ac <_getpid_r>
 800874c:	4622      	mov	r2, r4
 800874e:	4601      	mov	r1, r0
 8008750:	4628      	mov	r0, r5
 8008752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008756:	f000 b817 	b.w	8008788 <_kill_r>
 800875a:	2b01      	cmp	r3, #1
 800875c:	d00a      	beq.n	8008774 <_raise_r+0x4c>
 800875e:	1c59      	adds	r1, r3, #1
 8008760:	d103      	bne.n	800876a <_raise_r+0x42>
 8008762:	2316      	movs	r3, #22
 8008764:	6003      	str	r3, [r0, #0]
 8008766:	2001      	movs	r0, #1
 8008768:	e7e7      	b.n	800873a <_raise_r+0x12>
 800876a:	2100      	movs	r1, #0
 800876c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008770:	4620      	mov	r0, r4
 8008772:	4798      	blx	r3
 8008774:	2000      	movs	r0, #0
 8008776:	e7e0      	b.n	800873a <_raise_r+0x12>

08008778 <raise>:
 8008778:	4b02      	ldr	r3, [pc, #8]	@ (8008784 <raise+0xc>)
 800877a:	4601      	mov	r1, r0
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	f7ff bfd3 	b.w	8008728 <_raise_r>
 8008782:	bf00      	nop
 8008784:	20000024 	.word	0x20000024

08008788 <_kill_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d07      	ldr	r5, [pc, #28]	@ (80087a8 <_kill_r+0x20>)
 800878c:	2300      	movs	r3, #0
 800878e:	4604      	mov	r4, r0
 8008790:	4608      	mov	r0, r1
 8008792:	4611      	mov	r1, r2
 8008794:	602b      	str	r3, [r5, #0]
 8008796:	f7f9 fe90 	bl	80024ba <_kill>
 800879a:	1c43      	adds	r3, r0, #1
 800879c:	d102      	bne.n	80087a4 <_kill_r+0x1c>
 800879e:	682b      	ldr	r3, [r5, #0]
 80087a0:	b103      	cbz	r3, 80087a4 <_kill_r+0x1c>
 80087a2:	6023      	str	r3, [r4, #0]
 80087a4:	bd38      	pop	{r3, r4, r5, pc}
 80087a6:	bf00      	nop
 80087a8:	20000528 	.word	0x20000528

080087ac <_getpid_r>:
 80087ac:	f7f9 be7d 	b.w	80024aa <_getpid>

080087b0 <__swhatbuf_r>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	460c      	mov	r4, r1
 80087b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b8:	2900      	cmp	r1, #0
 80087ba:	b096      	sub	sp, #88	@ 0x58
 80087bc:	4615      	mov	r5, r2
 80087be:	461e      	mov	r6, r3
 80087c0:	da0d      	bge.n	80087de <__swhatbuf_r+0x2e>
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80087c8:	f04f 0100 	mov.w	r1, #0
 80087cc:	bf14      	ite	ne
 80087ce:	2340      	movne	r3, #64	@ 0x40
 80087d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80087d4:	2000      	movs	r0, #0
 80087d6:	6031      	str	r1, [r6, #0]
 80087d8:	602b      	str	r3, [r5, #0]
 80087da:	b016      	add	sp, #88	@ 0x58
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
 80087de:	466a      	mov	r2, sp
 80087e0:	f000 f848 	bl	8008874 <_fstat_r>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	dbec      	blt.n	80087c2 <__swhatbuf_r+0x12>
 80087e8:	9901      	ldr	r1, [sp, #4]
 80087ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087f2:	4259      	negs	r1, r3
 80087f4:	4159      	adcs	r1, r3
 80087f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087fa:	e7eb      	b.n	80087d4 <__swhatbuf_r+0x24>

080087fc <__smakebuf_r>:
 80087fc:	898b      	ldrh	r3, [r1, #12]
 80087fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008800:	079d      	lsls	r5, r3, #30
 8008802:	4606      	mov	r6, r0
 8008804:	460c      	mov	r4, r1
 8008806:	d507      	bpl.n	8008818 <__smakebuf_r+0x1c>
 8008808:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	6123      	str	r3, [r4, #16]
 8008810:	2301      	movs	r3, #1
 8008812:	6163      	str	r3, [r4, #20]
 8008814:	b003      	add	sp, #12
 8008816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008818:	ab01      	add	r3, sp, #4
 800881a:	466a      	mov	r2, sp
 800881c:	f7ff ffc8 	bl	80087b0 <__swhatbuf_r>
 8008820:	9f00      	ldr	r7, [sp, #0]
 8008822:	4605      	mov	r5, r0
 8008824:	4639      	mov	r1, r7
 8008826:	4630      	mov	r0, r6
 8008828:	f7fe febe 	bl	80075a8 <_malloc_r>
 800882c:	b948      	cbnz	r0, 8008842 <__smakebuf_r+0x46>
 800882e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008832:	059a      	lsls	r2, r3, #22
 8008834:	d4ee      	bmi.n	8008814 <__smakebuf_r+0x18>
 8008836:	f023 0303 	bic.w	r3, r3, #3
 800883a:	f043 0302 	orr.w	r3, r3, #2
 800883e:	81a3      	strh	r3, [r4, #12]
 8008840:	e7e2      	b.n	8008808 <__smakebuf_r+0xc>
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	6020      	str	r0, [r4, #0]
 8008846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800884a:	81a3      	strh	r3, [r4, #12]
 800884c:	9b01      	ldr	r3, [sp, #4]
 800884e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008852:	b15b      	cbz	r3, 800886c <__smakebuf_r+0x70>
 8008854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008858:	4630      	mov	r0, r6
 800885a:	f000 f81d 	bl	8008898 <_isatty_r>
 800885e:	b128      	cbz	r0, 800886c <__smakebuf_r+0x70>
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	f023 0303 	bic.w	r3, r3, #3
 8008866:	f043 0301 	orr.w	r3, r3, #1
 800886a:	81a3      	strh	r3, [r4, #12]
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	431d      	orrs	r5, r3
 8008870:	81a5      	strh	r5, [r4, #12]
 8008872:	e7cf      	b.n	8008814 <__smakebuf_r+0x18>

08008874 <_fstat_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d07      	ldr	r5, [pc, #28]	@ (8008894 <_fstat_r+0x20>)
 8008878:	2300      	movs	r3, #0
 800887a:	4604      	mov	r4, r0
 800887c:	4608      	mov	r0, r1
 800887e:	4611      	mov	r1, r2
 8008880:	602b      	str	r3, [r5, #0]
 8008882:	f7f9 fe7a 	bl	800257a <_fstat>
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	d102      	bne.n	8008890 <_fstat_r+0x1c>
 800888a:	682b      	ldr	r3, [r5, #0]
 800888c:	b103      	cbz	r3, 8008890 <_fstat_r+0x1c>
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	bd38      	pop	{r3, r4, r5, pc}
 8008892:	bf00      	nop
 8008894:	20000528 	.word	0x20000528

08008898 <_isatty_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4d06      	ldr	r5, [pc, #24]	@ (80088b4 <_isatty_r+0x1c>)
 800889c:	2300      	movs	r3, #0
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	602b      	str	r3, [r5, #0]
 80088a4:	f7f9 fe79 	bl	800259a <_isatty>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_isatty_r+0x1a>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_isatty_r+0x1a>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	20000528 	.word	0x20000528

080088b8 <log10>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	ed2d 8b02 	vpush	{d8}
 80088be:	ec55 4b10 	vmov	r4, r5, d0
 80088c2:	f000 f8bd 	bl	8008a40 <__ieee754_log10>
 80088c6:	4622      	mov	r2, r4
 80088c8:	462b      	mov	r3, r5
 80088ca:	4620      	mov	r0, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	eeb0 8a40 	vmov.f32	s16, s0
 80088d2:	eef0 8a60 	vmov.f32	s17, s1
 80088d6:	f7f8 f929 	bl	8000b2c <__aeabi_dcmpun>
 80088da:	b998      	cbnz	r0, 8008904 <log10+0x4c>
 80088dc:	2200      	movs	r2, #0
 80088de:	2300      	movs	r3, #0
 80088e0:	4620      	mov	r0, r4
 80088e2:	4629      	mov	r1, r5
 80088e4:	f7f8 f904 	bl	8000af0 <__aeabi_dcmple>
 80088e8:	b160      	cbz	r0, 8008904 <log10+0x4c>
 80088ea:	2200      	movs	r2, #0
 80088ec:	2300      	movs	r3, #0
 80088ee:	4620      	mov	r0, r4
 80088f0:	4629      	mov	r1, r5
 80088f2:	f7f8 f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80088f6:	b160      	cbz	r0, 8008912 <log10+0x5a>
 80088f8:	f7fd ff68 	bl	80067cc <__errno>
 80088fc:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8008928 <log10+0x70>
 8008900:	2322      	movs	r3, #34	@ 0x22
 8008902:	6003      	str	r3, [r0, #0]
 8008904:	eeb0 0a48 	vmov.f32	s0, s16
 8008908:	eef0 0a68 	vmov.f32	s1, s17
 800890c:	ecbd 8b02 	vpop	{d8}
 8008910:	bd38      	pop	{r3, r4, r5, pc}
 8008912:	f7fd ff5b 	bl	80067cc <__errno>
 8008916:	ecbd 8b02 	vpop	{d8}
 800891a:	2321      	movs	r3, #33	@ 0x21
 800891c:	6003      	str	r3, [r0, #0]
 800891e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008922:	4803      	ldr	r0, [pc, #12]	@ (8008930 <log10+0x78>)
 8008924:	f000 b884 	b.w	8008a30 <nan>
 8008928:	00000000 	.word	0x00000000
 800892c:	fff00000 	.word	0xfff00000
 8008930:	08009fae 	.word	0x08009fae

08008934 <pow>:
 8008934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008936:	ed2d 8b02 	vpush	{d8}
 800893a:	eeb0 8a40 	vmov.f32	s16, s0
 800893e:	eef0 8a60 	vmov.f32	s17, s1
 8008942:	ec55 4b11 	vmov	r4, r5, d1
 8008946:	f000 f907 	bl	8008b58 <__ieee754_pow>
 800894a:	4622      	mov	r2, r4
 800894c:	462b      	mov	r3, r5
 800894e:	4620      	mov	r0, r4
 8008950:	4629      	mov	r1, r5
 8008952:	ec57 6b10 	vmov	r6, r7, d0
 8008956:	f7f8 f8e9 	bl	8000b2c <__aeabi_dcmpun>
 800895a:	2800      	cmp	r0, #0
 800895c:	d13b      	bne.n	80089d6 <pow+0xa2>
 800895e:	ec51 0b18 	vmov	r0, r1, d8
 8008962:	2200      	movs	r2, #0
 8008964:	2300      	movs	r3, #0
 8008966:	f7f8 f8af 	bl	8000ac8 <__aeabi_dcmpeq>
 800896a:	b1b8      	cbz	r0, 800899c <pow+0x68>
 800896c:	2200      	movs	r2, #0
 800896e:	2300      	movs	r3, #0
 8008970:	4620      	mov	r0, r4
 8008972:	4629      	mov	r1, r5
 8008974:	f7f8 f8a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008978:	2800      	cmp	r0, #0
 800897a:	d146      	bne.n	8008a0a <pow+0xd6>
 800897c:	ec45 4b10 	vmov	d0, r4, r5
 8008980:	f000 f848 	bl	8008a14 <finite>
 8008984:	b338      	cbz	r0, 80089d6 <pow+0xa2>
 8008986:	2200      	movs	r2, #0
 8008988:	2300      	movs	r3, #0
 800898a:	4620      	mov	r0, r4
 800898c:	4629      	mov	r1, r5
 800898e:	f7f8 f8a5 	bl	8000adc <__aeabi_dcmplt>
 8008992:	b300      	cbz	r0, 80089d6 <pow+0xa2>
 8008994:	f7fd ff1a 	bl	80067cc <__errno>
 8008998:	2322      	movs	r3, #34	@ 0x22
 800899a:	e01b      	b.n	80089d4 <pow+0xa0>
 800899c:	ec47 6b10 	vmov	d0, r6, r7
 80089a0:	f000 f838 	bl	8008a14 <finite>
 80089a4:	b9e0      	cbnz	r0, 80089e0 <pow+0xac>
 80089a6:	eeb0 0a48 	vmov.f32	s0, s16
 80089aa:	eef0 0a68 	vmov.f32	s1, s17
 80089ae:	f000 f831 	bl	8008a14 <finite>
 80089b2:	b1a8      	cbz	r0, 80089e0 <pow+0xac>
 80089b4:	ec45 4b10 	vmov	d0, r4, r5
 80089b8:	f000 f82c 	bl	8008a14 <finite>
 80089bc:	b180      	cbz	r0, 80089e0 <pow+0xac>
 80089be:	4632      	mov	r2, r6
 80089c0:	463b      	mov	r3, r7
 80089c2:	4630      	mov	r0, r6
 80089c4:	4639      	mov	r1, r7
 80089c6:	f7f8 f8b1 	bl	8000b2c <__aeabi_dcmpun>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d0e2      	beq.n	8008994 <pow+0x60>
 80089ce:	f7fd fefd 	bl	80067cc <__errno>
 80089d2:	2321      	movs	r3, #33	@ 0x21
 80089d4:	6003      	str	r3, [r0, #0]
 80089d6:	ecbd 8b02 	vpop	{d8}
 80089da:	ec47 6b10 	vmov	d0, r6, r7
 80089de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e0:	2200      	movs	r2, #0
 80089e2:	2300      	movs	r3, #0
 80089e4:	4630      	mov	r0, r6
 80089e6:	4639      	mov	r1, r7
 80089e8:	f7f8 f86e 	bl	8000ac8 <__aeabi_dcmpeq>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d0f2      	beq.n	80089d6 <pow+0xa2>
 80089f0:	eeb0 0a48 	vmov.f32	s0, s16
 80089f4:	eef0 0a68 	vmov.f32	s1, s17
 80089f8:	f000 f80c 	bl	8008a14 <finite>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d0ea      	beq.n	80089d6 <pow+0xa2>
 8008a00:	ec45 4b10 	vmov	d0, r4, r5
 8008a04:	f000 f806 	bl	8008a14 <finite>
 8008a08:	e7c3      	b.n	8008992 <pow+0x5e>
 8008a0a:	4f01      	ldr	r7, [pc, #4]	@ (8008a10 <pow+0xdc>)
 8008a0c:	2600      	movs	r6, #0
 8008a0e:	e7e2      	b.n	80089d6 <pow+0xa2>
 8008a10:	3ff00000 	.word	0x3ff00000

08008a14 <finite>:
 8008a14:	b082      	sub	sp, #8
 8008a16:	ed8d 0b00 	vstr	d0, [sp]
 8008a1a:	9801      	ldr	r0, [sp, #4]
 8008a1c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008a20:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008a24:	0fc0      	lsrs	r0, r0, #31
 8008a26:	b002      	add	sp, #8
 8008a28:	4770      	bx	lr
 8008a2a:	0000      	movs	r0, r0
 8008a2c:	0000      	movs	r0, r0
	...

08008a30 <nan>:
 8008a30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008a38 <nan+0x8>
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	00000000 	.word	0x00000000
 8008a3c:	7ff80000 	.word	0x7ff80000

08008a40 <__ieee754_log10>:
 8008a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a44:	ec55 4b10 	vmov	r4, r5, d0
 8008a48:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8008a4c:	ed2d 8b02 	vpush	{d8}
 8008a50:	462b      	mov	r3, r5
 8008a52:	da2e      	bge.n	8008ab2 <__ieee754_log10+0x72>
 8008a54:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008a58:	4322      	orrs	r2, r4
 8008a5a:	d10b      	bne.n	8008a74 <__ieee754_log10+0x34>
 8008a5c:	493a      	ldr	r1, [pc, #232]	@ (8008b48 <__ieee754_log10+0x108>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	2300      	movs	r3, #0
 8008a62:	2000      	movs	r0, #0
 8008a64:	f7f7 fef2 	bl	800084c <__aeabi_ddiv>
 8008a68:	ecbd 8b02 	vpop	{d8}
 8008a6c:	ec41 0b10 	vmov	d0, r0, r1
 8008a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a74:	2d00      	cmp	r5, #0
 8008a76:	da07      	bge.n	8008a88 <__ieee754_log10+0x48>
 8008a78:	4622      	mov	r2, r4
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	f7f7 fc03 	bl	8000288 <__aeabi_dsub>
 8008a82:	2200      	movs	r2, #0
 8008a84:	2300      	movs	r3, #0
 8008a86:	e7ed      	b.n	8008a64 <__ieee754_log10+0x24>
 8008a88:	4b30      	ldr	r3, [pc, #192]	@ (8008b4c <__ieee754_log10+0x10c>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	4629      	mov	r1, r5
 8008a90:	f7f7 fdb2 	bl	80005f8 <__aeabi_dmul>
 8008a94:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8008a98:	4604      	mov	r4, r0
 8008a9a:	460d      	mov	r5, r1
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	492c      	ldr	r1, [pc, #176]	@ (8008b50 <__ieee754_log10+0x110>)
 8008aa0:	428b      	cmp	r3, r1
 8008aa2:	dd08      	ble.n	8008ab6 <__ieee754_log10+0x76>
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	462b      	mov	r3, r5
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	4629      	mov	r1, r5
 8008aac:	f7f7 fbee 	bl	800028c <__adddf3>
 8008ab0:	e7da      	b.n	8008a68 <__ieee754_log10+0x28>
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	e7f3      	b.n	8008a9e <__ieee754_log10+0x5e>
 8008ab6:	1518      	asrs	r0, r3, #20
 8008ab8:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8008abc:	4410      	add	r0, r2
 8008abe:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8008ac2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8008ac6:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8008aca:	f7f7 fd2b 	bl	8000524 <__aeabi_i2d>
 8008ace:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 8008ad2:	3303      	adds	r3, #3
 8008ad4:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8008ad8:	a315      	add	r3, pc, #84	@ (adr r3, 8008b30 <__ieee754_log10+0xf0>)
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	ec45 4b18 	vmov	d8, r4, r5
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	460f      	mov	r7, r1
 8008ae6:	f7f7 fd87 	bl	80005f8 <__aeabi_dmul>
 8008aea:	eeb0 0a48 	vmov.f32	s0, s16
 8008aee:	eef0 0a68 	vmov.f32	s1, s17
 8008af2:	4604      	mov	r4, r0
 8008af4:	460d      	mov	r5, r1
 8008af6:	f000 ff13 	bl	8009920 <__ieee754_log>
 8008afa:	a30f      	add	r3, pc, #60	@ (adr r3, 8008b38 <__ieee754_log10+0xf8>)
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	ec51 0b10 	vmov	r0, r1, d0
 8008b04:	f7f7 fd78 	bl	80005f8 <__aeabi_dmul>
 8008b08:	4622      	mov	r2, r4
 8008b0a:	462b      	mov	r3, r5
 8008b0c:	f7f7 fbbe 	bl	800028c <__adddf3>
 8008b10:	a30b      	add	r3, pc, #44	@ (adr r3, 8008b40 <__ieee754_log10+0x100>)
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	4604      	mov	r4, r0
 8008b18:	460d      	mov	r5, r1
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	f7f7 fd6b 	bl	80005f8 <__aeabi_dmul>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4620      	mov	r0, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	e7bf      	b.n	8008aac <__ieee754_log10+0x6c>
 8008b2c:	f3af 8000 	nop.w
 8008b30:	11f12b36 	.word	0x11f12b36
 8008b34:	3d59fef3 	.word	0x3d59fef3
 8008b38:	1526e50e 	.word	0x1526e50e
 8008b3c:	3fdbcb7b 	.word	0x3fdbcb7b
 8008b40:	509f6000 	.word	0x509f6000
 8008b44:	3fd34413 	.word	0x3fd34413
 8008b48:	c3500000 	.word	0xc3500000
 8008b4c:	43500000 	.word	0x43500000
 8008b50:	7fefffff 	.word	0x7fefffff
 8008b54:	00000000 	.word	0x00000000

08008b58 <__ieee754_pow>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	b091      	sub	sp, #68	@ 0x44
 8008b5e:	ed8d 1b00 	vstr	d1, [sp]
 8008b62:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008b66:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008b6a:	ea5a 0001 	orrs.w	r0, sl, r1
 8008b6e:	ec57 6b10 	vmov	r6, r7, d0
 8008b72:	d113      	bne.n	8008b9c <__ieee754_pow+0x44>
 8008b74:	19b3      	adds	r3, r6, r6
 8008b76:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008b7a:	4152      	adcs	r2, r2
 8008b7c:	4298      	cmp	r0, r3
 8008b7e:	4b98      	ldr	r3, [pc, #608]	@ (8008de0 <__ieee754_pow+0x288>)
 8008b80:	4193      	sbcs	r3, r2
 8008b82:	f080 84ea 	bcs.w	800955a <__ieee754_pow+0xa02>
 8008b86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	f7f7 fb7d 	bl	800028c <__adddf3>
 8008b92:	ec41 0b10 	vmov	d0, r0, r1
 8008b96:	b011      	add	sp, #68	@ 0x44
 8008b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9c:	4a91      	ldr	r2, [pc, #580]	@ (8008de4 <__ieee754_pow+0x28c>)
 8008b9e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008ba2:	4590      	cmp	r8, r2
 8008ba4:	463d      	mov	r5, r7
 8008ba6:	4633      	mov	r3, r6
 8008ba8:	d806      	bhi.n	8008bb8 <__ieee754_pow+0x60>
 8008baa:	d101      	bne.n	8008bb0 <__ieee754_pow+0x58>
 8008bac:	2e00      	cmp	r6, #0
 8008bae:	d1ea      	bne.n	8008b86 <__ieee754_pow+0x2e>
 8008bb0:	4592      	cmp	sl, r2
 8008bb2:	d801      	bhi.n	8008bb8 <__ieee754_pow+0x60>
 8008bb4:	d10e      	bne.n	8008bd4 <__ieee754_pow+0x7c>
 8008bb6:	b169      	cbz	r1, 8008bd4 <__ieee754_pow+0x7c>
 8008bb8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008bbc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008bc0:	431d      	orrs	r5, r3
 8008bc2:	d1e0      	bne.n	8008b86 <__ieee754_pow+0x2e>
 8008bc4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008bc8:	18db      	adds	r3, r3, r3
 8008bca:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008bce:	4152      	adcs	r2, r2
 8008bd0:	429d      	cmp	r5, r3
 8008bd2:	e7d4      	b.n	8008b7e <__ieee754_pow+0x26>
 8008bd4:	2d00      	cmp	r5, #0
 8008bd6:	46c3      	mov	fp, r8
 8008bd8:	da3a      	bge.n	8008c50 <__ieee754_pow+0xf8>
 8008bda:	4a83      	ldr	r2, [pc, #524]	@ (8008de8 <__ieee754_pow+0x290>)
 8008bdc:	4592      	cmp	sl, r2
 8008bde:	d84d      	bhi.n	8008c7c <__ieee754_pow+0x124>
 8008be0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008be4:	4592      	cmp	sl, r2
 8008be6:	f240 84c7 	bls.w	8009578 <__ieee754_pow+0xa20>
 8008bea:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008bee:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008bf2:	2a14      	cmp	r2, #20
 8008bf4:	dd0f      	ble.n	8008c16 <__ieee754_pow+0xbe>
 8008bf6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008bfa:	fa21 f402 	lsr.w	r4, r1, r2
 8008bfe:	fa04 f202 	lsl.w	r2, r4, r2
 8008c02:	428a      	cmp	r2, r1
 8008c04:	f040 84b8 	bne.w	8009578 <__ieee754_pow+0xa20>
 8008c08:	f004 0401 	and.w	r4, r4, #1
 8008c0c:	f1c4 0402 	rsb	r4, r4, #2
 8008c10:	2900      	cmp	r1, #0
 8008c12:	d158      	bne.n	8008cc6 <__ieee754_pow+0x16e>
 8008c14:	e00e      	b.n	8008c34 <__ieee754_pow+0xdc>
 8008c16:	2900      	cmp	r1, #0
 8008c18:	d154      	bne.n	8008cc4 <__ieee754_pow+0x16c>
 8008c1a:	f1c2 0214 	rsb	r2, r2, #20
 8008c1e:	fa4a f402 	asr.w	r4, sl, r2
 8008c22:	fa04 f202 	lsl.w	r2, r4, r2
 8008c26:	4552      	cmp	r2, sl
 8008c28:	f040 84a3 	bne.w	8009572 <__ieee754_pow+0xa1a>
 8008c2c:	f004 0401 	and.w	r4, r4, #1
 8008c30:	f1c4 0402 	rsb	r4, r4, #2
 8008c34:	4a6d      	ldr	r2, [pc, #436]	@ (8008dec <__ieee754_pow+0x294>)
 8008c36:	4592      	cmp	sl, r2
 8008c38:	d12e      	bne.n	8008c98 <__ieee754_pow+0x140>
 8008c3a:	f1b9 0f00 	cmp.w	r9, #0
 8008c3e:	f280 8494 	bge.w	800956a <__ieee754_pow+0xa12>
 8008c42:	496a      	ldr	r1, [pc, #424]	@ (8008dec <__ieee754_pow+0x294>)
 8008c44:	4632      	mov	r2, r6
 8008c46:	463b      	mov	r3, r7
 8008c48:	2000      	movs	r0, #0
 8008c4a:	f7f7 fdff 	bl	800084c <__aeabi_ddiv>
 8008c4e:	e7a0      	b.n	8008b92 <__ieee754_pow+0x3a>
 8008c50:	2400      	movs	r4, #0
 8008c52:	bbc1      	cbnz	r1, 8008cc6 <__ieee754_pow+0x16e>
 8008c54:	4a63      	ldr	r2, [pc, #396]	@ (8008de4 <__ieee754_pow+0x28c>)
 8008c56:	4592      	cmp	sl, r2
 8008c58:	d1ec      	bne.n	8008c34 <__ieee754_pow+0xdc>
 8008c5a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008c5e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008c62:	431a      	orrs	r2, r3
 8008c64:	f000 8479 	beq.w	800955a <__ieee754_pow+0xa02>
 8008c68:	4b61      	ldr	r3, [pc, #388]	@ (8008df0 <__ieee754_pow+0x298>)
 8008c6a:	4598      	cmp	r8, r3
 8008c6c:	d908      	bls.n	8008c80 <__ieee754_pow+0x128>
 8008c6e:	f1b9 0f00 	cmp.w	r9, #0
 8008c72:	f2c0 8476 	blt.w	8009562 <__ieee754_pow+0xa0a>
 8008c76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c7a:	e78a      	b.n	8008b92 <__ieee754_pow+0x3a>
 8008c7c:	2402      	movs	r4, #2
 8008c7e:	e7e8      	b.n	8008c52 <__ieee754_pow+0xfa>
 8008c80:	f1b9 0f00 	cmp.w	r9, #0
 8008c84:	f04f 0000 	mov.w	r0, #0
 8008c88:	f04f 0100 	mov.w	r1, #0
 8008c8c:	da81      	bge.n	8008b92 <__ieee754_pow+0x3a>
 8008c8e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008c92:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008c96:	e77c      	b.n	8008b92 <__ieee754_pow+0x3a>
 8008c98:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008c9c:	d106      	bne.n	8008cac <__ieee754_pow+0x154>
 8008c9e:	4632      	mov	r2, r6
 8008ca0:	463b      	mov	r3, r7
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	f7f7 fca7 	bl	80005f8 <__aeabi_dmul>
 8008caa:	e772      	b.n	8008b92 <__ieee754_pow+0x3a>
 8008cac:	4a51      	ldr	r2, [pc, #324]	@ (8008df4 <__ieee754_pow+0x29c>)
 8008cae:	4591      	cmp	r9, r2
 8008cb0:	d109      	bne.n	8008cc6 <__ieee754_pow+0x16e>
 8008cb2:	2d00      	cmp	r5, #0
 8008cb4:	db07      	blt.n	8008cc6 <__ieee754_pow+0x16e>
 8008cb6:	ec47 6b10 	vmov	d0, r6, r7
 8008cba:	b011      	add	sp, #68	@ 0x44
 8008cbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	f000 bd52 	b.w	8009768 <__ieee754_sqrt>
 8008cc4:	2400      	movs	r4, #0
 8008cc6:	ec47 6b10 	vmov	d0, r6, r7
 8008cca:	9302      	str	r3, [sp, #8]
 8008ccc:	f000 fc88 	bl	80095e0 <fabs>
 8008cd0:	9b02      	ldr	r3, [sp, #8]
 8008cd2:	ec51 0b10 	vmov	r0, r1, d0
 8008cd6:	bb53      	cbnz	r3, 8008d2e <__ieee754_pow+0x1d6>
 8008cd8:	4b44      	ldr	r3, [pc, #272]	@ (8008dec <__ieee754_pow+0x294>)
 8008cda:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d002      	beq.n	8008ce8 <__ieee754_pow+0x190>
 8008ce2:	f1b8 0f00 	cmp.w	r8, #0
 8008ce6:	d122      	bne.n	8008d2e <__ieee754_pow+0x1d6>
 8008ce8:	f1b9 0f00 	cmp.w	r9, #0
 8008cec:	da05      	bge.n	8008cfa <__ieee754_pow+0x1a2>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	493d      	ldr	r1, [pc, #244]	@ (8008dec <__ieee754_pow+0x294>)
 8008cf6:	f7f7 fda9 	bl	800084c <__aeabi_ddiv>
 8008cfa:	2d00      	cmp	r5, #0
 8008cfc:	f6bf af49 	bge.w	8008b92 <__ieee754_pow+0x3a>
 8008d00:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008d04:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008d08:	ea58 0804 	orrs.w	r8, r8, r4
 8008d0c:	d108      	bne.n	8008d20 <__ieee754_pow+0x1c8>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4610      	mov	r0, r2
 8008d14:	4619      	mov	r1, r3
 8008d16:	f7f7 fab7 	bl	8000288 <__aeabi_dsub>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	e794      	b.n	8008c4a <__ieee754_pow+0xf2>
 8008d20:	2c01      	cmp	r4, #1
 8008d22:	f47f af36 	bne.w	8008b92 <__ieee754_pow+0x3a>
 8008d26:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	e731      	b.n	8008b92 <__ieee754_pow+0x3a>
 8008d2e:	0feb      	lsrs	r3, r5, #31
 8008d30:	3b01      	subs	r3, #1
 8008d32:	ea53 0204 	orrs.w	r2, r3, r4
 8008d36:	d102      	bne.n	8008d3e <__ieee754_pow+0x1e6>
 8008d38:	4632      	mov	r2, r6
 8008d3a:	463b      	mov	r3, r7
 8008d3c:	e7e9      	b.n	8008d12 <__ieee754_pow+0x1ba>
 8008d3e:	3c01      	subs	r4, #1
 8008d40:	431c      	orrs	r4, r3
 8008d42:	d016      	beq.n	8008d72 <__ieee754_pow+0x21a>
 8008d44:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008dd0 <__ieee754_pow+0x278>
 8008d48:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008d4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d50:	f240 8112 	bls.w	8008f78 <__ieee754_pow+0x420>
 8008d54:	4b28      	ldr	r3, [pc, #160]	@ (8008df8 <__ieee754_pow+0x2a0>)
 8008d56:	459a      	cmp	sl, r3
 8008d58:	4b25      	ldr	r3, [pc, #148]	@ (8008df0 <__ieee754_pow+0x298>)
 8008d5a:	d916      	bls.n	8008d8a <__ieee754_pow+0x232>
 8008d5c:	4598      	cmp	r8, r3
 8008d5e:	d80b      	bhi.n	8008d78 <__ieee754_pow+0x220>
 8008d60:	f1b9 0f00 	cmp.w	r9, #0
 8008d64:	da0b      	bge.n	8008d7e <__ieee754_pow+0x226>
 8008d66:	2000      	movs	r0, #0
 8008d68:	b011      	add	sp, #68	@ 0x44
 8008d6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6e:	f000 bcf3 	b.w	8009758 <__math_oflow>
 8008d72:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008dd8 <__ieee754_pow+0x280>
 8008d76:	e7e7      	b.n	8008d48 <__ieee754_pow+0x1f0>
 8008d78:	f1b9 0f00 	cmp.w	r9, #0
 8008d7c:	dcf3      	bgt.n	8008d66 <__ieee754_pow+0x20e>
 8008d7e:	2000      	movs	r0, #0
 8008d80:	b011      	add	sp, #68	@ 0x44
 8008d82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d86:	f000 bcdf 	b.w	8009748 <__math_uflow>
 8008d8a:	4598      	cmp	r8, r3
 8008d8c:	d20c      	bcs.n	8008da8 <__ieee754_pow+0x250>
 8008d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d92:	2200      	movs	r2, #0
 8008d94:	2300      	movs	r3, #0
 8008d96:	f7f7 fea1 	bl	8000adc <__aeabi_dcmplt>
 8008d9a:	3800      	subs	r0, #0
 8008d9c:	bf18      	it	ne
 8008d9e:	2001      	movne	r0, #1
 8008da0:	f1b9 0f00 	cmp.w	r9, #0
 8008da4:	daec      	bge.n	8008d80 <__ieee754_pow+0x228>
 8008da6:	e7df      	b.n	8008d68 <__ieee754_pow+0x210>
 8008da8:	4b10      	ldr	r3, [pc, #64]	@ (8008dec <__ieee754_pow+0x294>)
 8008daa:	4598      	cmp	r8, r3
 8008dac:	f04f 0200 	mov.w	r2, #0
 8008db0:	d924      	bls.n	8008dfc <__ieee754_pow+0x2a4>
 8008db2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008db6:	2300      	movs	r3, #0
 8008db8:	f7f7 fe90 	bl	8000adc <__aeabi_dcmplt>
 8008dbc:	3800      	subs	r0, #0
 8008dbe:	bf18      	it	ne
 8008dc0:	2001      	movne	r0, #1
 8008dc2:	f1b9 0f00 	cmp.w	r9, #0
 8008dc6:	dccf      	bgt.n	8008d68 <__ieee754_pow+0x210>
 8008dc8:	e7da      	b.n	8008d80 <__ieee754_pow+0x228>
 8008dca:	bf00      	nop
 8008dcc:	f3af 8000 	nop.w
 8008dd0:	00000000 	.word	0x00000000
 8008dd4:	3ff00000 	.word	0x3ff00000
 8008dd8:	00000000 	.word	0x00000000
 8008ddc:	bff00000 	.word	0xbff00000
 8008de0:	fff00000 	.word	0xfff00000
 8008de4:	7ff00000 	.word	0x7ff00000
 8008de8:	433fffff 	.word	0x433fffff
 8008dec:	3ff00000 	.word	0x3ff00000
 8008df0:	3fefffff 	.word	0x3fefffff
 8008df4:	3fe00000 	.word	0x3fe00000
 8008df8:	43f00000 	.word	0x43f00000
 8008dfc:	4b5a      	ldr	r3, [pc, #360]	@ (8008f68 <__ieee754_pow+0x410>)
 8008dfe:	f7f7 fa43 	bl	8000288 <__aeabi_dsub>
 8008e02:	a351      	add	r3, pc, #324	@ (adr r3, 8008f48 <__ieee754_pow+0x3f0>)
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	4604      	mov	r4, r0
 8008e0a:	460d      	mov	r5, r1
 8008e0c:	f7f7 fbf4 	bl	80005f8 <__aeabi_dmul>
 8008e10:	a34f      	add	r3, pc, #316	@ (adr r3, 8008f50 <__ieee754_pow+0x3f8>)
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	4606      	mov	r6, r0
 8008e18:	460f      	mov	r7, r1
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	f7f7 fbeb 	bl	80005f8 <__aeabi_dmul>
 8008e22:	4b52      	ldr	r3, [pc, #328]	@ (8008f6c <__ieee754_pow+0x414>)
 8008e24:	4682      	mov	sl, r0
 8008e26:	468b      	mov	fp, r1
 8008e28:	2200      	movs	r2, #0
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	f7f7 fbe3 	bl	80005f8 <__aeabi_dmul>
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	a148      	add	r1, pc, #288	@ (adr r1, 8008f58 <__ieee754_pow+0x400>)
 8008e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e3c:	f7f7 fa24 	bl	8000288 <__aeabi_dsub>
 8008e40:	4622      	mov	r2, r4
 8008e42:	462b      	mov	r3, r5
 8008e44:	f7f7 fbd8 	bl	80005f8 <__aeabi_dmul>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	4948      	ldr	r1, [pc, #288]	@ (8008f70 <__ieee754_pow+0x418>)
 8008e50:	f7f7 fa1a 	bl	8000288 <__aeabi_dsub>
 8008e54:	4622      	mov	r2, r4
 8008e56:	4680      	mov	r8, r0
 8008e58:	4689      	mov	r9, r1
 8008e5a:	462b      	mov	r3, r5
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	4629      	mov	r1, r5
 8008e60:	f7f7 fbca 	bl	80005f8 <__aeabi_dmul>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4640      	mov	r0, r8
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	f7f7 fbc4 	bl	80005f8 <__aeabi_dmul>
 8008e70:	a33b      	add	r3, pc, #236	@ (adr r3, 8008f60 <__ieee754_pow+0x408>)
 8008e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e76:	f7f7 fbbf 	bl	80005f8 <__aeabi_dmul>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4650      	mov	r0, sl
 8008e80:	4659      	mov	r1, fp
 8008e82:	f7f7 fa01 	bl	8000288 <__aeabi_dsub>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4680      	mov	r8, r0
 8008e8c:	4689      	mov	r9, r1
 8008e8e:	4630      	mov	r0, r6
 8008e90:	4639      	mov	r1, r7
 8008e92:	f7f7 f9fb 	bl	800028c <__adddf3>
 8008e96:	2400      	movs	r4, #0
 8008e98:	4632      	mov	r2, r6
 8008e9a:	463b      	mov	r3, r7
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	460d      	mov	r5, r1
 8008ea0:	f7f7 f9f2 	bl	8000288 <__aeabi_dsub>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4640      	mov	r0, r8
 8008eaa:	4649      	mov	r1, r9
 8008eac:	f7f7 f9ec 	bl	8000288 <__aeabi_dsub>
 8008eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008eb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9304      	str	r3, [sp, #16]
 8008ebc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008ec0:	4606      	mov	r6, r0
 8008ec2:	460f      	mov	r7, r1
 8008ec4:	4652      	mov	r2, sl
 8008ec6:	465b      	mov	r3, fp
 8008ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ecc:	f7f7 f9dc 	bl	8000288 <__aeabi_dsub>
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	462b      	mov	r3, r5
 8008ed4:	f7f7 fb90 	bl	80005f8 <__aeabi_dmul>
 8008ed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008edc:	4680      	mov	r8, r0
 8008ede:	4689      	mov	r9, r1
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	4639      	mov	r1, r7
 8008ee4:	f7f7 fb88 	bl	80005f8 <__aeabi_dmul>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	4640      	mov	r0, r8
 8008eee:	4649      	mov	r1, r9
 8008ef0:	f7f7 f9cc 	bl	800028c <__adddf3>
 8008ef4:	4652      	mov	r2, sl
 8008ef6:	465b      	mov	r3, fp
 8008ef8:	4606      	mov	r6, r0
 8008efa:	460f      	mov	r7, r1
 8008efc:	4620      	mov	r0, r4
 8008efe:	4629      	mov	r1, r5
 8008f00:	f7f7 fb7a 	bl	80005f8 <__aeabi_dmul>
 8008f04:	460b      	mov	r3, r1
 8008f06:	4602      	mov	r2, r0
 8008f08:	4680      	mov	r8, r0
 8008f0a:	4689      	mov	r9, r1
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	4639      	mov	r1, r7
 8008f10:	f7f7 f9bc 	bl	800028c <__adddf3>
 8008f14:	4b17      	ldr	r3, [pc, #92]	@ (8008f74 <__ieee754_pow+0x41c>)
 8008f16:	4299      	cmp	r1, r3
 8008f18:	4604      	mov	r4, r0
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	468a      	mov	sl, r1
 8008f1e:	468b      	mov	fp, r1
 8008f20:	f340 82ef 	ble.w	8009502 <__ieee754_pow+0x9aa>
 8008f24:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008f28:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008f2c:	4303      	orrs	r3, r0
 8008f2e:	f000 81e8 	beq.w	8009302 <__ieee754_pow+0x7aa>
 8008f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f36:	2200      	movs	r2, #0
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f7f7 fdcf 	bl	8000adc <__aeabi_dcmplt>
 8008f3e:	3800      	subs	r0, #0
 8008f40:	bf18      	it	ne
 8008f42:	2001      	movne	r0, #1
 8008f44:	e710      	b.n	8008d68 <__ieee754_pow+0x210>
 8008f46:	bf00      	nop
 8008f48:	60000000 	.word	0x60000000
 8008f4c:	3ff71547 	.word	0x3ff71547
 8008f50:	f85ddf44 	.word	0xf85ddf44
 8008f54:	3e54ae0b 	.word	0x3e54ae0b
 8008f58:	55555555 	.word	0x55555555
 8008f5c:	3fd55555 	.word	0x3fd55555
 8008f60:	652b82fe 	.word	0x652b82fe
 8008f64:	3ff71547 	.word	0x3ff71547
 8008f68:	3ff00000 	.word	0x3ff00000
 8008f6c:	3fd00000 	.word	0x3fd00000
 8008f70:	3fe00000 	.word	0x3fe00000
 8008f74:	408fffff 	.word	0x408fffff
 8008f78:	4bd5      	ldr	r3, [pc, #852]	@ (80092d0 <__ieee754_pow+0x778>)
 8008f7a:	402b      	ands	r3, r5
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	b92b      	cbnz	r3, 8008f8c <__ieee754_pow+0x434>
 8008f80:	4bd4      	ldr	r3, [pc, #848]	@ (80092d4 <__ieee754_pow+0x77c>)
 8008f82:	f7f7 fb39 	bl	80005f8 <__aeabi_dmul>
 8008f86:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008f8a:	468b      	mov	fp, r1
 8008f8c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008f90:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008f94:	4413      	add	r3, r2
 8008f96:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f98:	4bcf      	ldr	r3, [pc, #828]	@ (80092d8 <__ieee754_pow+0x780>)
 8008f9a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008f9e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008fa2:	459b      	cmp	fp, r3
 8008fa4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008fa8:	dd08      	ble.n	8008fbc <__ieee754_pow+0x464>
 8008faa:	4bcc      	ldr	r3, [pc, #816]	@ (80092dc <__ieee754_pow+0x784>)
 8008fac:	459b      	cmp	fp, r3
 8008fae:	f340 81a5 	ble.w	80092fc <__ieee754_pow+0x7a4>
 8008fb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fb8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008fbc:	f04f 0a00 	mov.w	sl, #0
 8008fc0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008fc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fc6:	4bc6      	ldr	r3, [pc, #792]	@ (80092e0 <__ieee754_pow+0x788>)
 8008fc8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008fcc:	ed93 7b00 	vldr	d7, [r3]
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	ec53 2b17 	vmov	r2, r3, d7
 8008fd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fda:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008fde:	f7f7 f953 	bl	8000288 <__aeabi_dsub>
 8008fe2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460f      	mov	r7, r1
 8008fea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fee:	f7f7 f94d 	bl	800028c <__adddf3>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	49ba      	ldr	r1, [pc, #744]	@ (80092e4 <__ieee754_pow+0x78c>)
 8008ffa:	f7f7 fc27 	bl	800084c <__aeabi_ddiv>
 8008ffe:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4630      	mov	r0, r6
 8009008:	4639      	mov	r1, r7
 800900a:	f7f7 faf5 	bl	80005f8 <__aeabi_dmul>
 800900e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009012:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009016:	106d      	asrs	r5, r5, #1
 8009018:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800901c:	f04f 0b00 	mov.w	fp, #0
 8009020:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009024:	4661      	mov	r1, ip
 8009026:	2200      	movs	r2, #0
 8009028:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800902c:	4658      	mov	r0, fp
 800902e:	46e1      	mov	r9, ip
 8009030:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009034:	4614      	mov	r4, r2
 8009036:	461d      	mov	r5, r3
 8009038:	f7f7 fade 	bl	80005f8 <__aeabi_dmul>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4630      	mov	r0, r6
 8009042:	4639      	mov	r1, r7
 8009044:	f7f7 f920 	bl	8000288 <__aeabi_dsub>
 8009048:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800904c:	4606      	mov	r6, r0
 800904e:	460f      	mov	r7, r1
 8009050:	4620      	mov	r0, r4
 8009052:	4629      	mov	r1, r5
 8009054:	f7f7 f918 	bl	8000288 <__aeabi_dsub>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009060:	f7f7 f912 	bl	8000288 <__aeabi_dsub>
 8009064:	465a      	mov	r2, fp
 8009066:	464b      	mov	r3, r9
 8009068:	f7f7 fac6 	bl	80005f8 <__aeabi_dmul>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4630      	mov	r0, r6
 8009072:	4639      	mov	r1, r7
 8009074:	f7f7 f908 	bl	8000288 <__aeabi_dsub>
 8009078:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800907c:	f7f7 fabc 	bl	80005f8 <__aeabi_dmul>
 8009080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009084:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009088:	4610      	mov	r0, r2
 800908a:	4619      	mov	r1, r3
 800908c:	f7f7 fab4 	bl	80005f8 <__aeabi_dmul>
 8009090:	a37d      	add	r3, pc, #500	@ (adr r3, 8009288 <__ieee754_pow+0x730>)
 8009092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009096:	4604      	mov	r4, r0
 8009098:	460d      	mov	r5, r1
 800909a:	f7f7 faad 	bl	80005f8 <__aeabi_dmul>
 800909e:	a37c      	add	r3, pc, #496	@ (adr r3, 8009290 <__ieee754_pow+0x738>)
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	f7f7 f8f2 	bl	800028c <__adddf3>
 80090a8:	4622      	mov	r2, r4
 80090aa:	462b      	mov	r3, r5
 80090ac:	f7f7 faa4 	bl	80005f8 <__aeabi_dmul>
 80090b0:	a379      	add	r3, pc, #484	@ (adr r3, 8009298 <__ieee754_pow+0x740>)
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	f7f7 f8e9 	bl	800028c <__adddf3>
 80090ba:	4622      	mov	r2, r4
 80090bc:	462b      	mov	r3, r5
 80090be:	f7f7 fa9b 	bl	80005f8 <__aeabi_dmul>
 80090c2:	a377      	add	r3, pc, #476	@ (adr r3, 80092a0 <__ieee754_pow+0x748>)
 80090c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c8:	f7f7 f8e0 	bl	800028c <__adddf3>
 80090cc:	4622      	mov	r2, r4
 80090ce:	462b      	mov	r3, r5
 80090d0:	f7f7 fa92 	bl	80005f8 <__aeabi_dmul>
 80090d4:	a374      	add	r3, pc, #464	@ (adr r3, 80092a8 <__ieee754_pow+0x750>)
 80090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090da:	f7f7 f8d7 	bl	800028c <__adddf3>
 80090de:	4622      	mov	r2, r4
 80090e0:	462b      	mov	r3, r5
 80090e2:	f7f7 fa89 	bl	80005f8 <__aeabi_dmul>
 80090e6:	a372      	add	r3, pc, #456	@ (adr r3, 80092b0 <__ieee754_pow+0x758>)
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	f7f7 f8ce 	bl	800028c <__adddf3>
 80090f0:	4622      	mov	r2, r4
 80090f2:	4606      	mov	r6, r0
 80090f4:	460f      	mov	r7, r1
 80090f6:	462b      	mov	r3, r5
 80090f8:	4620      	mov	r0, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	f7f7 fa7c 	bl	80005f8 <__aeabi_dmul>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4630      	mov	r0, r6
 8009106:	4639      	mov	r1, r7
 8009108:	f7f7 fa76 	bl	80005f8 <__aeabi_dmul>
 800910c:	465a      	mov	r2, fp
 800910e:	4604      	mov	r4, r0
 8009110:	460d      	mov	r5, r1
 8009112:	464b      	mov	r3, r9
 8009114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009118:	f7f7 f8b8 	bl	800028c <__adddf3>
 800911c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009120:	f7f7 fa6a 	bl	80005f8 <__aeabi_dmul>
 8009124:	4622      	mov	r2, r4
 8009126:	462b      	mov	r3, r5
 8009128:	f7f7 f8b0 	bl	800028c <__adddf3>
 800912c:	465a      	mov	r2, fp
 800912e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009132:	464b      	mov	r3, r9
 8009134:	4658      	mov	r0, fp
 8009136:	4649      	mov	r1, r9
 8009138:	f7f7 fa5e 	bl	80005f8 <__aeabi_dmul>
 800913c:	4b6a      	ldr	r3, [pc, #424]	@ (80092e8 <__ieee754_pow+0x790>)
 800913e:	2200      	movs	r2, #0
 8009140:	4606      	mov	r6, r0
 8009142:	460f      	mov	r7, r1
 8009144:	f7f7 f8a2 	bl	800028c <__adddf3>
 8009148:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800914c:	f7f7 f89e 	bl	800028c <__adddf3>
 8009150:	46d8      	mov	r8, fp
 8009152:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009156:	460d      	mov	r5, r1
 8009158:	465a      	mov	r2, fp
 800915a:	460b      	mov	r3, r1
 800915c:	4640      	mov	r0, r8
 800915e:	4649      	mov	r1, r9
 8009160:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009164:	f7f7 fa48 	bl	80005f8 <__aeabi_dmul>
 8009168:	465c      	mov	r4, fp
 800916a:	4680      	mov	r8, r0
 800916c:	4689      	mov	r9, r1
 800916e:	4b5e      	ldr	r3, [pc, #376]	@ (80092e8 <__ieee754_pow+0x790>)
 8009170:	2200      	movs	r2, #0
 8009172:	4620      	mov	r0, r4
 8009174:	4629      	mov	r1, r5
 8009176:	f7f7 f887 	bl	8000288 <__aeabi_dsub>
 800917a:	4632      	mov	r2, r6
 800917c:	463b      	mov	r3, r7
 800917e:	f7f7 f883 	bl	8000288 <__aeabi_dsub>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800918a:	f7f7 f87d 	bl	8000288 <__aeabi_dsub>
 800918e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009192:	f7f7 fa31 	bl	80005f8 <__aeabi_dmul>
 8009196:	4622      	mov	r2, r4
 8009198:	4606      	mov	r6, r0
 800919a:	460f      	mov	r7, r1
 800919c:	462b      	mov	r3, r5
 800919e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091a2:	f7f7 fa29 	bl	80005f8 <__aeabi_dmul>
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	4630      	mov	r0, r6
 80091ac:	4639      	mov	r1, r7
 80091ae:	f7f7 f86d 	bl	800028c <__adddf3>
 80091b2:	4606      	mov	r6, r0
 80091b4:	460f      	mov	r7, r1
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4640      	mov	r0, r8
 80091bc:	4649      	mov	r1, r9
 80091be:	f7f7 f865 	bl	800028c <__adddf3>
 80091c2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80091c6:	a33c      	add	r3, pc, #240	@ (adr r3, 80092b8 <__ieee754_pow+0x760>)
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	4658      	mov	r0, fp
 80091ce:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80091d2:	460d      	mov	r5, r1
 80091d4:	f7f7 fa10 	bl	80005f8 <__aeabi_dmul>
 80091d8:	465c      	mov	r4, fp
 80091da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091de:	4642      	mov	r2, r8
 80091e0:	464b      	mov	r3, r9
 80091e2:	4620      	mov	r0, r4
 80091e4:	4629      	mov	r1, r5
 80091e6:	f7f7 f84f 	bl	8000288 <__aeabi_dsub>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	4630      	mov	r0, r6
 80091f0:	4639      	mov	r1, r7
 80091f2:	f7f7 f849 	bl	8000288 <__aeabi_dsub>
 80091f6:	a332      	add	r3, pc, #200	@ (adr r3, 80092c0 <__ieee754_pow+0x768>)
 80091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fc:	f7f7 f9fc 	bl	80005f8 <__aeabi_dmul>
 8009200:	a331      	add	r3, pc, #196	@ (adr r3, 80092c8 <__ieee754_pow+0x770>)
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	4606      	mov	r6, r0
 8009208:	460f      	mov	r7, r1
 800920a:	4620      	mov	r0, r4
 800920c:	4629      	mov	r1, r5
 800920e:	f7f7 f9f3 	bl	80005f8 <__aeabi_dmul>
 8009212:	4602      	mov	r2, r0
 8009214:	460b      	mov	r3, r1
 8009216:	4630      	mov	r0, r6
 8009218:	4639      	mov	r1, r7
 800921a:	f7f7 f837 	bl	800028c <__adddf3>
 800921e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009220:	4b32      	ldr	r3, [pc, #200]	@ (80092ec <__ieee754_pow+0x794>)
 8009222:	4413      	add	r3, r2
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f7f7 f830 	bl	800028c <__adddf3>
 800922c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009230:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009232:	f7f7 f977 	bl	8000524 <__aeabi_i2d>
 8009236:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009238:	4b2d      	ldr	r3, [pc, #180]	@ (80092f0 <__ieee754_pow+0x798>)
 800923a:	4413      	add	r3, r2
 800923c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009240:	4606      	mov	r6, r0
 8009242:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009246:	460f      	mov	r7, r1
 8009248:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800924c:	f7f7 f81e 	bl	800028c <__adddf3>
 8009250:	4642      	mov	r2, r8
 8009252:	464b      	mov	r3, r9
 8009254:	f7f7 f81a 	bl	800028c <__adddf3>
 8009258:	4632      	mov	r2, r6
 800925a:	463b      	mov	r3, r7
 800925c:	f7f7 f816 	bl	800028c <__adddf3>
 8009260:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009264:	4632      	mov	r2, r6
 8009266:	463b      	mov	r3, r7
 8009268:	4658      	mov	r0, fp
 800926a:	460d      	mov	r5, r1
 800926c:	f7f7 f80c 	bl	8000288 <__aeabi_dsub>
 8009270:	4642      	mov	r2, r8
 8009272:	464b      	mov	r3, r9
 8009274:	f7f7 f808 	bl	8000288 <__aeabi_dsub>
 8009278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800927c:	f7f7 f804 	bl	8000288 <__aeabi_dsub>
 8009280:	465c      	mov	r4, fp
 8009282:	4602      	mov	r2, r0
 8009284:	e036      	b.n	80092f4 <__ieee754_pow+0x79c>
 8009286:	bf00      	nop
 8009288:	4a454eef 	.word	0x4a454eef
 800928c:	3fca7e28 	.word	0x3fca7e28
 8009290:	93c9db65 	.word	0x93c9db65
 8009294:	3fcd864a 	.word	0x3fcd864a
 8009298:	a91d4101 	.word	0xa91d4101
 800929c:	3fd17460 	.word	0x3fd17460
 80092a0:	518f264d 	.word	0x518f264d
 80092a4:	3fd55555 	.word	0x3fd55555
 80092a8:	db6fabff 	.word	0xdb6fabff
 80092ac:	3fdb6db6 	.word	0x3fdb6db6
 80092b0:	33333303 	.word	0x33333303
 80092b4:	3fe33333 	.word	0x3fe33333
 80092b8:	e0000000 	.word	0xe0000000
 80092bc:	3feec709 	.word	0x3feec709
 80092c0:	dc3a03fd 	.word	0xdc3a03fd
 80092c4:	3feec709 	.word	0x3feec709
 80092c8:	145b01f5 	.word	0x145b01f5
 80092cc:	be3e2fe0 	.word	0xbe3e2fe0
 80092d0:	7ff00000 	.word	0x7ff00000
 80092d4:	43400000 	.word	0x43400000
 80092d8:	0003988e 	.word	0x0003988e
 80092dc:	000bb679 	.word	0x000bb679
 80092e0:	0800a0d0 	.word	0x0800a0d0
 80092e4:	3ff00000 	.word	0x3ff00000
 80092e8:	40080000 	.word	0x40080000
 80092ec:	0800a0b0 	.word	0x0800a0b0
 80092f0:	0800a0c0 	.word	0x0800a0c0
 80092f4:	460b      	mov	r3, r1
 80092f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092fa:	e5d7      	b.n	8008eac <__ieee754_pow+0x354>
 80092fc:	f04f 0a01 	mov.w	sl, #1
 8009300:	e65e      	b.n	8008fc0 <__ieee754_pow+0x468>
 8009302:	a3b4      	add	r3, pc, #720	@ (adr r3, 80095d4 <__ieee754_pow+0xa7c>)
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f6 ffbe 	bl	800028c <__adddf3>
 8009310:	4642      	mov	r2, r8
 8009312:	e9cd 0100 	strd	r0, r1, [sp]
 8009316:	464b      	mov	r3, r9
 8009318:	4620      	mov	r0, r4
 800931a:	4629      	mov	r1, r5
 800931c:	f7f6 ffb4 	bl	8000288 <__aeabi_dsub>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009328:	f7f7 fbf6 	bl	8000b18 <__aeabi_dcmpgt>
 800932c:	2800      	cmp	r0, #0
 800932e:	f47f ae00 	bne.w	8008f32 <__ieee754_pow+0x3da>
 8009332:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009336:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800933a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800933e:	fa43 fa0a 	asr.w	sl, r3, sl
 8009342:	44da      	add	sl, fp
 8009344:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009348:	489d      	ldr	r0, [pc, #628]	@ (80095c0 <__ieee754_pow+0xa68>)
 800934a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800934e:	4108      	asrs	r0, r1
 8009350:	ea00 030a 	and.w	r3, r0, sl
 8009354:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009358:	f1c1 0114 	rsb	r1, r1, #20
 800935c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009360:	fa4a fa01 	asr.w	sl, sl, r1
 8009364:	f1bb 0f00 	cmp.w	fp, #0
 8009368:	4640      	mov	r0, r8
 800936a:	4649      	mov	r1, r9
 800936c:	f04f 0200 	mov.w	r2, #0
 8009370:	bfb8      	it	lt
 8009372:	f1ca 0a00 	rsblt	sl, sl, #0
 8009376:	f7f6 ff87 	bl	8000288 <__aeabi_dsub>
 800937a:	4680      	mov	r8, r0
 800937c:	4689      	mov	r9, r1
 800937e:	4632      	mov	r2, r6
 8009380:	463b      	mov	r3, r7
 8009382:	4640      	mov	r0, r8
 8009384:	4649      	mov	r1, r9
 8009386:	f7f6 ff81 	bl	800028c <__adddf3>
 800938a:	2400      	movs	r4, #0
 800938c:	a37c      	add	r3, pc, #496	@ (adr r3, 8009580 <__ieee754_pow+0xa28>)
 800938e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009392:	4620      	mov	r0, r4
 8009394:	460d      	mov	r5, r1
 8009396:	f7f7 f92f 	bl	80005f8 <__aeabi_dmul>
 800939a:	4642      	mov	r2, r8
 800939c:	e9cd 0100 	strd	r0, r1, [sp]
 80093a0:	464b      	mov	r3, r9
 80093a2:	4620      	mov	r0, r4
 80093a4:	4629      	mov	r1, r5
 80093a6:	f7f6 ff6f 	bl	8000288 <__aeabi_dsub>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4630      	mov	r0, r6
 80093b0:	4639      	mov	r1, r7
 80093b2:	f7f6 ff69 	bl	8000288 <__aeabi_dsub>
 80093b6:	a374      	add	r3, pc, #464	@ (adr r3, 8009588 <__ieee754_pow+0xa30>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	f7f7 f91c 	bl	80005f8 <__aeabi_dmul>
 80093c0:	a373      	add	r3, pc, #460	@ (adr r3, 8009590 <__ieee754_pow+0xa38>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	4680      	mov	r8, r0
 80093c8:	4689      	mov	r9, r1
 80093ca:	4620      	mov	r0, r4
 80093cc:	4629      	mov	r1, r5
 80093ce:	f7f7 f913 	bl	80005f8 <__aeabi_dmul>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4640      	mov	r0, r8
 80093d8:	4649      	mov	r1, r9
 80093da:	f7f6 ff57 	bl	800028c <__adddf3>
 80093de:	4604      	mov	r4, r0
 80093e0:	460d      	mov	r5, r1
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093ea:	f7f6 ff4f 	bl	800028c <__adddf3>
 80093ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093f2:	4680      	mov	r8, r0
 80093f4:	4689      	mov	r9, r1
 80093f6:	f7f6 ff47 	bl	8000288 <__aeabi_dsub>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	4620      	mov	r0, r4
 8009400:	4629      	mov	r1, r5
 8009402:	f7f6 ff41 	bl	8000288 <__aeabi_dsub>
 8009406:	4642      	mov	r2, r8
 8009408:	4606      	mov	r6, r0
 800940a:	460f      	mov	r7, r1
 800940c:	464b      	mov	r3, r9
 800940e:	4640      	mov	r0, r8
 8009410:	4649      	mov	r1, r9
 8009412:	f7f7 f8f1 	bl	80005f8 <__aeabi_dmul>
 8009416:	a360      	add	r3, pc, #384	@ (adr r3, 8009598 <__ieee754_pow+0xa40>)
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	4604      	mov	r4, r0
 800941e:	460d      	mov	r5, r1
 8009420:	f7f7 f8ea 	bl	80005f8 <__aeabi_dmul>
 8009424:	a35e      	add	r3, pc, #376	@ (adr r3, 80095a0 <__ieee754_pow+0xa48>)
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	f7f6 ff2d 	bl	8000288 <__aeabi_dsub>
 800942e:	4622      	mov	r2, r4
 8009430:	462b      	mov	r3, r5
 8009432:	f7f7 f8e1 	bl	80005f8 <__aeabi_dmul>
 8009436:	a35c      	add	r3, pc, #368	@ (adr r3, 80095a8 <__ieee754_pow+0xa50>)
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	f7f6 ff26 	bl	800028c <__adddf3>
 8009440:	4622      	mov	r2, r4
 8009442:	462b      	mov	r3, r5
 8009444:	f7f7 f8d8 	bl	80005f8 <__aeabi_dmul>
 8009448:	a359      	add	r3, pc, #356	@ (adr r3, 80095b0 <__ieee754_pow+0xa58>)
 800944a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944e:	f7f6 ff1b 	bl	8000288 <__aeabi_dsub>
 8009452:	4622      	mov	r2, r4
 8009454:	462b      	mov	r3, r5
 8009456:	f7f7 f8cf 	bl	80005f8 <__aeabi_dmul>
 800945a:	a357      	add	r3, pc, #348	@ (adr r3, 80095b8 <__ieee754_pow+0xa60>)
 800945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009460:	f7f6 ff14 	bl	800028c <__adddf3>
 8009464:	4622      	mov	r2, r4
 8009466:	462b      	mov	r3, r5
 8009468:	f7f7 f8c6 	bl	80005f8 <__aeabi_dmul>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4640      	mov	r0, r8
 8009472:	4649      	mov	r1, r9
 8009474:	f7f6 ff08 	bl	8000288 <__aeabi_dsub>
 8009478:	4604      	mov	r4, r0
 800947a:	460d      	mov	r5, r1
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4640      	mov	r0, r8
 8009482:	4649      	mov	r1, r9
 8009484:	f7f7 f8b8 	bl	80005f8 <__aeabi_dmul>
 8009488:	2200      	movs	r2, #0
 800948a:	e9cd 0100 	strd	r0, r1, [sp]
 800948e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009492:	4620      	mov	r0, r4
 8009494:	4629      	mov	r1, r5
 8009496:	f7f6 fef7 	bl	8000288 <__aeabi_dsub>
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
 800949e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094a2:	f7f7 f9d3 	bl	800084c <__aeabi_ddiv>
 80094a6:	4632      	mov	r2, r6
 80094a8:	4604      	mov	r4, r0
 80094aa:	460d      	mov	r5, r1
 80094ac:	463b      	mov	r3, r7
 80094ae:	4640      	mov	r0, r8
 80094b0:	4649      	mov	r1, r9
 80094b2:	f7f7 f8a1 	bl	80005f8 <__aeabi_dmul>
 80094b6:	4632      	mov	r2, r6
 80094b8:	463b      	mov	r3, r7
 80094ba:	f7f6 fee7 	bl	800028c <__adddf3>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4620      	mov	r0, r4
 80094c4:	4629      	mov	r1, r5
 80094c6:	f7f6 fedf 	bl	8000288 <__aeabi_dsub>
 80094ca:	4642      	mov	r2, r8
 80094cc:	464b      	mov	r3, r9
 80094ce:	f7f6 fedb 	bl	8000288 <__aeabi_dsub>
 80094d2:	460b      	mov	r3, r1
 80094d4:	4602      	mov	r2, r0
 80094d6:	493b      	ldr	r1, [pc, #236]	@ (80095c4 <__ieee754_pow+0xa6c>)
 80094d8:	2000      	movs	r0, #0
 80094da:	f7f6 fed5 	bl	8000288 <__aeabi_dsub>
 80094de:	ec41 0b10 	vmov	d0, r0, r1
 80094e2:	ee10 3a90 	vmov	r3, s1
 80094e6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80094ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094ee:	da30      	bge.n	8009552 <__ieee754_pow+0x9fa>
 80094f0:	4650      	mov	r0, sl
 80094f2:	f000 f87d 	bl	80095f0 <scalbn>
 80094f6:	ec51 0b10 	vmov	r0, r1, d0
 80094fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094fe:	f7ff bbd2 	b.w	8008ca6 <__ieee754_pow+0x14e>
 8009502:	4c31      	ldr	r4, [pc, #196]	@ (80095c8 <__ieee754_pow+0xa70>)
 8009504:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009508:	42a3      	cmp	r3, r4
 800950a:	d91a      	bls.n	8009542 <__ieee754_pow+0x9ea>
 800950c:	4b2f      	ldr	r3, [pc, #188]	@ (80095cc <__ieee754_pow+0xa74>)
 800950e:	440b      	add	r3, r1
 8009510:	4303      	orrs	r3, r0
 8009512:	d009      	beq.n	8009528 <__ieee754_pow+0x9d0>
 8009514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009518:	2200      	movs	r2, #0
 800951a:	2300      	movs	r3, #0
 800951c:	f7f7 fade 	bl	8000adc <__aeabi_dcmplt>
 8009520:	3800      	subs	r0, #0
 8009522:	bf18      	it	ne
 8009524:	2001      	movne	r0, #1
 8009526:	e42b      	b.n	8008d80 <__ieee754_pow+0x228>
 8009528:	4642      	mov	r2, r8
 800952a:	464b      	mov	r3, r9
 800952c:	f7f6 feac 	bl	8000288 <__aeabi_dsub>
 8009530:	4632      	mov	r2, r6
 8009532:	463b      	mov	r3, r7
 8009534:	f7f7 fae6 	bl	8000b04 <__aeabi_dcmpge>
 8009538:	2800      	cmp	r0, #0
 800953a:	d1eb      	bne.n	8009514 <__ieee754_pow+0x9bc>
 800953c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80095dc <__ieee754_pow+0xa84>
 8009540:	e6f7      	b.n	8009332 <__ieee754_pow+0x7da>
 8009542:	469a      	mov	sl, r3
 8009544:	4b22      	ldr	r3, [pc, #136]	@ (80095d0 <__ieee754_pow+0xa78>)
 8009546:	459a      	cmp	sl, r3
 8009548:	f63f aef3 	bhi.w	8009332 <__ieee754_pow+0x7da>
 800954c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009550:	e715      	b.n	800937e <__ieee754_pow+0x826>
 8009552:	ec51 0b10 	vmov	r0, r1, d0
 8009556:	4619      	mov	r1, r3
 8009558:	e7cf      	b.n	80094fa <__ieee754_pow+0x9a2>
 800955a:	491a      	ldr	r1, [pc, #104]	@ (80095c4 <__ieee754_pow+0xa6c>)
 800955c:	2000      	movs	r0, #0
 800955e:	f7ff bb18 	b.w	8008b92 <__ieee754_pow+0x3a>
 8009562:	2000      	movs	r0, #0
 8009564:	2100      	movs	r1, #0
 8009566:	f7ff bb14 	b.w	8008b92 <__ieee754_pow+0x3a>
 800956a:	4630      	mov	r0, r6
 800956c:	4639      	mov	r1, r7
 800956e:	f7ff bb10 	b.w	8008b92 <__ieee754_pow+0x3a>
 8009572:	460c      	mov	r4, r1
 8009574:	f7ff bb5e 	b.w	8008c34 <__ieee754_pow+0xdc>
 8009578:	2400      	movs	r4, #0
 800957a:	f7ff bb49 	b.w	8008c10 <__ieee754_pow+0xb8>
 800957e:	bf00      	nop
 8009580:	00000000 	.word	0x00000000
 8009584:	3fe62e43 	.word	0x3fe62e43
 8009588:	fefa39ef 	.word	0xfefa39ef
 800958c:	3fe62e42 	.word	0x3fe62e42
 8009590:	0ca86c39 	.word	0x0ca86c39
 8009594:	be205c61 	.word	0xbe205c61
 8009598:	72bea4d0 	.word	0x72bea4d0
 800959c:	3e663769 	.word	0x3e663769
 80095a0:	c5d26bf1 	.word	0xc5d26bf1
 80095a4:	3ebbbd41 	.word	0x3ebbbd41
 80095a8:	af25de2c 	.word	0xaf25de2c
 80095ac:	3f11566a 	.word	0x3f11566a
 80095b0:	16bebd93 	.word	0x16bebd93
 80095b4:	3f66c16c 	.word	0x3f66c16c
 80095b8:	5555553e 	.word	0x5555553e
 80095bc:	3fc55555 	.word	0x3fc55555
 80095c0:	fff00000 	.word	0xfff00000
 80095c4:	3ff00000 	.word	0x3ff00000
 80095c8:	4090cbff 	.word	0x4090cbff
 80095cc:	3f6f3400 	.word	0x3f6f3400
 80095d0:	3fe00000 	.word	0x3fe00000
 80095d4:	652b82fe 	.word	0x652b82fe
 80095d8:	3c971547 	.word	0x3c971547
 80095dc:	4090cc00 	.word	0x4090cc00

080095e0 <fabs>:
 80095e0:	ec51 0b10 	vmov	r0, r1, d0
 80095e4:	4602      	mov	r2, r0
 80095e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80095ea:	ec43 2b10 	vmov	d0, r2, r3
 80095ee:	4770      	bx	lr

080095f0 <scalbn>:
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	ec55 4b10 	vmov	r4, r5, d0
 80095f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80095fa:	4606      	mov	r6, r0
 80095fc:	462b      	mov	r3, r5
 80095fe:	b991      	cbnz	r1, 8009626 <scalbn+0x36>
 8009600:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009604:	4323      	orrs	r3, r4
 8009606:	d03d      	beq.n	8009684 <scalbn+0x94>
 8009608:	4b35      	ldr	r3, [pc, #212]	@ (80096e0 <scalbn+0xf0>)
 800960a:	4620      	mov	r0, r4
 800960c:	4629      	mov	r1, r5
 800960e:	2200      	movs	r2, #0
 8009610:	f7f6 fff2 	bl	80005f8 <__aeabi_dmul>
 8009614:	4b33      	ldr	r3, [pc, #204]	@ (80096e4 <scalbn+0xf4>)
 8009616:	429e      	cmp	r6, r3
 8009618:	4604      	mov	r4, r0
 800961a:	460d      	mov	r5, r1
 800961c:	da0f      	bge.n	800963e <scalbn+0x4e>
 800961e:	a328      	add	r3, pc, #160	@ (adr r3, 80096c0 <scalbn+0xd0>)
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	e01e      	b.n	8009664 <scalbn+0x74>
 8009626:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800962a:	4291      	cmp	r1, r2
 800962c:	d10b      	bne.n	8009646 <scalbn+0x56>
 800962e:	4622      	mov	r2, r4
 8009630:	4620      	mov	r0, r4
 8009632:	4629      	mov	r1, r5
 8009634:	f7f6 fe2a 	bl	800028c <__adddf3>
 8009638:	4604      	mov	r4, r0
 800963a:	460d      	mov	r5, r1
 800963c:	e022      	b.n	8009684 <scalbn+0x94>
 800963e:	460b      	mov	r3, r1
 8009640:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009644:	3936      	subs	r1, #54	@ 0x36
 8009646:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800964a:	4296      	cmp	r6, r2
 800964c:	dd0d      	ble.n	800966a <scalbn+0x7a>
 800964e:	2d00      	cmp	r5, #0
 8009650:	a11d      	add	r1, pc, #116	@ (adr r1, 80096c8 <scalbn+0xd8>)
 8009652:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009656:	da02      	bge.n	800965e <scalbn+0x6e>
 8009658:	a11d      	add	r1, pc, #116	@ (adr r1, 80096d0 <scalbn+0xe0>)
 800965a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800965e:	a31a      	add	r3, pc, #104	@ (adr r3, 80096c8 <scalbn+0xd8>)
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	f7f6 ffc8 	bl	80005f8 <__aeabi_dmul>
 8009668:	e7e6      	b.n	8009638 <scalbn+0x48>
 800966a:	1872      	adds	r2, r6, r1
 800966c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009670:	428a      	cmp	r2, r1
 8009672:	dcec      	bgt.n	800964e <scalbn+0x5e>
 8009674:	2a00      	cmp	r2, #0
 8009676:	dd08      	ble.n	800968a <scalbn+0x9a>
 8009678:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800967c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009680:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009684:	ec45 4b10 	vmov	d0, r4, r5
 8009688:	bd70      	pop	{r4, r5, r6, pc}
 800968a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800968e:	da08      	bge.n	80096a2 <scalbn+0xb2>
 8009690:	2d00      	cmp	r5, #0
 8009692:	a10b      	add	r1, pc, #44	@ (adr r1, 80096c0 <scalbn+0xd0>)
 8009694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009698:	dac1      	bge.n	800961e <scalbn+0x2e>
 800969a:	a10f      	add	r1, pc, #60	@ (adr r1, 80096d8 <scalbn+0xe8>)
 800969c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096a0:	e7bd      	b.n	800961e <scalbn+0x2e>
 80096a2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80096a6:	3236      	adds	r2, #54	@ 0x36
 80096a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80096ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096b0:	4620      	mov	r0, r4
 80096b2:	4b0d      	ldr	r3, [pc, #52]	@ (80096e8 <scalbn+0xf8>)
 80096b4:	4629      	mov	r1, r5
 80096b6:	2200      	movs	r2, #0
 80096b8:	e7d4      	b.n	8009664 <scalbn+0x74>
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	c2f8f359 	.word	0xc2f8f359
 80096c4:	01a56e1f 	.word	0x01a56e1f
 80096c8:	8800759c 	.word	0x8800759c
 80096cc:	7e37e43c 	.word	0x7e37e43c
 80096d0:	8800759c 	.word	0x8800759c
 80096d4:	fe37e43c 	.word	0xfe37e43c
 80096d8:	c2f8f359 	.word	0xc2f8f359
 80096dc:	81a56e1f 	.word	0x81a56e1f
 80096e0:	43500000 	.word	0x43500000
 80096e4:	ffff3cb0 	.word	0xffff3cb0
 80096e8:	3c900000 	.word	0x3c900000

080096ec <with_errno>:
 80096ec:	b510      	push	{r4, lr}
 80096ee:	ed2d 8b02 	vpush	{d8}
 80096f2:	eeb0 8a40 	vmov.f32	s16, s0
 80096f6:	eef0 8a60 	vmov.f32	s17, s1
 80096fa:	4604      	mov	r4, r0
 80096fc:	f7fd f866 	bl	80067cc <__errno>
 8009700:	eeb0 0a48 	vmov.f32	s0, s16
 8009704:	eef0 0a68 	vmov.f32	s1, s17
 8009708:	ecbd 8b02 	vpop	{d8}
 800970c:	6004      	str	r4, [r0, #0]
 800970e:	bd10      	pop	{r4, pc}

08009710 <xflow>:
 8009710:	4603      	mov	r3, r0
 8009712:	b507      	push	{r0, r1, r2, lr}
 8009714:	ec51 0b10 	vmov	r0, r1, d0
 8009718:	b183      	cbz	r3, 800973c <xflow+0x2c>
 800971a:	4602      	mov	r2, r0
 800971c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009720:	e9cd 2300 	strd	r2, r3, [sp]
 8009724:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009728:	f7f6 ff66 	bl	80005f8 <__aeabi_dmul>
 800972c:	ec41 0b10 	vmov	d0, r0, r1
 8009730:	2022      	movs	r0, #34	@ 0x22
 8009732:	b003      	add	sp, #12
 8009734:	f85d eb04 	ldr.w	lr, [sp], #4
 8009738:	f7ff bfd8 	b.w	80096ec <with_errno>
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	e7ee      	b.n	8009720 <xflow+0x10>
 8009742:	0000      	movs	r0, r0
 8009744:	0000      	movs	r0, r0
	...

08009748 <__math_uflow>:
 8009748:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009750 <__math_uflow+0x8>
 800974c:	f7ff bfe0 	b.w	8009710 <xflow>
 8009750:	00000000 	.word	0x00000000
 8009754:	10000000 	.word	0x10000000

08009758 <__math_oflow>:
 8009758:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009760 <__math_oflow+0x8>
 800975c:	f7ff bfd8 	b.w	8009710 <xflow>
 8009760:	00000000 	.word	0x00000000
 8009764:	70000000 	.word	0x70000000

08009768 <__ieee754_sqrt>:
 8009768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	4a68      	ldr	r2, [pc, #416]	@ (8009910 <__ieee754_sqrt+0x1a8>)
 800976e:	ec55 4b10 	vmov	r4, r5, d0
 8009772:	43aa      	bics	r2, r5
 8009774:	462b      	mov	r3, r5
 8009776:	4621      	mov	r1, r4
 8009778:	d110      	bne.n	800979c <__ieee754_sqrt+0x34>
 800977a:	4622      	mov	r2, r4
 800977c:	4620      	mov	r0, r4
 800977e:	4629      	mov	r1, r5
 8009780:	f7f6 ff3a 	bl	80005f8 <__aeabi_dmul>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4620      	mov	r0, r4
 800978a:	4629      	mov	r1, r5
 800978c:	f7f6 fd7e 	bl	800028c <__adddf3>
 8009790:	4604      	mov	r4, r0
 8009792:	460d      	mov	r5, r1
 8009794:	ec45 4b10 	vmov	d0, r4, r5
 8009798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979c:	2d00      	cmp	r5, #0
 800979e:	dc0e      	bgt.n	80097be <__ieee754_sqrt+0x56>
 80097a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80097a4:	4322      	orrs	r2, r4
 80097a6:	d0f5      	beq.n	8009794 <__ieee754_sqrt+0x2c>
 80097a8:	b19d      	cbz	r5, 80097d2 <__ieee754_sqrt+0x6a>
 80097aa:	4622      	mov	r2, r4
 80097ac:	4620      	mov	r0, r4
 80097ae:	4629      	mov	r1, r5
 80097b0:	f7f6 fd6a 	bl	8000288 <__aeabi_dsub>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	f7f7 f848 	bl	800084c <__aeabi_ddiv>
 80097bc:	e7e8      	b.n	8009790 <__ieee754_sqrt+0x28>
 80097be:	152a      	asrs	r2, r5, #20
 80097c0:	d115      	bne.n	80097ee <__ieee754_sqrt+0x86>
 80097c2:	2000      	movs	r0, #0
 80097c4:	e009      	b.n	80097da <__ieee754_sqrt+0x72>
 80097c6:	0acb      	lsrs	r3, r1, #11
 80097c8:	3a15      	subs	r2, #21
 80097ca:	0549      	lsls	r1, r1, #21
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0fa      	beq.n	80097c6 <__ieee754_sqrt+0x5e>
 80097d0:	e7f7      	b.n	80097c2 <__ieee754_sqrt+0x5a>
 80097d2:	462a      	mov	r2, r5
 80097d4:	e7fa      	b.n	80097cc <__ieee754_sqrt+0x64>
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	3001      	adds	r0, #1
 80097da:	02dc      	lsls	r4, r3, #11
 80097dc:	d5fb      	bpl.n	80097d6 <__ieee754_sqrt+0x6e>
 80097de:	1e44      	subs	r4, r0, #1
 80097e0:	1b12      	subs	r2, r2, r4
 80097e2:	f1c0 0420 	rsb	r4, r0, #32
 80097e6:	fa21 f404 	lsr.w	r4, r1, r4
 80097ea:	4323      	orrs	r3, r4
 80097ec:	4081      	lsls	r1, r0
 80097ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80097f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097fa:	07d2      	lsls	r2, r2, #31
 80097fc:	bf5c      	itt	pl
 80097fe:	005b      	lslpl	r3, r3, #1
 8009800:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009804:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009808:	bf58      	it	pl
 800980a:	0049      	lslpl	r1, r1, #1
 800980c:	2600      	movs	r6, #0
 800980e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009812:	106d      	asrs	r5, r5, #1
 8009814:	0049      	lsls	r1, r1, #1
 8009816:	2016      	movs	r0, #22
 8009818:	4632      	mov	r2, r6
 800981a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800981e:	1917      	adds	r7, r2, r4
 8009820:	429f      	cmp	r7, r3
 8009822:	bfde      	ittt	le
 8009824:	193a      	addle	r2, r7, r4
 8009826:	1bdb      	suble	r3, r3, r7
 8009828:	1936      	addle	r6, r6, r4
 800982a:	0fcf      	lsrs	r7, r1, #31
 800982c:	3801      	subs	r0, #1
 800982e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009832:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009836:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800983a:	d1f0      	bne.n	800981e <__ieee754_sqrt+0xb6>
 800983c:	4604      	mov	r4, r0
 800983e:	2720      	movs	r7, #32
 8009840:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009844:	429a      	cmp	r2, r3
 8009846:	eb00 0e0c 	add.w	lr, r0, ip
 800984a:	db02      	blt.n	8009852 <__ieee754_sqrt+0xea>
 800984c:	d113      	bne.n	8009876 <__ieee754_sqrt+0x10e>
 800984e:	458e      	cmp	lr, r1
 8009850:	d811      	bhi.n	8009876 <__ieee754_sqrt+0x10e>
 8009852:	f1be 0f00 	cmp.w	lr, #0
 8009856:	eb0e 000c 	add.w	r0, lr, ip
 800985a:	da42      	bge.n	80098e2 <__ieee754_sqrt+0x17a>
 800985c:	2800      	cmp	r0, #0
 800985e:	db40      	blt.n	80098e2 <__ieee754_sqrt+0x17a>
 8009860:	f102 0801 	add.w	r8, r2, #1
 8009864:	1a9b      	subs	r3, r3, r2
 8009866:	458e      	cmp	lr, r1
 8009868:	bf88      	it	hi
 800986a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800986e:	eba1 010e 	sub.w	r1, r1, lr
 8009872:	4464      	add	r4, ip
 8009874:	4642      	mov	r2, r8
 8009876:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800987a:	3f01      	subs	r7, #1
 800987c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009880:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009884:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009888:	d1dc      	bne.n	8009844 <__ieee754_sqrt+0xdc>
 800988a:	4319      	orrs	r1, r3
 800988c:	d01b      	beq.n	80098c6 <__ieee754_sqrt+0x15e>
 800988e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009914 <__ieee754_sqrt+0x1ac>
 8009892:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009918 <__ieee754_sqrt+0x1b0>
 8009896:	e9da 0100 	ldrd	r0, r1, [sl]
 800989a:	e9db 2300 	ldrd	r2, r3, [fp]
 800989e:	f7f6 fcf3 	bl	8000288 <__aeabi_dsub>
 80098a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4640      	mov	r0, r8
 80098ac:	4649      	mov	r1, r9
 80098ae:	f7f7 f91f 	bl	8000af0 <__aeabi_dcmple>
 80098b2:	b140      	cbz	r0, 80098c6 <__ieee754_sqrt+0x15e>
 80098b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80098b8:	e9da 0100 	ldrd	r0, r1, [sl]
 80098bc:	e9db 2300 	ldrd	r2, r3, [fp]
 80098c0:	d111      	bne.n	80098e6 <__ieee754_sqrt+0x17e>
 80098c2:	3601      	adds	r6, #1
 80098c4:	463c      	mov	r4, r7
 80098c6:	1072      	asrs	r2, r6, #1
 80098c8:	0863      	lsrs	r3, r4, #1
 80098ca:	07f1      	lsls	r1, r6, #31
 80098cc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80098d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80098d4:	bf48      	it	mi
 80098d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80098da:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80098de:	4618      	mov	r0, r3
 80098e0:	e756      	b.n	8009790 <__ieee754_sqrt+0x28>
 80098e2:	4690      	mov	r8, r2
 80098e4:	e7be      	b.n	8009864 <__ieee754_sqrt+0xfc>
 80098e6:	f7f6 fcd1 	bl	800028c <__adddf3>
 80098ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4640      	mov	r0, r8
 80098f4:	4649      	mov	r1, r9
 80098f6:	f7f7 f8f1 	bl	8000adc <__aeabi_dcmplt>
 80098fa:	b120      	cbz	r0, 8009906 <__ieee754_sqrt+0x19e>
 80098fc:	1ca0      	adds	r0, r4, #2
 80098fe:	bf08      	it	eq
 8009900:	3601      	addeq	r6, #1
 8009902:	3402      	adds	r4, #2
 8009904:	e7df      	b.n	80098c6 <__ieee754_sqrt+0x15e>
 8009906:	1c63      	adds	r3, r4, #1
 8009908:	f023 0401 	bic.w	r4, r3, #1
 800990c:	e7db      	b.n	80098c6 <__ieee754_sqrt+0x15e>
 800990e:	bf00      	nop
 8009910:	7ff00000 	.word	0x7ff00000
 8009914:	200001e8 	.word	0x200001e8
 8009918:	200001e0 	.word	0x200001e0
 800991c:	00000000 	.word	0x00000000

08009920 <__ieee754_log>:
 8009920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009924:	ec51 0b10 	vmov	r0, r1, d0
 8009928:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800992c:	b087      	sub	sp, #28
 800992e:	460d      	mov	r5, r1
 8009930:	da26      	bge.n	8009980 <__ieee754_log+0x60>
 8009932:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009936:	4303      	orrs	r3, r0
 8009938:	4602      	mov	r2, r0
 800993a:	d10a      	bne.n	8009952 <__ieee754_log+0x32>
 800993c:	49ce      	ldr	r1, [pc, #824]	@ (8009c78 <__ieee754_log+0x358>)
 800993e:	2200      	movs	r2, #0
 8009940:	2300      	movs	r3, #0
 8009942:	2000      	movs	r0, #0
 8009944:	f7f6 ff82 	bl	800084c <__aeabi_ddiv>
 8009948:	ec41 0b10 	vmov	d0, r0, r1
 800994c:	b007      	add	sp, #28
 800994e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009952:	2900      	cmp	r1, #0
 8009954:	da05      	bge.n	8009962 <__ieee754_log+0x42>
 8009956:	460b      	mov	r3, r1
 8009958:	f7f6 fc96 	bl	8000288 <__aeabi_dsub>
 800995c:	2200      	movs	r2, #0
 800995e:	2300      	movs	r3, #0
 8009960:	e7f0      	b.n	8009944 <__ieee754_log+0x24>
 8009962:	4bc6      	ldr	r3, [pc, #792]	@ (8009c7c <__ieee754_log+0x35c>)
 8009964:	2200      	movs	r2, #0
 8009966:	f7f6 fe47 	bl	80005f8 <__aeabi_dmul>
 800996a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800996e:	460d      	mov	r5, r1
 8009970:	4ac3      	ldr	r2, [pc, #780]	@ (8009c80 <__ieee754_log+0x360>)
 8009972:	4295      	cmp	r5, r2
 8009974:	dd06      	ble.n	8009984 <__ieee754_log+0x64>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	f7f6 fc87 	bl	800028c <__adddf3>
 800997e:	e7e3      	b.n	8009948 <__ieee754_log+0x28>
 8009980:	2300      	movs	r3, #0
 8009982:	e7f5      	b.n	8009970 <__ieee754_log+0x50>
 8009984:	152c      	asrs	r4, r5, #20
 8009986:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800998a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800998e:	441c      	add	r4, r3
 8009990:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8009994:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8009998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800999c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 80099a0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 80099a4:	ea42 0105 	orr.w	r1, r2, r5
 80099a8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80099ac:	2200      	movs	r2, #0
 80099ae:	4bb5      	ldr	r3, [pc, #724]	@ (8009c84 <__ieee754_log+0x364>)
 80099b0:	f7f6 fc6a 	bl	8000288 <__aeabi_dsub>
 80099b4:	1cab      	adds	r3, r5, #2
 80099b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	4682      	mov	sl, r0
 80099be:	468b      	mov	fp, r1
 80099c0:	f04f 0200 	mov.w	r2, #0
 80099c4:	dc53      	bgt.n	8009a6e <__ieee754_log+0x14e>
 80099c6:	2300      	movs	r3, #0
 80099c8:	f7f7 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 80099cc:	b1d0      	cbz	r0, 8009a04 <__ieee754_log+0xe4>
 80099ce:	2c00      	cmp	r4, #0
 80099d0:	f000 8120 	beq.w	8009c14 <__ieee754_log+0x2f4>
 80099d4:	4620      	mov	r0, r4
 80099d6:	f7f6 fda5 	bl	8000524 <__aeabi_i2d>
 80099da:	a391      	add	r3, pc, #580	@ (adr r3, 8009c20 <__ieee754_log+0x300>)
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	4606      	mov	r6, r0
 80099e2:	460f      	mov	r7, r1
 80099e4:	f7f6 fe08 	bl	80005f8 <__aeabi_dmul>
 80099e8:	a38f      	add	r3, pc, #572	@ (adr r3, 8009c28 <__ieee754_log+0x308>)
 80099ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ee:	4604      	mov	r4, r0
 80099f0:	460d      	mov	r5, r1
 80099f2:	4630      	mov	r0, r6
 80099f4:	4639      	mov	r1, r7
 80099f6:	f7f6 fdff 	bl	80005f8 <__aeabi_dmul>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4620      	mov	r0, r4
 8009a00:	4629      	mov	r1, r5
 8009a02:	e7ba      	b.n	800997a <__ieee754_log+0x5a>
 8009a04:	a38a      	add	r3, pc, #552	@ (adr r3, 8009c30 <__ieee754_log+0x310>)
 8009a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0a:	4650      	mov	r0, sl
 8009a0c:	4659      	mov	r1, fp
 8009a0e:	f7f6 fdf3 	bl	80005f8 <__aeabi_dmul>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	2000      	movs	r0, #0
 8009a18:	499b      	ldr	r1, [pc, #620]	@ (8009c88 <__ieee754_log+0x368>)
 8009a1a:	f7f6 fc35 	bl	8000288 <__aeabi_dsub>
 8009a1e:	4652      	mov	r2, sl
 8009a20:	4606      	mov	r6, r0
 8009a22:	460f      	mov	r7, r1
 8009a24:	465b      	mov	r3, fp
 8009a26:	4650      	mov	r0, sl
 8009a28:	4659      	mov	r1, fp
 8009a2a:	f7f6 fde5 	bl	80005f8 <__aeabi_dmul>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	4630      	mov	r0, r6
 8009a34:	4639      	mov	r1, r7
 8009a36:	f7f6 fddf 	bl	80005f8 <__aeabi_dmul>
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	460f      	mov	r7, r1
 8009a3e:	b914      	cbnz	r4, 8009a46 <__ieee754_log+0x126>
 8009a40:	4632      	mov	r2, r6
 8009a42:	463b      	mov	r3, r7
 8009a44:	e0a0      	b.n	8009b88 <__ieee754_log+0x268>
 8009a46:	4620      	mov	r0, r4
 8009a48:	f7f6 fd6c 	bl	8000524 <__aeabi_i2d>
 8009a4c:	a374      	add	r3, pc, #464	@ (adr r3, 8009c20 <__ieee754_log+0x300>)
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	4680      	mov	r8, r0
 8009a54:	4689      	mov	r9, r1
 8009a56:	f7f6 fdcf 	bl	80005f8 <__aeabi_dmul>
 8009a5a:	a373      	add	r3, pc, #460	@ (adr r3, 8009c28 <__ieee754_log+0x308>)
 8009a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a60:	4604      	mov	r4, r0
 8009a62:	460d      	mov	r5, r1
 8009a64:	4640      	mov	r0, r8
 8009a66:	4649      	mov	r1, r9
 8009a68:	f7f6 fdc6 	bl	80005f8 <__aeabi_dmul>
 8009a6c:	e0a5      	b.n	8009bba <__ieee754_log+0x29a>
 8009a6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a72:	f7f6 fc0b 	bl	800028c <__adddf3>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4650      	mov	r0, sl
 8009a7c:	4659      	mov	r1, fp
 8009a7e:	f7f6 fee5 	bl	800084c <__aeabi_ddiv>
 8009a82:	e9cd 0100 	strd	r0, r1, [sp]
 8009a86:	4620      	mov	r0, r4
 8009a88:	f7f6 fd4c 	bl	8000524 <__aeabi_i2d>
 8009a8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a94:	4610      	mov	r0, r2
 8009a96:	4619      	mov	r1, r3
 8009a98:	f7f6 fdae 	bl	80005f8 <__aeabi_dmul>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009aa4:	f7f6 fda8 	bl	80005f8 <__aeabi_dmul>
 8009aa8:	a363      	add	r3, pc, #396	@ (adr r3, 8009c38 <__ieee754_log+0x318>)
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	4680      	mov	r8, r0
 8009ab0:	4689      	mov	r9, r1
 8009ab2:	f7f6 fda1 	bl	80005f8 <__aeabi_dmul>
 8009ab6:	a362      	add	r3, pc, #392	@ (adr r3, 8009c40 <__ieee754_log+0x320>)
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	f7f6 fbe6 	bl	800028c <__adddf3>
 8009ac0:	4642      	mov	r2, r8
 8009ac2:	464b      	mov	r3, r9
 8009ac4:	f7f6 fd98 	bl	80005f8 <__aeabi_dmul>
 8009ac8:	a35f      	add	r3, pc, #380	@ (adr r3, 8009c48 <__ieee754_log+0x328>)
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f7f6 fbdd 	bl	800028c <__adddf3>
 8009ad2:	4642      	mov	r2, r8
 8009ad4:	464b      	mov	r3, r9
 8009ad6:	f7f6 fd8f 	bl	80005f8 <__aeabi_dmul>
 8009ada:	a35d      	add	r3, pc, #372	@ (adr r3, 8009c50 <__ieee754_log+0x330>)
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	f7f6 fbd4 	bl	800028c <__adddf3>
 8009ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ae8:	f7f6 fd86 	bl	80005f8 <__aeabi_dmul>
 8009aec:	a35a      	add	r3, pc, #360	@ (adr r3, 8009c58 <__ieee754_log+0x338>)
 8009aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009af6:	4640      	mov	r0, r8
 8009af8:	4649      	mov	r1, r9
 8009afa:	f7f6 fd7d 	bl	80005f8 <__aeabi_dmul>
 8009afe:	a358      	add	r3, pc, #352	@ (adr r3, 8009c60 <__ieee754_log+0x340>)
 8009b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b04:	f7f6 fbc2 	bl	800028c <__adddf3>
 8009b08:	4642      	mov	r2, r8
 8009b0a:	464b      	mov	r3, r9
 8009b0c:	f7f6 fd74 	bl	80005f8 <__aeabi_dmul>
 8009b10:	a355      	add	r3, pc, #340	@ (adr r3, 8009c68 <__ieee754_log+0x348>)
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f7f6 fbb9 	bl	800028c <__adddf3>
 8009b1a:	4642      	mov	r2, r8
 8009b1c:	464b      	mov	r3, r9
 8009b1e:	f7f6 fd6b 	bl	80005f8 <__aeabi_dmul>
 8009b22:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8009b2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b32:	f7f6 fbab 	bl	800028c <__adddf3>
 8009b36:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8009b3a:	3551      	adds	r5, #81	@ 0x51
 8009b3c:	4335      	orrs	r5, r6
 8009b3e:	2d00      	cmp	r5, #0
 8009b40:	4680      	mov	r8, r0
 8009b42:	4689      	mov	r9, r1
 8009b44:	dd48      	ble.n	8009bd8 <__ieee754_log+0x2b8>
 8009b46:	4b50      	ldr	r3, [pc, #320]	@ (8009c88 <__ieee754_log+0x368>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	4650      	mov	r0, sl
 8009b4c:	4659      	mov	r1, fp
 8009b4e:	f7f6 fd53 	bl	80005f8 <__aeabi_dmul>
 8009b52:	4652      	mov	r2, sl
 8009b54:	465b      	mov	r3, fp
 8009b56:	f7f6 fd4f 	bl	80005f8 <__aeabi_dmul>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460f      	mov	r7, r1
 8009b62:	4640      	mov	r0, r8
 8009b64:	4649      	mov	r1, r9
 8009b66:	f7f6 fb91 	bl	800028c <__adddf3>
 8009b6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b6e:	f7f6 fd43 	bl	80005f8 <__aeabi_dmul>
 8009b72:	4680      	mov	r8, r0
 8009b74:	4689      	mov	r9, r1
 8009b76:	b964      	cbnz	r4, 8009b92 <__ieee754_log+0x272>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	4639      	mov	r1, r7
 8009b80:	f7f6 fb82 	bl	8000288 <__aeabi_dsub>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4650      	mov	r0, sl
 8009b8a:	4659      	mov	r1, fp
 8009b8c:	f7f6 fb7c 	bl	8000288 <__aeabi_dsub>
 8009b90:	e6da      	b.n	8009948 <__ieee754_log+0x28>
 8009b92:	a323      	add	r3, pc, #140	@ (adr r3, 8009c20 <__ieee754_log+0x300>)
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b9c:	f7f6 fd2c 	bl	80005f8 <__aeabi_dmul>
 8009ba0:	a321      	add	r3, pc, #132	@ (adr r3, 8009c28 <__ieee754_log+0x308>)
 8009ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	460d      	mov	r5, r1
 8009baa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bae:	f7f6 fd23 	bl	80005f8 <__aeabi_dmul>
 8009bb2:	4642      	mov	r2, r8
 8009bb4:	464b      	mov	r3, r9
 8009bb6:	f7f6 fb69 	bl	800028c <__adddf3>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	4639      	mov	r1, r7
 8009bc2:	f7f6 fb61 	bl	8000288 <__aeabi_dsub>
 8009bc6:	4652      	mov	r2, sl
 8009bc8:	465b      	mov	r3, fp
 8009bca:	f7f6 fb5d 	bl	8000288 <__aeabi_dsub>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	e7d9      	b.n	8009b8c <__ieee754_log+0x26c>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4650      	mov	r0, sl
 8009bde:	4659      	mov	r1, fp
 8009be0:	f7f6 fb52 	bl	8000288 <__aeabi_dsub>
 8009be4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009be8:	f7f6 fd06 	bl	80005f8 <__aeabi_dmul>
 8009bec:	4606      	mov	r6, r0
 8009bee:	460f      	mov	r7, r1
 8009bf0:	2c00      	cmp	r4, #0
 8009bf2:	f43f af25 	beq.w	8009a40 <__ieee754_log+0x120>
 8009bf6:	a30a      	add	r3, pc, #40	@ (adr r3, 8009c20 <__ieee754_log+0x300>)
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c00:	f7f6 fcfa 	bl	80005f8 <__aeabi_dmul>
 8009c04:	a308      	add	r3, pc, #32	@ (adr r3, 8009c28 <__ieee754_log+0x308>)
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	460d      	mov	r5, r1
 8009c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c12:	e729      	b.n	8009a68 <__ieee754_log+0x148>
 8009c14:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009c70 <__ieee754_log+0x350>
 8009c18:	e698      	b.n	800994c <__ieee754_log+0x2c>
 8009c1a:	bf00      	nop
 8009c1c:	f3af 8000 	nop.w
 8009c20:	fee00000 	.word	0xfee00000
 8009c24:	3fe62e42 	.word	0x3fe62e42
 8009c28:	35793c76 	.word	0x35793c76
 8009c2c:	3dea39ef 	.word	0x3dea39ef
 8009c30:	55555555 	.word	0x55555555
 8009c34:	3fd55555 	.word	0x3fd55555
 8009c38:	df3e5244 	.word	0xdf3e5244
 8009c3c:	3fc2f112 	.word	0x3fc2f112
 8009c40:	96cb03de 	.word	0x96cb03de
 8009c44:	3fc74664 	.word	0x3fc74664
 8009c48:	94229359 	.word	0x94229359
 8009c4c:	3fd24924 	.word	0x3fd24924
 8009c50:	55555593 	.word	0x55555593
 8009c54:	3fe55555 	.word	0x3fe55555
 8009c58:	d078c69f 	.word	0xd078c69f
 8009c5c:	3fc39a09 	.word	0x3fc39a09
 8009c60:	1d8e78af 	.word	0x1d8e78af
 8009c64:	3fcc71c5 	.word	0x3fcc71c5
 8009c68:	9997fa04 	.word	0x9997fa04
 8009c6c:	3fd99999 	.word	0x3fd99999
	...
 8009c78:	c3500000 	.word	0xc3500000
 8009c7c:	43500000 	.word	0x43500000
 8009c80:	7fefffff 	.word	0x7fefffff
 8009c84:	3ff00000 	.word	0x3ff00000
 8009c88:	3fe00000 	.word	0x3fe00000

08009c8c <_init>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	bf00      	nop
 8009c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c92:	bc08      	pop	{r3}
 8009c94:	469e      	mov	lr, r3
 8009c96:	4770      	bx	lr

08009c98 <_fini>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	bf00      	nop
 8009c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9e:	bc08      	pop	{r3}
 8009ca0:	469e      	mov	lr, r3
 8009ca2:	4770      	bx	lr
